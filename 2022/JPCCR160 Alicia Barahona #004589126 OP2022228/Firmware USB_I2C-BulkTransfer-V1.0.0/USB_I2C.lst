CCS PCH C Compiler, Version 5.015, 5967               28-oct.-22 08:34

               Filename:   D:\Laboratorio\Camara Climatica\2022\JPCCR160 Alicia Barahona #004589126 OP2022228\Firmware USB_I2C-BulkTransfer-V1.0.0\USB_I2C.lst

               ROM used:   7728 bytes (24%)
                           Largest free fragment is 25040
               RAM used:   461 (23%) at main() level
                           503 (25%) worst case
               Stack used: 13 locations (4 in main + 9 for interrupts)
               Stack size: 31

*
0000:  GOTO   1986
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   0DDC
0054:  BTFSS  F9D.3
0056:  GOTO   0060
005A:  BTFSC  F9E.3
005C:  GOTO   0D74
0060:  BTFSS  FA0.5
0062:  GOTO   006C
0066:  BTFSC  FA1.5
0068:  GOTO   0CDE
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Autoclave con Calderin 
.................... // Tiene Menú:Ciclo: Liquidos, Instrumental suave, Textil Instrumental y Caucho. 
.................... // Tiene 6 niveles programables para desfogue suave. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 2015 
....................  
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
00AE:  CLRF   FF7
00B0:  ADDLW  BE
00B2:  MOVWF  FF6
00B4:  MOVLW  00
00B6:  ADDWFC FF7,F
00B8:  TBLRD*+
00BA:  MOVF   FF5,W
00BC:  RETURN 0
00BE:  DATA 00,02
00C0:  DATA FF,FF
00C2:  DATA FF,FF
00C4:  DATA FF,FF
00C6:  DATA FF,FF
00C8:  DATA FF,FF
00CA:  DATA FF,FF
00CC:  DATA FF,FF
00CE:  BTFSS  07.7
00D0:  BRA    00D8
00D2:  MOVFF  FF2,0D
00D6:  BCF    FF2.7
00D8:  CLRF   FF7
00DA:  ADDLW  F0
00DC:  MOVWF  FF6
00DE:  MOVLW  00
00E0:  ADDWFC FF7,F
00E2:  TBLRD*+
00E4:  MOVF   FF5,W
00E6:  BTFSS  07.7
00E8:  BRA    00EE
00EA:  BTFSC  0D.7
00EC:  BSF    FF2.7
00EE:  RETURN 0
00F0:  DATA 40,00
00F2:  DATA 20,00
00F4:  DATA 00,00
00F6:  DATA 00,00
00F8:  DATA 00,00
00FA:  DATA 00,00
00FC:  DATA 00,00
00FE:  DATA 00,00
0100:  DATA 00,00
0102:  DATA 00,00
0104:  DATA 00,00
0106:  DATA 00,00
0108:  DATA 00,00
010A:  DATA 00,00
010C:  DATA 00,00
010E:  DATA 00,00
0110:  CLRF   FF7
0112:  ADDLW  20
0114:  MOVWF  FF6
0116:  MOVLW  01
0118:  ADDWFC FF7,F
011A:  TBLRD*+
011C:  MOVF   FF5,W
011E:  RETURN 0
0120:  DATA 09,02
0122:  DATA 20,00
0124:  DATA 01,01
0126:  DATA 00,C0
0128:  DATA 32,09
012A:  DATA 04,00
012C:  DATA 00,02
012E:  DATA FF,FF
0130:  DATA FF,00
0132:  DATA 07,05
0134:  DATA 81,02
0136:  DATA 20,00
0138:  DATA 01,07
013A:  DATA 05,01
013C:  DATA 02,20
013E:  DATA 00,01
0140:  CLRF   FF7
0142:  ADDLW  50
0144:  MOVWF  FF6
0146:  MOVLW  01
0148:  ADDWFC FF7,F
014A:  TBLRD*+
014C:  MOVF   FF5,W
014E:  RETURN 0
0150:  DATA 01,00
0152:  CLRF   FF7
0154:  ADDLW  62
0156:  MOVWF  FF6
0158:  MOVLW  01
015A:  ADDWFC FF7,F
015C:  TBLRD*+
015E:  MOVF   FF5,W
0160:  RETURN 0
0162:  DATA 12,01
0164:  DATA 10,01
0166:  DATA 00,00
0168:  DATA 00,40
016A:  DATA D8,04
016C:  DATA 0B,00
016E:  DATA 01,00
0170:  DATA 01,02
0172:  DATA 00,01
0174:  CLRF   FF7
0176:  ADDLW  84
0178:  MOVWF  FF6
017A:  MOVLW  01
017C:  ADDWFC FF7,F
017E:  TBLRD*+
0180:  MOVF   FF5,W
0182:  RETURN 0
0184:  DATA 00,04
0186:  DATA 14,00
0188:  CLRF   FF7
018A:  ADDLW  98
018C:  MOVWF  FF6
018E:  MOVLW  01
0190:  ADDWFC FF7,F
0192:  TBLRD*+
0194:  MOVF   FF5,W
0196:  RETURN 0
0198:  DATA 04,03
019A:  DATA 09,04
019C:  DATA 10,03
019E:  DATA 6A,00
01A0:  DATA 50,00
01A2:  DATA 69,00
01A4:  DATA 63,00
01A6:  DATA 55,00
01A8:  DATA 73,00
01AA:  DATA 62,00
01AC:  DATA 22,03
01AE:  DATA 4C,00
01B0:  DATA 65,00
01B2:  DATA 63,00
01B4:  DATA 74,00
01B6:  DATA 6F,00
01B8:  DATA 72,00
01BA:  DATA 20,00
01BC:  DATA 46,00
01BE:  DATA 4C,00
01C0:  DATA 55,00
01C2:  DATA 4A,00
01C4:  DATA 4F,00
01C6:  DATA 20,00
01C8:  DATA 4A,00
01CA:  DATA 50,00
01CC:  DATA 2E,00
*
0E50:  MOVLW  8E
0E52:  MOVWF  00
0E54:  MOVFF  FC,01
0E58:  MOVFF  FB,02
0E5C:  CLRF   03
0E5E:  MOVF   01,F
0E60:  BNZ   0E74
0E62:  MOVFF  02,01
0E66:  CLRF   02
0E68:  MOVLW  08
0E6A:  SUBWF  00,F
0E6C:  MOVF   01,F
0E6E:  BNZ   0E74
0E70:  CLRF   00
0E72:  BRA    0E84
0E74:  BCF    FD8.0
0E76:  BTFSC  01.7
0E78:  BRA    0E82
0E7A:  RLCF   02,F
0E7C:  RLCF   01,F
0E7E:  DECF   00,F
0E80:  BRA    0E74
0E82:  BCF    01.7
0E84:  RETURN 0
0E86:  MOVF   xFB,W
0E88:  BTFSC  FD8.2
0E8A:  BRA    0FF4
0E8C:  MOVLB  1
0E8E:  MOVWF  x07
0E90:  MOVLB  0
0E92:  MOVF   xFF,W
0E94:  BTFSC  FD8.2
0E96:  BRA    0FF4
0E98:  MOVLB  1
0E9A:  SUBWF  x07,F
0E9C:  BNC   0EAC
0E9E:  MOVLW  7F
0EA0:  ADDWF  x07,F
0EA2:  BTFSS  FD8.0
0EA4:  BRA    0EAA
0EA6:  MOVLB  0
0EA8:  BRA    0FF4
0EAA:  BRA    0EC0
0EAC:  MOVLW  81
0EAE:  SUBWF  x07,F
0EB0:  BTFSC  FD8.0
0EB2:  BRA    0EB8
0EB4:  MOVLB  0
0EB6:  BRA    0FF4
0EB8:  BTFSS  FD8.2
0EBA:  BRA    0EC0
0EBC:  MOVLB  0
0EBE:  BRA    0FF4
0EC0:  MOVFF  107,00
0EC4:  CLRF   01
0EC6:  CLRF   02
0EC8:  CLRF   03
0ECA:  CLRF   x06
0ECC:  MOVFF  FC,105
0ED0:  BSF    x05.7
0ED2:  MOVFF  FD,104
0ED6:  MOVFF  FE,103
0EDA:  MOVLW  19
0EDC:  MOVWF  x07
0EDE:  MOVF   x02,W
0EE0:  SUBWF  x03,F
0EE2:  BC    0EFE
0EE4:  MOVLW  01
0EE6:  SUBWF  x04,F
0EE8:  BC    0EFE
0EEA:  SUBWF  x05,F
0EEC:  BC    0EFE
0EEE:  SUBWF  x06,F
0EF0:  BC    0EFE
0EF2:  INCF   x06,F
0EF4:  INCF   x05,F
0EF6:  INCF   x04,F
0EF8:  MOVF   x02,W
0EFA:  ADDWF  x03,F
0EFC:  BRA    0F4E
0EFE:  MOVF   x01,W
0F00:  SUBWF  x04,F
0F02:  BC    0F28
0F04:  MOVLW  01
0F06:  SUBWF  x05,F
0F08:  BC    0F28
0F0A:  SUBWF  x06,F
0F0C:  BC    0F28
0F0E:  INCF   x06,F
0F10:  INCF   x05,F
0F12:  MOVF   x01,W
0F14:  ADDWF  x04,F
0F16:  MOVF   x02,W
0F18:  ADDWF  x03,F
0F1A:  BNC   0F4E
0F1C:  INCF   x04,F
0F1E:  BNZ   0F4E
0F20:  INCF   x05,F
0F22:  BNZ   0F4E
0F24:  INCF   x06,F
0F26:  BRA    0F4E
0F28:  MOVF   x00,W
0F2A:  IORLW  80
0F2C:  SUBWF  x05,F
0F2E:  BC    0F4C
0F30:  MOVLW  01
0F32:  SUBWF  x06,F
0F34:  BC    0F4C
0F36:  INCF   x06,F
0F38:  MOVF   x00,W
0F3A:  IORLW  80
0F3C:  ADDWF  x05,F
0F3E:  MOVF   x01,W
0F40:  ADDWF  x04,F
0F42:  BNC   0F16
0F44:  INCF   x05,F
0F46:  BNZ   0F16
0F48:  INCF   x06,F
0F4A:  BRA    0F16
0F4C:  BSF    03.0
0F4E:  DECFSZ x07,F
0F50:  BRA    0F54
0F52:  BRA    0F6A
0F54:  BCF    FD8.0
0F56:  RLCF   x03,F
0F58:  RLCF   x04,F
0F5A:  RLCF   x05,F
0F5C:  RLCF   x06,F
0F5E:  BCF    FD8.0
0F60:  RLCF   03,F
0F62:  RLCF   02,F
0F64:  RLCF   01,F
0F66:  RLCF   x08,F
0F68:  BRA    0EDE
0F6A:  BTFSS  x08.0
0F6C:  BRA    0F7A
0F6E:  BCF    FD8.0
0F70:  RRCF   01,F
0F72:  RRCF   02,F
0F74:  RRCF   03,F
0F76:  RRCF   x08,F
0F78:  BRA    0F82
0F7A:  DECFSZ 00,F
0F7C:  BRA    0F82
0F7E:  MOVLB  0
0F80:  BRA    0FF4
0F82:  BTFSC  x08.7
0F84:  BRA    0FC2
0F86:  BCF    FD8.0
0F88:  RLCF   x03,F
0F8A:  RLCF   x04,F
0F8C:  RLCF   x05,F
0F8E:  RLCF   x06,F
0F90:  MOVF   x02,W
0F92:  SUBWF  x03,F
0F94:  BC    0FA4
0F96:  MOVLW  01
0F98:  SUBWF  x04,F
0F9A:  BC    0FA4
0F9C:  SUBWF  x05,F
0F9E:  BC    0FA4
0FA0:  SUBWF  x06,F
0FA2:  BNC   0FDE
0FA4:  MOVF   x01,W
0FA6:  SUBWF  x04,F
0FA8:  BC    0FB4
0FAA:  MOVLW  01
0FAC:  SUBWF  x05,F
0FAE:  BC    0FB4
0FB0:  SUBWF  x06,F
0FB2:  BNC   0FDE
0FB4:  MOVF   x00,W
0FB6:  IORLW  80
0FB8:  SUBWF  x05,F
0FBA:  BC    0FC2
0FBC:  MOVLW  01
0FBE:  SUBWF  x06,F
0FC0:  BNC   0FDE
0FC2:  INCF   03,F
0FC4:  BNZ   0FDE
0FC6:  INCF   02,F
0FC8:  BNZ   0FDE
0FCA:  INCF   01,F
0FCC:  BNZ   0FDE
0FCE:  INCF   00,F
0FD0:  BTFSS  FD8.2
0FD2:  BRA    0FD8
0FD4:  MOVLB  0
0FD6:  BRA    0FF4
0FD8:  RRCF   01,F
0FDA:  RRCF   02,F
0FDC:  RRCF   03,F
0FDE:  MOVFF  FC,107
0FE2:  MOVF   x00,W
0FE4:  XORWF  x07,F
0FE6:  BTFSS  x07.7
0FE8:  BRA    0FEE
0FEA:  BSF    01.7
0FEC:  BRA    0FFE
0FEE:  BCF    01.7
0FF0:  BRA    0FFE
0FF2:  MOVLB  0
0FF4:  CLRF   00
0FF6:  CLRF   01
0FF8:  CLRF   02
0FFA:  CLRF   03
0FFC:  MOVLB  1
0FFE:  MOVLB  0
1000:  RETURN 0
1002:  MOVLW  80
1004:  BTFSS  FD8.1
1006:  BRA    100C
1008:  MOVLB  1
100A:  XORWF  x00,F
100C:  MOVLB  1
100E:  CLRF   x05
1010:  CLRF   x06
1012:  MOVFF  FC,104
1016:  MOVF   x00,W
1018:  XORWF  x04,F
101A:  MOVLB  0
101C:  MOVF   xFB,W
101E:  BTFSC  FD8.2
1020:  BRA    11E6
1022:  MOVLB  1
1024:  MOVWF  x03
1026:  MOVWF  00
1028:  MOVLB  0
102A:  MOVF   xFF,W
102C:  BTFSC  FD8.2
102E:  BRA    11FA
1030:  MOVLB  1
1032:  SUBWF  x03,F
1034:  BTFSC  FD8.2
1036:  BRA    1140
1038:  BNC   10B4
103A:  MOVFF  100,109
103E:  BSF    x09.7
1040:  MOVFF  101,108
1044:  MOVFF  102,107
1048:  CLRF   x06
104A:  BCF    FD8.0
104C:  RRCF   x09,F
104E:  RRCF   x08,F
1050:  RRCF   x07,F
1052:  RRCF   x06,F
1054:  DECFSZ x03,F
1056:  BRA    1048
1058:  BTFSS  x04.7
105A:  BRA    1062
105C:  BSF    x05.0
105E:  BRA    1224
1060:  BCF    x05.0
1062:  BCF    x03.0
1064:  BSF    x05.4
1066:  CLRF   FEA
1068:  MOVLW  FE
106A:  MOVWF  FE9
106C:  BRA    124A
106E:  BCF    x05.4
1070:  BTFSC  x04.7
1072:  BRA    1088
1074:  BTFSS  x03.0
1076:  BRA    109E
1078:  RRCF   x09,F
107A:  RRCF   x08,F
107C:  RRCF   x07,F
107E:  RRCF   x06,F
1080:  INCF   00,F
1082:  BTFSC  FD8.2
1084:  BRA    121A
1086:  BRA    109E
1088:  BTFSC  x09.7
108A:  BRA    10A4
108C:  BCF    FD8.0
108E:  RLCF   x06,F
1090:  RLCF   x07,F
1092:  RLCF   x08,F
1094:  RLCF   x09,F
1096:  DECF   00,F
1098:  BTFSC  FD8.2
109A:  BRA    121A
109C:  BRA    1088
109E:  BSF    x05.6
10A0:  BRA    117E
10A2:  BCF    x05.6
10A4:  MOVFF  FC,104
10A8:  BTFSS  x04.7
10AA:  BRA    10B0
10AC:  BSF    x09.7
10AE:  BRA    120C
10B0:  BCF    x09.7
10B2:  BRA    120C
10B4:  MOVFF  FF,103
10B8:  MOVFF  FF,00
10BC:  MOVLB  0
10BE:  MOVF   xFB,W
10C0:  MOVLB  1
10C2:  SUBWF  x03,F
10C4:  MOVFF  FC,109
10C8:  BSF    x09.7
10CA:  MOVFF  FD,108
10CE:  MOVFF  FE,107
10D2:  CLRF   x06
10D4:  BCF    FD8.0
10D6:  RRCF   x09,F
10D8:  RRCF   x08,F
10DA:  RRCF   x07,F
10DC:  RRCF   x06,F
10DE:  DECFSZ x03,F
10E0:  BRA    10D2
10E2:  BTFSS  x04.7
10E4:  BRA    10EC
10E6:  BSF    x05.1
10E8:  BRA    1224
10EA:  BCF    x05.1
10EC:  BCF    x03.0
10EE:  BSF    x05.5
10F0:  MOVLW  01
10F2:  MOVWF  FEA
10F4:  MOVLW  02
10F6:  MOVWF  FE9
10F8:  BRA    124A
10FA:  BCF    x05.5
10FC:  BTFSC  x04.7
10FE:  BRA    1114
1100:  BTFSS  x03.0
1102:  BRA    112A
1104:  RRCF   x09,F
1106:  RRCF   x08,F
1108:  RRCF   x07,F
110A:  RRCF   x06,F
110C:  INCF   00,F
110E:  BTFSC  FD8.2
1110:  BRA    121A
1112:  BRA    112A
1114:  BTFSC  x09.7
1116:  BRA    1130
1118:  BCF    FD8.0
111A:  RLCF   x06,F
111C:  RLCF   x07,F
111E:  RLCF   x08,F
1120:  RLCF   x09,F
1122:  DECF   00,F
1124:  BTFSC  FD8.2
1126:  BRA    121A
1128:  BRA    1114
112A:  BSF    x05.7
112C:  BRA    117E
112E:  BCF    x05.7
1130:  MOVFF  100,104
1134:  BTFSS  x00.7
1136:  BRA    113C
1138:  BSF    x09.7
113A:  BRA    120C
113C:  BCF    x09.7
113E:  BRA    120C
1140:  MOVFF  100,109
1144:  BSF    x09.7
1146:  MOVFF  101,108
114A:  MOVFF  102,107
114E:  BTFSS  x04.7
1150:  BRA    115A
1152:  BCF    x09.7
1154:  BSF    x05.2
1156:  BRA    1224
1158:  BCF    x05.2
115A:  CLRF   x06
115C:  BCF    x03.0
115E:  CLRF   FEA
1160:  MOVLW  FE
1162:  MOVWF  FE9
1164:  BRA    124A
1166:  BTFSC  x04.7
1168:  BRA    11A2
116A:  MOVFF  FC,104
116E:  BTFSS  x03.0
1170:  BRA    117E
1172:  RRCF   x09,F
1174:  RRCF   x08,F
1176:  RRCF   x07,F
1178:  RRCF   x06,F
117A:  INCF   00,F
117C:  BZ    121A
117E:  BTFSS  x06.7
1180:  BRA    1198
1182:  INCF   x07,F
1184:  BNZ   1198
1186:  INCF   x08,F
1188:  BNZ   1198
118A:  INCF   x09,F
118C:  BNZ   1198
118E:  RRCF   x09,F
1190:  RRCF   x08,F
1192:  RRCF   x07,F
1194:  INCF   00,F
1196:  BZ    121A
1198:  BTFSC  x05.6
119A:  BRA    10A2
119C:  BTFSC  x05.7
119E:  BRA    112E
11A0:  BRA    11DA
11A2:  MOVLW  80
11A4:  XORWF  x09,F
11A6:  BTFSS  x09.7
11A8:  BRA    11B2
11AA:  BRA    1224
11AC:  MOVFF  100,104
11B0:  BRA    11C6
11B2:  MOVFF  FC,104
11B6:  MOVF   x09,F
11B8:  BNZ   11C6
11BA:  MOVF   x08,F
11BC:  BNZ   11C6
11BE:  MOVF   x07,F
11C0:  BNZ   11C6
11C2:  CLRF   00
11C4:  BRA    120C
11C6:  BTFSC  x09.7
11C8:  BRA    11DA
11CA:  BCF    FD8.0
11CC:  RLCF   x06,F
11CE:  RLCF   x07,F
11D0:  RLCF   x08,F
11D2:  RLCF   x09,F
11D4:  DECFSZ 00,F
11D6:  BRA    11C6
11D8:  BRA    121A
11DA:  BTFSS  x04.7
11DC:  BRA    11E2
11DE:  BSF    x09.7
11E0:  BRA    120C
11E2:  BCF    x09.7
11E4:  BRA    120C
11E6:  MOVFF  FF,00
11EA:  MOVFF  100,109
11EE:  MOVFF  101,108
11F2:  MOVFF  102,107
11F6:  MOVLB  1
11F8:  BRA    120C
11FA:  MOVFF  FB,00
11FE:  MOVFF  FC,109
1202:  MOVFF  FD,108
1206:  MOVFF  FE,107
120A:  MOVLB  1
120C:  MOVFF  109,01
1210:  MOVFF  108,02
1214:  MOVFF  107,03
1218:  BRA    1282
121A:  CLRF   00
121C:  CLRF   01
121E:  CLRF   02
1220:  CLRF   03
1222:  BRA    1282
1224:  CLRF   x06
1226:  COMF   x07,F
1228:  COMF   x08,F
122A:  COMF   x09,F
122C:  COMF   x06,F
122E:  INCF   x06,F
1230:  BNZ   123C
1232:  INCF   x07,F
1234:  BNZ   123C
1236:  INCF   x08,F
1238:  BNZ   123C
123A:  INCF   x09,F
123C:  BTFSC  x05.0
123E:  BRA    1060
1240:  BTFSC  x05.1
1242:  BRA    10EA
1244:  BTFSC  x05.2
1246:  BRA    1158
1248:  BRA    11AC
124A:  MOVF   FEF,W
124C:  ADDWF  x07,F
124E:  BNC   125A
1250:  INCF   x08,F
1252:  BNZ   125A
1254:  INCF   x09,F
1256:  BTFSC  FD8.2
1258:  BSF    x03.0
125A:  MOVF   FED,F
125C:  MOVF   FEF,W
125E:  ADDWF  x08,F
1260:  BNC   1268
1262:  INCF   x09,F
1264:  BTFSC  FD8.2
1266:  BSF    x03.0
1268:  MOVF   FED,F
126A:  MOVF   FEF,W
126C:  BTFSC  FEF.7
126E:  BRA    1272
1270:  XORLW  80
1272:  ADDWF  x09,F
1274:  BTFSC  FD8.0
1276:  BSF    x03.0
1278:  BTFSC  x05.4
127A:  BRA    106E
127C:  BTFSC  x05.5
127E:  BRA    10FA
1280:  BRA    1166
1282:  MOVLB  0
1284:  RETURN 0
*
14DE:  MOVFF  FC,103
14E2:  MOVLB  1
14E4:  MOVF   x00,W
14E6:  XORWF  x03,F
14E8:  BTFSS  x03.7
14EA:  BRA    14F8
14EC:  BCF    FD8.2
14EE:  BCF    FD8.0
14F0:  MOVLB  0
14F2:  BTFSC  xFC.7
14F4:  BSF    FD8.0
14F6:  BRA    1582
14F8:  MOVFF  FC,103
14FC:  MOVFF  FF,104
1500:  MOVLB  0
1502:  MOVF   xFB,W
1504:  MOVLB  1
1506:  SUBWF  x04,F
1508:  BZ    151C
150A:  BTFSC  x03.7
150C:  BRA    1512
150E:  MOVLB  0
1510:  BRA    1582
1512:  MOVF   FD8,W
1514:  XORLW  01
1516:  MOVWF  FD8
1518:  MOVLB  0
151A:  BRA    1582
151C:  MOVFF  100,104
1520:  MOVLB  0
1522:  MOVF   xFC,W
1524:  MOVLB  1
1526:  SUBWF  x04,F
1528:  BZ    153C
152A:  BTFSC  x03.7
152C:  BRA    1532
152E:  MOVLB  0
1530:  BRA    1582
1532:  MOVF   FD8,W
1534:  XORLW  01
1536:  MOVWF  FD8
1538:  MOVLB  0
153A:  BRA    1582
153C:  MOVFF  101,104
1540:  MOVLB  0
1542:  MOVF   xFD,W
1544:  MOVLB  1
1546:  SUBWF  x04,F
1548:  BZ    155C
154A:  BTFSC  x03.7
154C:  BRA    1552
154E:  MOVLB  0
1550:  BRA    1582
1552:  MOVF   FD8,W
1554:  XORLW  01
1556:  MOVWF  FD8
1558:  MOVLB  0
155A:  BRA    1582
155C:  MOVFF  102,104
1560:  MOVLB  0
1562:  MOVF   xFE,W
1564:  MOVLB  1
1566:  SUBWF  x04,F
1568:  BZ    157E
156A:  BTFSC  x03.7
156C:  BRA    1572
156E:  MOVLB  0
1570:  BRA    1582
1572:  MOVF   FD8,W
1574:  XORLW  01
1576:  MOVWF  FD8
1578:  MOVLB  0
157A:  BRA    1582
157C:  MOVLB  1
157E:  BCF    FD8.0
1580:  MOVLB  0
1582:  RETURN 0
*
177C:  MOVLW  8E
177E:  MOVWF  00
1780:  MOVF   xFB,W
1782:  SUBWF  00,F
1784:  MOVFF  FC,02
1788:  MOVFF  FD,01
178C:  BSF    02.7
178E:  MOVF   00,F
1790:  BZ    17A4
1792:  BCF    FD8.0
1794:  MOVF   02,F
1796:  BNZ   179C
1798:  MOVF   01,F
179A:  BZ    17A4
179C:  RRCF   02,F
179E:  RRCF   01,F
17A0:  DECFSZ 00,F
17A2:  BRA    1792
17A4:  BTFSS  xFC.7
17A6:  BRA    17B2
17A8:  COMF   01,F
17AA:  COMF   02,F
17AC:  INCF   01,F
17AE:  BTFSC  FD8.2
17B0:  INCF   02,F
17B2:  GOTO   1D70 (RETURN)
17B6:  MOVF   xFB,W
17B8:  BTFSC  FD8.2
17BA:  BRA    18CC
17BC:  MOVWF  00
17BE:  MOVF   xFF,W
17C0:  BTFSC  FD8.2
17C2:  BRA    18CC
17C4:  ADDWF  00,F
17C6:  BNC   17D2
17C8:  MOVLW  81
17CA:  ADDWF  00,F
17CC:  BTFSC  FD8.0
17CE:  BRA    18CC
17D0:  BRA    17DE
17D2:  MOVLW  7F
17D4:  SUBWF  00,F
17D6:  BTFSS  FD8.0
17D8:  BRA    18CC
17DA:  BTFSC  FD8.2
17DC:  BRA    18CC
17DE:  MOVFF  FC,103
17E2:  MOVLB  1
17E4:  MOVF   x00,W
17E6:  XORWF  x03,F
17E8:  MOVLB  0
17EA:  BSF    xFC.7
17EC:  MOVLB  1
17EE:  BSF    x00.7
17F0:  MOVLB  0
17F2:  MOVF   xFE,W
17F4:  MOVLB  1
17F6:  MULWF  x02
17F8:  MOVFF  FF4,105
17FC:  MOVLB  0
17FE:  MOVF   xFD,W
1800:  MOVLB  1
1802:  MULWF  x01
1804:  MOVFF  FF4,03
1808:  MOVFF  FF3,104
180C:  MULWF  x02
180E:  MOVF   FF3,W
1810:  ADDWF  x05,F
1812:  MOVF   FF4,W
1814:  ADDWFC x04,F
1816:  MOVLW  00
1818:  ADDWFC 03,F
181A:  MOVLB  0
181C:  MOVF   xFE,W
181E:  MOVLB  1
1820:  MULWF  x01
1822:  MOVF   FF3,W
1824:  ADDWF  x05,F
1826:  MOVF   FF4,W
1828:  ADDWFC x04,F
182A:  MOVLW  00
182C:  CLRF   02
182E:  ADDWFC 03,F
1830:  ADDWFC 02,F
1832:  MOVLB  0
1834:  MOVF   xFC,W
1836:  MOVLB  1
1838:  MULWF  x02
183A:  MOVF   FF3,W
183C:  ADDWF  x04,F
183E:  MOVF   FF4,W
1840:  ADDWFC 03,F
1842:  MOVLW  00
1844:  ADDWFC 02,F
1846:  MOVLB  0
1848:  MOVF   xFC,W
184A:  MOVLB  1
184C:  MULWF  x01
184E:  MOVF   FF3,W
1850:  ADDWF  03,F
1852:  MOVF   FF4,W
1854:  ADDWFC 02,F
1856:  MOVLW  00
1858:  CLRF   01
185A:  ADDWFC 01,F
185C:  MOVLB  0
185E:  MOVF   xFE,W
1860:  MOVLB  1
1862:  MULWF  x00
1864:  MOVF   FF3,W
1866:  ADDWF  x04,F
1868:  MOVF   FF4,W
186A:  ADDWFC 03,F
186C:  MOVLW  00
186E:  ADDWFC 02,F
1870:  ADDWFC 01,F
1872:  MOVLB  0
1874:  MOVF   xFD,W
1876:  MOVLB  1
1878:  MULWF  x00
187A:  MOVF   FF3,W
187C:  ADDWF  03,F
187E:  MOVF   FF4,W
1880:  ADDWFC 02,F
1882:  MOVLW  00
1884:  ADDWFC 01,F
1886:  MOVLB  0
1888:  MOVF   xFC,W
188A:  MOVLB  1
188C:  MULWF  x00
188E:  MOVF   FF3,W
1890:  ADDWF  02,F
1892:  MOVF   FF4,W
1894:  ADDWFC 01,F
1896:  INCF   00,F
1898:  BTFSC  01.7
189A:  BRA    18A6
189C:  RLCF   x04,F
189E:  RLCF   03,F
18A0:  RLCF   02,F
18A2:  RLCF   01,F
18A4:  DECF   00,F
18A6:  MOVLW  00
18A8:  BTFSS  x04.7
18AA:  BRA    18C0
18AC:  INCF   03,F
18AE:  ADDWFC 02,F
18B0:  ADDWFC 01,F
18B2:  MOVF   01,W
18B4:  BNZ   18C0
18B6:  MOVF   02,W
18B8:  BNZ   18C0
18BA:  MOVF   03,W
18BC:  BNZ   18C0
18BE:  INCF   00,F
18C0:  BTFSC  x03.7
18C2:  BSF    01.7
18C4:  BTFSS  x03.7
18C6:  BCF    01.7
18C8:  BRA    18D6
18CA:  MOVLB  0
18CC:  CLRF   00
18CE:  CLRF   01
18D0:  CLRF   02
18D2:  CLRF   03
18D4:  MOVLB  1
18D6:  MOVLB  0
18D8:  GOTO   1DD2 (RETURN)
....................  
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,WDT4096,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
.................... //#use RS232(BAUD=19200, BITS=8, PARITY=N, XMIT=PIN_C6, RCV=PIN_C7, stream=printer) 
.................... #use i2c(slave, slow, sda=PIN_B0, scl=PIN_B1, address=0xB0) 
*
0D5C:  MOVF   FC9,W
0D5E:  MOVFF  118,FC9
0D62:  BSF    FC6.4
0D64:  BCF    F9E.3
0D66:  BTFSC  FC7.0
0D68:  BRA    0D66
0D6A:  CLRF   01
0D6C:  BTFSC  FC6.4
0D6E:  INCF   01,F
0D70:  GOTO   0DA2 (RETURN)
.................... #use rs232(baud=9700, xmit=PIN_C6, rcv=PIN_C7, bits=8, parity=N,stop=1, ERRORS) 
*
1628:  BTFSS  F9E.4
162A:  BRA    1628
162C:  MOVWF  FAD
162E:  RETURN 0
....................  
.................... #define USB_HID_DEVICE FALSE // deshabilitamos el uso de las directivas HID 
.................... #define USB_EP1_TX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for IN bulk/interrupt transfers 
.................... #define USB_EP1_RX_ENABLE USB_ENABLE_BULK // turn on EP1(EndPoint1) for OUT bulk/interrupt transfers 
.................... #define USB_EP1_TX_SIZE 32 // size to allocate for the tx endpoint 1 buffer 
.................... #define USB_EP1_RX_SIZE 32 // size to allocate for the rx endpoint 1 buffer 
.................... #include <pic18_usb.h> // Microchip PIC18Fxx5x Hardware layer for CCS's PIC USB driver 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.h                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F2458/2553/4458/4553                                   //// 
.................... ////     PIC18F13K50/14K50                                           //// 
.................... ////     PIC18F2xJ50/PIC18F4xJ50                                     //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... //// See the section labeled EXTRA USER FUNCTIONS for functions      //// 
.................... //// that are specific to only this HW peripheral that you may       //// 
.................... //// find useful to use in your application.                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on D+ or D+ depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on Vusb, even if you are      //// 
.................... ////  using the internal 3.3V USB regulator.                         //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_H__ 
.................... #DEFINE __PIC18_USB_H__ 
....................  
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_MAX_EP0_PACKET_LENGTH 
.................... #if ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450") || (getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
.................... #endif 
....................  
.................... #if (!USB_USE_FULL_SPEED && (USB_MAX_EP0_PACKET_LENGTH!=8)) 
....................  #error Slow speed devices must use a max packet size of 8 for endpoint 0! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH < 8 
....................  #error Max Endpoint 0 length can't be less than 8! 
.................... #endif 
....................  
.................... #if USB_MAX_EP0_PACKET_LENGTH > 64 
....................  #error Max Endpoint 0 length can't be greater than 64! 
.................... #endif 
....................  
.................... #include <usb_hw_layer.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_hw_layer.h                            //// 
.................... ////                                                                   //// 
.................... //// HW Layer for the USB Stack.                                       //// 
.................... ////                                                                   //// 
.................... //// HW drivers for the USB stack must support this API.               //// 
.................... ////                                                                   //// 
.................... //// The HW driver must also have a token handler that will call       //// 
.................... //// usb_token_reset() when the device is init/reset, will call        //// 
.................... //// usb_isr_tok_setup_dne() when it receives a setup packet,          //// 
.................... //// will call usb_isr_tok_out_dne() when a new packet is received,    //// 
.................... //// and will call usb_isr_tok_in_dne() when a new packet is sent.     //// 
.................... //// See usb.h for documentation of these functions.                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __USB_HW_LAYER_H__ 
.................... #define __USB_HW_LAYER_H__ 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
....................  
.................... // USER LEVEL FUNCTIONS: 
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_cs(void); 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: See API section of USB.H for documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt. 
.................... /*  
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /* Shouldn't be called by user, let usb_task() handle this. 
.................... /* 
.................... /* If the user does call this function while USB is connected, the USB  
.................... /* peripheral will be disabled only momentarily because usb_task() will 
.................... /* reconnect.  But this is a great way to cause the PC/HOST to cause a USB 
.................... /* reset of the device. 
.................... /* 
.................... /* NOTE: If you are writing a new HW driver, this routine should call  
.................... /*       usb_token_reset() to reset the CH9 stack. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void); 
....................  
.................... /****************************************************************************** 
.................... /* usb_put_packet() 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to (0..15). 
.................... /*        ptr - points to data to send. 
.................... /*        len - amount of data to send. 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid,  
.................... /*                 or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only  
.................... /*         reason it will return FALSE is if because the TX buffer is still full  
.................... /*         from the last time it tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a  
.................... /*          difference between a packet and a message.  If you wanted to send a  
.................... /*          512 byte message on an endpoint that only supported 64 byte packets, 
.................... /*          this would be accomplished this by sending 8 64-byte packets,  
.................... /*          followed by a 0 length packet.  If the last (or only packet) being  
.................... /*          sent is less than the max packet size defined in your descriptor  
.................... /*          then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message  
.................... /*          correctly and know if a 0 lenght packet needs to be sent. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, unsigned int16 len, USB_DTS_BIT tgl); 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer and saved to ptr. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB endpoint buffer. 
.................... /*          Until this is called, if there is data in the receive buffer the 
.................... /*          PC/HOST will be prevented from sending more data.  Upon completion 
.................... /*          of this call, the endpoint will be freed and the PC/HOST will be 
.................... /*          allowed to send a new packet.  Only receives one packet, if you need  
.................... /*          to receive multiple packets or handle 0-length terminator packets, 
.................... /*          then use usb_gets(). 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /********************************************************************************/ 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max); 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check (0..15) 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /*          See API section of USB.H for more information. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_RX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_kbhit(int8 en); 
....................  
.................... /****************************************************************************** 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /* The result will be invalid if the specified input has not been configured for 
.................... /* use by the API with USB_EPx_TX_SIZE 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_tbe(int8 en); 
....................  
.................... //////////////// END USER LEVEL FUNCTIONS ///////////////////////////////////// 
....................  
....................  
.................... /// 
.................... /// BEGIN STACK LEVEL FUNCTIONS: These functions are meant to be called by 
.................... ///            the USB stack, and are not meant to be called by the  
.................... ///            user/application. 
.................... /// 
....................  
.................... /***************************************************************************** 
.................... /* usb_stall_ep() 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will 
.................... /*          send STALL packet if the host tries to access this endpoint's  
.................... /*          buffer. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint); 
....................  
....................  
.................... /***************************************************************************** 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_endpoint_stalled() 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and  
.................... /*          Clear_Feature Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK IF VALID BEFORE 
.................... /*       CALLING THIS ROUTINE. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
....................  
.................... /***************************************************************************** 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.   
.................... /*          The host will now talk to use with the following address. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_address(int8 address); 
....................  
.................... /****************************************************************************** 
.................... /* usb_set_configured() 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_set_configured(int8 config); 
....................  
.................... /****************************************************************************** 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints (all endpoints but 0) 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_disable_endpoints(void); 
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoint() 
.................... /* 
.................... /* Input: Endpoint to disable (0..15) 
.................... /* 
.................... /* Summary: Disables specified endpoint 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoint(int8 en); 
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: One of these 3 functions will be called by the USB stack after 
.................... /*          handling a SETUP packet. 
.................... /*           
.................... /*          After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /*          The operation of these functions depends on how SETUP packets 
.................... /*          are handled in the hardware layer. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(unsigned int8 len); 
.................... void usb_request_get_data(void); 
.................... void usb_request_stall(void); 
....................  
....................  
.................... #endif 
....................  
....................  
.................... //////////////////////// EXTRA USER FUNCTIONS ///////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC). 
.................... /*          This routine is useful if you want to setup an endpoint by 
.................... /*          writing to the buffer directly. 
.................... /*          This routine is not necessary if you use usb_put_packet(). 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for release 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC).  This routine is useful if you do not 
.................... /*          want to use usb_get_packet(), instead you want to handle with 
.................... /*          the endpoint buffer directly.  Also see usb_rx_packet_size(). 
.................... /*          This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
....................  
.................... /************************************************************** 
.................... /* usb_rx_packet_size() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark to check 
.................... /* 
.................... /* Output: Returns the number of bytes in the endpoint's receive buffer. 
.................... /* 
.................... /* Summary: Read the number of data stored in the receive buffer.  When you 
.................... /*    have handled the data, use usb_flush_out() to clear the buffer.  The 
.................... /*    result may be invalid if usb_kbhit() returns false for this endpoint. 
.................... /*    This routine is not necessary if you use usb_get_packet(). 
.................... /***************************************************************/ 
.................... int16 usb_rx_packet_size(int8 endpoint); 
....................  
.................... #ENDIF 
....................  
.................... #include "header.h" // Configuración del USB y los descriptores para este dispositivo 
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start config descriptor 
.................... /// right now we only support one configuration descriptor. 
.................... /// the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... #DEFINE USB_TOTAL_CONFIG_LEN 32 //config+interface+class+endpoint 
....................  
.................... //configuration descriptor 
.................... char const USB_CONFIG_DESC[] = { 
.................... //config_descriptor for config index 1 
.................... USB_DESC_CONFIG_LEN, //length of descriptor size 
.................... USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (0x02) 
.................... USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config 
.................... 1, //number of interfaces this device supports 
.................... 0x01, //identifier for this configuration. (IF we had more than one configurations) 
.................... 0x00, //index of string descriptor for this configuration 
.................... 0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 reserved and bit7=1 
.................... 0x32, //maximum bus power required (maximum milliamperes/2) (0x32 = 100mA) 
....................  
.................... //interface descriptor 0 alt 0 
.................... USB_DESC_INTERFACE_LEN, //length of descriptor 
.................... USB_DESC_INTERFACE_TYPE, //constant INTERFACE (0x04) 
.................... 0x00, //number defining this interface (IF we had more than one interface) 
.................... 0x00, //alternate setting 
.................... 2, //number of endpoints, not counting endpoint 0. 
.................... 0xFF, //class code, FF = vendor defined 
.................... 0xFF, //subclass code, FF = vendor 
.................... 0xFF, //protocol code, FF = vendor 
.................... 0x00, //index of string descriptor for interface 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x81, //endpoint number and direction (0x81 = EP1 IN) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_TX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... //endpoint descriptor 
.................... USB_DESC_ENDPOINT_LEN, //length of descriptor 
.................... USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (0x05) 
.................... 0x01, //endpoint number and direction (0x01 = EP1 OUT) 
.................... 0x02, //transfer type supported (0 is control, 1 is iso, 2 is bulk, 3 is interrupt) 
.................... USB_EP1_RX_SIZE,0x00, //maximum packet size supported 
.................... 0x01, //polling interval in ms. (for interrupt transfers ONLY) 
....................  
.................... }; 
....................  
.................... //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
.................... //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
.................... // a specific descriptor in the above table. 
....................  
.................... //NOTE: DO TO A LIMITATION OF THE CCS CODE, ALL HID INTERFACES MUST START AT 0 AND BE SEQUENTIAL 
.................... // FOR EXAMPLE, IF YOU HAVE 2 HID INTERFACES THEY MUST BE INTERFACE 0 AND INTERFACE 1 
.................... #define USB_NUM_HID_INTERFACES 0 
....................  
.................... //the maximum number of interfaces seen on any config 
.................... //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
.................... #define USB_MAX_NUM_INTERFACES 1 
....................  
.................... //define how many interfaces there are per config. [0] is the first config, etc. 
.................... const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={1}; 
....................  
.................... #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
.................... #error USB_TOTAL_CONFIG_LEN not defined correctly 
.................... #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //device descriptor 
.................... char const USB_DEVICE_DESC[] ={ 
.................... USB_DESC_DEVICE_LEN, //the length of this report 
.................... 0x01, //constant DEVICE (0x01) 
.................... 0x10,0x01, //usb version in bcd 
.................... 0x00, //class code (if 0, interface defines class. FF is vendor defined) 
.................... 0x00, //subclass code 
.................... 0x00, //protocol code 
.................... USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) 
.................... 0xD8,0x04, //vendor id (0x04D8 is Microchip) 
.................... 0x0B,0x00, //product id 
.................... 0x01,0x00, //device release number 
.................... 0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below) 
.................... 0x02, //index of string descriptor of the product 
.................... 0x00, //index of string descriptor of serial number 
.................... USB_NUM_CONFIGURATIONS //number of possible configurations 
.................... }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// start string descriptors 
.................... /// String 0 is a special language string, and must be defined. People in U.S.A. can leave this alone. 
.................... /// 
.................... /// You must define the length else get_next_string_character() will not see the string 
.................... /// Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string. 
.................... //offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... const char USB_STRING_DESC_OFFSET[]={0,4,20}; 
....................  
.................... #define USB_STRING_DESC_COUNT sizeof(USB_STRING_DESC_OFFSET) 
....................  
.................... char const USB_STRING_DESC[]={ 
.................... //string 0 Codificacion de la tabla ??? 
.................... 4, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 0x09,0x04, //Microsoft Defined for US-English 
.................... //string 1 --> la compañia del producto ??? 
.................... 16, //length of string index 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
.................... 'j',0, 
.................... 'P',0, 
.................... 'i',0, 
.................... 'c',0, 
.................... 'U',0, 
.................... 's',0, 
.................... 'b',0, 
.................... //string 2 --> nombre del dispositivo 
.................... 34, //length of string index 
.................... //18, 
.................... USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................  
.................... 'L',0, 
.................... 'e',0, 
.................... 'c',0, 
.................... 't',0, 
.................... 'o',0, 
.................... 'r',0, 
.................... ' ',0, 
.................... 'F',0, 
.................... 'L',0, 
.................... 'U',0, 
.................... 'J',0, 
.................... 'O',0, 
.................... ' ',0, 
.................... 'J',0, 
.................... 'P',0, 
.................... '.',0, 
.................... }; 
.................... #ENDIF     
....................  
.................... #include <usb.c> // handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H        //// 
.................... //// for more documentation and a list of examples.                    //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The functions that are meant to be     //// 
.................... //// called by the user (init, put packet, get packet, etc) are        //// 
.................... //// documented in USB.H.                                              //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must must provide the API as described in usb_hw_layer.h.         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// November 13th, 2009:                                              //// 
.................... ////  usb_endpoint_is_valid() has an extra check.                      //// 
.................... ////                                                                   //// 
.................... //// June 9th, 2009:                                                   //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.     //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// Dec 14, 2007:                                                     //// 
.................... ////  usb_kbhit() moved to device driver.                              //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #if defined(__PIC16_USB_H__) 
....................  #include <pic_usb.c> 
.................... #endif 
....................  
.................... #if defined(__PIC18_USB_H__) 
....................  #include <pic18_usb.c> 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  See pic18_usb.h more     //// 
.................... //// documentation about the PIC18 hardware layer.                   //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code.  See USB.H      //// 
.................... //// for more documentation and a list of examples.                  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... //// Nov 13th, 2009:                                                 //// 
.................... ////  usb_disable_endpoint() won't touch BD status registers for     //// 
.................... ////     endpoints that aren't allocated.                            //// 
.................... ////                                                                 //// 
.................... //// June 9th, 2009:                                                 //// 
.................... ////  Some problems with Vista and fast hubs/hosts fixed on PIC18.   //// 
.................... ////                                                                 //// 
.................... //// May 8th, 2009:                                                  //// 
.................... ////  Problems with 18F14K50 fixed.                                  //// 
.................... ////  Added 18F46J50 family.                                         //// 
.................... ////                                                                 //// 
.................... //// March 5th, 2009:                                                //// 
.................... ////   18F14K50 family added.                                        //// 
.................... ////   Cleanup for Wizard.                                           //// 
.................... ////   PIC24 Initial release.                                        //// 
.................... ////                                                                 //// 
.................... //// Nov 3rd, 2008:                                                  //// 
.................... ////  * 4553 family added.                                           //// 
.................... ////                                                                 //// 
.................... //// Dec 18, 2007:                                                   //// 
.................... ////  * usb_kbhit() moved to device driver.                          //// 
.................... ////  * USB Token handler changed to workaround a flaw in the USB    //// 
.................... ////     peripheral to prevent the USB peripheral from               //// 
.................... ////     inadvertantly STALLing the endpoint.  Happened most often   //// 
.................... ////     in bulk demo applications, especially CDC.                  //// 
.................... ////                                                                 //// 
.................... ////   11-6-07:  Fixed a bug where usb_data_buffer[] was reserving   //// 
.................... ////                 too much RAM.                                   //// 
.................... ////             USB_MAX_EP0_PACKET_LENGTH value can be overwritten. ////  
.................... ////                 For the 18F4450/2450 family this should be 8    //// 
.................... ////                 because of limited RAM.  Reducing this value    ////  
.................... ////                 frees RAM for application.                      //// 
.................... ////             Based upon which endpoints have been configured for //// 
.................... ////                 use, will free up unused USB data RAM for       //// 
.................... ////                 application dynamically.  This should free up   //// 
.................... ////                 at least 128 bytes of RAM.                      //// 
.................... ////             CDC now fits on a 18F4450/2450                      //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __PIC18_USB_C__ 
.................... #DEFINE __PIC18_USB_C__ 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's USB driver code                        //// 
.................... ////                                                                   //// 
.................... //// The following USB examples are provided by CCS:                   //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple   //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////   ex_usb_serial.c -                                               //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for     //// 
.................... ////     a virtual COM port.                                           //// 
.................... ////   ex_usb_bootloader.c - CDC/Virtual COM port bootloader.          //// 
.................... ////   ex_usb_loadmouse.c - A conversion of ex_usb_mouse.c that is     //// 
.................... ////        compatible with ex_usb_mouse.c.                            //// 
.................... ////                                                                   //// 
.................... ////        ********************** API *********************           //// 
.................... ////                                                                   //// 
.................... //// These are the functions that are meant to be called by the user:  //// 
.................... ////                                                                   //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and    //// 
.................... ////              attaches the unit to the usb bus.  Enables           //// 
.................... ////              interrupts.  Will wait in an infinite loop until     //// 
.................... ////              the device enumerates - if you are using             //// 
.................... ////              connection sense or if the processor should run      //// 
.................... ////              even if it's not connected to USB then use           //// 
.................... ////              usb_init_cs() instead.                               //// 
.................... ////                                                                   //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit        //// 
.................... ////              to usb bus or enable interrupts.  Since this does    //// 
.................... ////              not attach to the USB, you must periodically call    //// 
.................... ////              usb_task().  See usb_task() for more information.    //// 
.................... ////                                                                   //// 
.................... //// usb_task() - If usb_init_cs() was used to initiate the USB        //// 
.................... ////        peripheral, usb_task() should then be called periodically  //// 
.................... ////        to check the connection sense pin.  If the connection      //// 
.................... ////        sense pin denotes USB is connected and the USB peripheral  //// 
.................... ////        is not attached, this will attach the USB peripheral       //// 
.................... ////        so the PC can start the enumeration process (and it        //// 
.................... ////        will enable interrupts).  If the connection sense pin      //// 
.................... ////        denotes USB is not attached and the USB peripheral is      //// 
.................... ////        running, this will reset the USB peripheral and wait       //// 
.................... ////        for USB to reconnect (and usb_enumerated() will start      //// 
.................... ////        returning FALSE).  If connection sense (USB_CON_SENSE_PIN) //// 
.................... ////        is not defined the usb_task() assumes that USB is always   //// 
.................... ////        connected.                                                 //// 
.................... ////                                                                   //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a      //// 
.................... ////                  USB cable.  A macro that looks at the defined    //// 
.................... ////                  connection sense pin.  If this returns TRUE      //// 
.................... ////                  it does not mean the PC has connected to it,     //// 
.................... ////                  you need to use usb_enumerated() to check this.  //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - Returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral for       //// 
.................... ////                    sending and receiving packets until you        //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_tbe(endpoint) - Returns TRUE if the endpoint transmit buffer  //// 
.................... ////     is free and ready to accept a new packet for transmission.    //// 
.................... ////                                                                   //// 
.................... //// usb_put_packet(endpoint, ptr, len, tgl) - Sends one packet to the //// 
.................... ////                    host.  If you need to send a message that      //// 
.................... ////                    spans more than one packet then use            //// 
.................... ////                    usb_puts().  Fore more detailed documentation  //// 
.................... ////                    see usb_hw_layer.h                             //// 
.................... ////                                                                   //// 
.................... //// usb_puts(endpoint, ptr, len, timeout) - Sends a multiple packet   //// 
.................... ////     message to the host.  If you only need to send one packet,    //// 
.................... ////     it is more effecient to use usb_put_packet().  This is        //// 
.................... ////     documented in more detail above the prototype in USB.H.       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit(endpoint) - Returns true if OUT endpoint contains data  //// 
.................... ////               from host.  This will remain TRUE until             //// 
.................... ////               usb_put_packet() or usb_flush_out() used.           //// 
.................... ////               This function will return an invalid response       //// 
.................... ////               if specified endpoint is not enabled for            //// 
.................... ////               receiving data.                                     //// 
.................... ////                                                                   //// 
.................... //// len = usb_get_packet(endpoint, ptr, max) - Gets one packet that   //// 
.................... ////        from the host/PC.  usb_kbhit() must return TRUE before you //// 
.................... ////        call this routine or your data may not be valid.  This     //// 
.................... ////        only receives one packet, if you are trying to receive a   ////  
.................... ////        multi-packet message use usb_gets().  For more detailed    //// 
.................... ////        documentation see usb_hw_layer.h.                          //// 
.................... ////                                                                   //// 
.................... //// len = usb_gets(endpoint, ptr, max, timeout) - Gets multiple       //// 
.................... ////        packets from the host, you would use this instead          //// 
.................... ////        of usb_get_packet() if you wanted to handle multi-packet   //// 
.................... ////        messages.  This is documented in more detail above the     //// 
.................... ////        prototype in USB.H.                                        //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... ////        ********* DEFINITIONS / CONFIGURATION **********           //// 
.................... ////                                                                   //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (TRUE) - Set to TRUE if your device supports         //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            The hardware level driver (ex          //// 
.................... ////                            pic18_usb.h will define this value if  //// 
.................... ////                            not already overwritten).  Increasing  //// 
.................... ////                            this size will speed up the            //// 
.................... ////                            enumeration process.                   //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// Nov 13th, 2009:                                                   //// 
.................... ////  usb_endpoint_is_valid() prototyped.                              //// 
.................... ////                                                                   //// 
.................... //// March 5th, 2009:                                                  //// 
.................... ////   Cleanup for Wizard.                                             //// 
.................... ////   PIC24 Initial release.                                          //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2009 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... //// CONFIGURATION //////////////////////////////////////////////////////////// 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... //set to false to opt for less RAM, true to opt for less ROM 
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
....................  
.................... ////// USER-LEVEL API ///////////////////////////////////////////////////////// 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: See API section of USB.H for more documentation. 
.................... /***************************************************************/ 
.................... int1 usb_enumerated(void); 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /*          See API section of USB.H for more information. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void); 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /*****************************************************************************/ 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout); 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts() 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before  
.................... /*                   timeout.  set to 0 for no timeout. 
.................... /* 
.................... /* Outputs: Returns TRUE if message sent succesfully, FALSE if it was not 
.................... /*    sent before timeout period expired. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  This 
.................... /*       function can still be used to send messages consiting of only one  
.................... /*       packet.  See usb_put_packet() documentation for the rules about when  
.................... /*       multiple packet messages or 0-lenght packets are needed. 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout); 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable. 
.................... /*          See the API section of USB.H for more documentation. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint); 
....................  
....................  
.................... ////// END USER-LEVEL API ///////////////////////////////////////////////////// 
....................  
....................  
.................... ////// STACK-LEVEL API USED BY HW DRIVERS //////////////////////////////////// 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... typedef struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #else 
.................... typedef struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } TYPE_USB_STACK_STATUS; 
.................... #endif 
....................  
.................... extern TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output:  No output (but many global registers are modified) 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the the setup packet. 
.................... /* 
.................... /* Output: None (many globals are changed) 
.................... /* 
.................... /* Summary: This function is that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration,  
.................... /*          Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[] contains setup data packet, which has the  
.................... /*  following records: 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
.................... /*                                     (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet; 
.................... /*    for host-to-device, this exactly how many bytes in data packet. 
.................... /*    for device-to-host, this is the maximum bytes that can fit one packet. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne() 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data (0..15) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy  
.................... /*          incoming to the pic), but not out setup tokens.  Normally when 
.................... /*          data is received it is left in the buffer (user would use 
.................... /*          usb_kbhit() and usb_get_packet() to receive data), but certain 
.................... /*          libraries (like CDC) have to answer setup packets. 
.................... /*           
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token. 
.................... /* 
.................... /* Summary: This handles an IN packet (HOST <- PIC).  For endpoint 0, this 
.................... /*    is usually to setup a response packet to a setup packet.  Endpoints 1..15 
.................... /*    are generally ignored, and the user has to use usb_tbe() to determine if 
.................... /*    if the buffer is ready for a new transmit packet (there are special cases, 
.................... /*    like CDC which handles the CDC protocl). 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint); 
....................  
.................... ////// END STACK-LEVEL API USED BY HW DRIVERS ///////////////////////////////// 
....................  
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     -1 
.................... #define USB_ENABLE_BULK         USB_ENDPOINT_TYPE_BULK 
.................... #define USB_ENABLE_ISOCHRONOUS  USB_ENDPOINT_TYPE_ISOCHRONOUS 
.................... #define USB_ENABLE_INTERRUPT    USB_ENDPOINT_TYPE_INTERRUPT 
.................... #define USB_ENABLE_CONTROL      USB_ENDPOINT_TYPE_CONTROL 
....................  
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const unsigned int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F24J50") || (getenv("DEVICE")=="PIC18F25J50") || \ 
....................        (getenv("DEVICE")=="PIC18F26J50") || (getenv("DEVICE")=="PIC18F44J50") || \ 
....................        (getenv("DEVICE")=="PIC18F45J50") || (getenv("DEVICE")=="PIC18F46J50")) 
....................  #define __USB_46J50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)getenv("RAM")-0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F13K50") || (getenv("DEVICE")=="PIC18F14K50")) 
....................  #define __USB_K50__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x100) 
....................  #define USB_RAM_START  0x200 
....................  #define USB_NUM_UEP 8 
....................  //technically this device supports 8 endpoints, but for RAM reasons you should 
....................  //attempt to only use the first 3 endpoints. 
....................  #define USB_LAST_ALLOWED_ENDPOINT  3 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550") || \ 
....................        (getenv("DEVICE")=="PIC18F2458") || (getenv("DEVICE")=="PIC18F2553") || \ 
....................        (getenv("DEVICE")=="PIC18F4458") || (getenv("DEVICE")=="PIC18F4553") \ 
....................        ) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_RAM_SPACE  ((int16)0x400) 
....................  #define USB_RAM_START  0x400 
....................  #define USB_NUM_UEP 16 
....................  #define USB_LAST_ALLOWED_ENDPOINT  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #if USB_EP15_TX_SIZE || USB_EP15_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  15 
.................... #elif USB_EP14_TX_SIZE || USB_EP14_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  14 
.................... #elif USB_EP13_TX_SIZE || USB_EP13_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  13 
.................... #elif USB_EP12_TX_SIZE || USB_EP12_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  12 
.................... #elif USB_EP11_TX_SIZE || USB_EP11_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  11 
.................... #elif USB_EP10_TX_SIZE || USB_EP10_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  10 
.................... #elif USB_EP9_TX_SIZE || USB_EP9_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  9 
.................... #elif USB_EP8_TX_SIZE || USB_EP8_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  8 
.................... #elif USB_EP7_TX_SIZE || USB_EP7_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  7 
.................... #elif USB_EP6_TX_SIZE || USB_EP6_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  6 
.................... #elif USB_EP5_TX_SIZE || USB_EP5_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  5 
.................... #elif USB_EP4_TX_SIZE || USB_EP4_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  4 
.................... #elif USB_EP3_TX_SIZE || USB_EP3_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  3 
.................... #elif USB_EP2_TX_SIZE || USB_EP2_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  2 
.................... #elif USB_EP1_TX_SIZE || USB_EP1_RX_SIZE 
....................  #define USB_LAST_DEFINED_ENDPOINT  1 
.................... #else 
....................  #define USB_LAST_DEFINED_ENDPOINT  0 
.................... #endif 
....................  
.................... #define USB_CONTROL_REGISTER_SIZE   ((USB_LAST_DEFINED_ENDPOINT+1)*8) 
....................  
.................... #define USB_DATA_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+\ 
....................                            USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+\ 
....................                            USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+\ 
....................                            USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+\ 
....................                            USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+\ 
....................                            USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+\ 
....................                            USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+\ 
....................                            USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+\ 
....................                            USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+\ 
....................                            USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+\ 
....................                            USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if ((USB_DATA_BUFFER_NEEDED+USB_CONTROL_REGISTER_SIZE) > USB_TOTAL_RAM_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if (USB_LAST_DEFINED_ENDPOINT > USB_LAST_ALLOWED_ENDPOINT) 
....................  #error You are trying ot use an invalid endpoint for this hardware! 
.................... #endif 
....................  
.................... #define USB_DATA_BUFFER_LOCATION ((int16)USB_RAM_START+USB_CONTROL_REGISTER_SIZE) 
....................  
.................... typedef struct 
.................... { 
....................    int8 stat; 
....................    int8 cnt; 
....................    int16 addr; 
.................... } STRUCT_BD; 
....................  
.................... struct 
.................... { 
....................    struct 
....................    { 
....................       STRUCT_BD out;    //pc -> pic 
....................       STRUCT_BD in;     //pc <- pic 
....................    } bd[USB_LAST_DEFINED_ENDPOINT+1]; 
....................    union 
....................    { 
....................       struct 
....................       { 
....................          int8 ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................          int8 ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
....................           
....................          //these buffer definitions needed for CDC library 
....................         #if USB_EP1_RX_SIZE 
....................          int8 ep1_rx_buffer[USB_EP1_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP1_TX_SIZE 
....................          int8 ep1_tx_buffer[USB_EP1_TX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_RX_SIZE 
....................          int8 ep2_rx_buffer[USB_EP2_RX_SIZE]; 
....................         #endif 
....................         #if USB_EP2_TX_SIZE 
....................          int8 ep2_tx_buffer[USB_EP2_TX_SIZE]; 
....................         #endif 
....................       }; 
....................       int8 general[USB_DATA_BUFFER_NEEDED]; 
....................    } buffer; 
.................... } g_USBRAM; 
.................... #locate g_USBRAM=USB_RAM_START 
....................  
.................... #define usb_ep0_rx_buffer g_USBRAM.buffer.ep0_rx_buffer 
.................... #define usb_ep0_tx_buffer g_USBRAM.buffer.ep0_tx_buffer 
....................  
.................... //these buffer definitions needed for CDC library 
.................... #define usb_ep1_rx_buffer g_USBRAM.buffer.ep1_rx_buffer 
.................... #define usb_ep1_tx_buffer g_USBRAM.buffer.ep1_tx_buffer 
.................... #define usb_ep2_rx_buffer g_USBRAM.buffer.ep2_rx_buffer 
.................... #define usb_ep2_tx_buffer g_USBRAM.buffer.ep2_tx_buffer 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... #define debug_putc(c) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #if !defined(USB_USE_ERROR_COUNTER) 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #if !defined(USB_PING_PONG_MODE) 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte U1STAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #elif defined(__USB_46J50__) 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF36 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF37 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF38 
....................    #byte UCFG    =  0xF39 
....................    #define  UEP0_LOC 0xF26 
.................... #elif defined(__USB_K50__) 
....................    #byte UFRML   =  0xF5D 
....................    #byte UFRMH   =  0xF5E 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF60 
....................    #byte UEIR    =  0xF5F 
....................    #byte UEIE    =  0xF5B 
....................    #byte U1STAT   =  0xF63 
....................    #byte UCON    =  0xF64 
....................    #byte UADDR   =  0xF5C 
....................    #byte UCFG    =  0xF61 
....................    #define  UEP0_LOC 0xF53 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte U1STAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... int8 USTATCopy; 
....................  
.................... int8 g_UEP[USB_NUM_UEP]; 
.................... #locate g_UEP=UEP0_LOC 
.................... #define UEP(x) g_UEP[x] 
....................  
.................... #define BIT_SOF   6 
.................... #define BIT_STALL 5 
.................... #define BIT_IDLE  4 
.................... #define BIT_TRN   3 
.................... #define BIT_ACTV  2 
.................... #define BIT_UERR  1 
.................... #define BIT_URST  0 
....................  
.................... #BIT UIR_SOF = UIR.BIT_SOF 
.................... #BIT UIR_STALL = UIR.BIT_STALL 
.................... #BIT UIR_IDLE = UIR.BIT_IDLE 
.................... #BIT UIR_TRN = UIR.BIT_TRN 
.................... #BIT UIR_ACTV = UIR.BIT_ACTV 
.................... #BIT UIR_UERR = UIR.BIT_UERR 
.................... #BIT UIR_URST = UIR.BIT_URST 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    g_USBRAM.bd[x].out.stat 
....................  #define EP_BDxCNT_O(x)   g_USBRAM.bd[x].out.cnt 
....................  #define EP_BDxADR_O(x)   g_USBRAM.bd[x].out.addr 
....................  #define EP_BDxST_I(x)    g_USBRAM.bd[x].in.stat 
....................  #define EP_BDxCNT_I(x)   g_USBRAM.bd[x].in.cnt 
....................  #define EP_BDxADR_I(x)   g_USBRAM.bd[x].in.addr 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_ERROR|__USB_UIF_RESET 
.................... #else 
....................  #define STANDARD_INTS __USB_UIF_STALL|__USB_UIF_IDLE|__USB_UIF_TOKEN|__USB_UIF_ACTIVE|__USB_UIF_RESET 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #if !defined(__USB_K50__) 
....................  #define __USB_UCFG_UTRDIS  0x08 
.................... #endif 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if defined(USB_EXTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  0 
.................... #endif 
....................  
.................... #if defined(USB_INTERNAL_PULLUPS) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if !defined(__USB_UCFG_MY_UPUEN) 
....................  #define __USB_UCFG_MY_UPUEN  __USB_UCFG_UPUEN 
.................... #endif 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_MY_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #if defined(__USB_UCFG_UTRDIS) 
....................  #define __UCFG_VAL_DISABLED__    __USB_UCFG_UTRDIS 
.................... #else 
....................  #define __UCFG_VAL_DISABLED__   0 
.................... #endif 
....................  
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... // see usb_hw_layer.h for more documentation 
.................... int1 usb_kbhit(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_O(en),7))); 
*
1638:  CLRF   03
163A:  MOVF   xFB,W
163C:  ADDLW  70
163E:  MOVWF  FE9
1640:  MOVLW  0F
1642:  ADDWFC 03,W
1644:  MOVWF  FEA
1646:  MOVF   FEF,F
1648:  BZ    1664
164A:  MOVF   xFB,W
164C:  MULLW  08
164E:  MOVF   FF3,W
1650:  CLRF   xFD
1652:  MOVWF  xFC
1654:  MOVWF  FE9
1656:  MOVLW  04
1658:  ADDWF  xFD,W
165A:  MOVWF  FEA
165C:  MOVFF  FEF,FE
1660:  BTFSS  xFE.7
1662:  BRA    1668
1664:  MOVLW  00
1666:  BRA    166A
1668:  MOVLW  01
166A:  MOVWF  01
166C:  GOTO   1D30 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_tbe(int8 en) 
.................... { 
....................    return((UEP(en)!=ENDPT_DISABLED)&&(!bit_test(EP_BDxST_I(en),7))); 
*
09F6:  CLRF   03
09F8:  MOVLB  1
09FA:  MOVF   x1E,W
09FC:  ADDLW  70
09FE:  MOVWF  FE9
0A00:  MOVLW  0F
0A02:  ADDWFC 03,W
0A04:  MOVWF  FEA
0A06:  MOVF   FEF,F
0A08:  BZ    0A2E
0A0A:  MOVF   x1E,W
0A0C:  MULLW  08
0A0E:  MOVF   FF3,W
0A10:  CLRF   x20
0A12:  MOVWF  x1F
0A14:  MOVLW  04
0A16:  ADDWF  x1F,F
0A18:  MOVLW  00
0A1A:  ADDWFC x20,F
0A1C:  MOVFF  11F,FE9
0A20:  MOVLW  04
0A22:  ADDWF  x20,W
0A24:  MOVWF  FEA
0A26:  MOVFF  FEF,121
0A2A:  BTFSS  x21.7
0A2C:  BRA    0A32
0A2E:  MOVLW  00
0A30:  BRA    0A34
0A32:  MOVLW  01
0A34:  MOVWF  01
0A36:  MOVLB  0
0A38:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_detach(void) 
.................... { 
....................    UCON = 0;  //disable USB hardware 
*
1462:  CLRF   F6D
....................    UIE = 0;   //disable USB interrupts 
1464:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
1466:  MOVLW  08
1468:  MOVWF  F6F
....................     
....................    // set D+/D- to inputs 
....................   #if defined(__USB_87J50__) 
....................    set_tris_f(get_tris_f() | 0x18); 
....................   #elif defined(__USB_K50__) 
....................    set_tris_a(get_tris_a() | 0x3); 
....................   #else 
....................    set_tris_c(get_tris_c() | 0x30); 
146A:  MOVF   F94,W
146C:  IORLW  30
146E:  MOVWF  F94
....................   #endif 
....................    
....................    usb_state = USB_STATE_DETACHED; 
1470:  CLRF   1D
1472:  CLRF   16
1474:  BTFSC  FF2.7
1476:  BSF    16.7
1478:  BCF    FF2.7
....................     
....................    usb_token_reset();              //clear the chapter9 stack 
147A:  CALL   02E8
147E:  BTFSC  16.7
1480:  BSF    FF2.7
1482:  GOTO   1488 (RETURN)
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_attach(void)  
*
148C:  CLRF   16
148E:  BTFSC  FF2.7
1490:  BSF    16.7
1492:  BCF    FF2.7
.................... { 
....................    usb_token_reset(); 
1494:  CALL   02E8
1498:  BTFSC  16.7
149A:  BSF    FF2.7
....................    UCON = 0; 
149C:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
149E:  MOVLW  14
14A0:  MOVWF  F6F
....................    UIE = 0;                                // Mask all USB interrupts 
14A2:  CLRF   F69
....................    UCON_USBEN = 1;                     // Enable module & attach to bus 
14A4:  BSF    F6D.3
....................    usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
14A6:  MOVLW  01
14A8:  MOVWF  1D
14AA:  GOTO   14B4 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init_cs(void) 
.................... { 
....................    usb_detach(); 
*
1486:  BRA    1462
1488:  GOTO   14D2 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_task(void)  
.................... { 
....................    if (usb_attached())  
....................    { 
....................       if (UCON_USBEN==0)  
*
14AE:  BTFSC  F6D.3
14B0:  BRA    14B4
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
14B2:  BRA    148C
....................       } 
....................    } 
....................    else  
....................    { 
....................       if (UCON_USBEN==1)   
....................       { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0))  
14B4:  DECFSZ 1D,W
14B6:  BRA    14CE
14B8:  BTFSC  F6D.5
14BA:  BRA    14CE
....................    { 
....................       UIR=0; 
14BC:  CLRF   F68
....................       UIE=0; 
14BE:  CLRF   F69
....................       enable_interrupts(INT_USB); 
14C0:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
14C2:  MOVLW  C0
14C4:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB ISR 
14C6:  MOVLW  11
14C8:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
14CA:  MOVLW  02
14CC:  MOVWF  1D
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
14CE:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_init(void)  
.................... { 
....................    usb_init_cs(); 
14D0:  BRA    1486
....................  
....................    do  
....................    { 
....................       usb_task(); 
14D2:  RCALL  14AE
....................    } while (usb_state != USB_STATE_POWERED); 
14D4:  MOVF   1D,W
14D6:  SUBLW  02
14D8:  BNZ   14D2
14DA:  GOTO   1A82 (RETURN)
.................... } 
....................  
....................  
.................... // see pic18_usb.h for documentation 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    if (usb_tbe(endpoint))  
*
0A3A:  MOVFF  119,11E
0A3E:  RCALL  09F6
0A40:  MOVF   01,F
0A42:  BZ    0B0E
....................    { 
....................       EP_BDxCNT_I(endpoint)=len; 
0A44:  MOVLB  1
0A46:  MOVF   x19,W
0A48:  MULLW  08
0A4A:  MOVF   FF3,W
0A4C:  CLRF   x1F
0A4E:  MOVWF  x1E
0A50:  MOVLW  04
0A52:  ADDWF  x1E,F
0A54:  MOVLW  00
0A56:  ADDWFC x1F,F
0A58:  MOVLW  01
0A5A:  ADDWF  x1E,W
0A5C:  MOVWF  01
0A5E:  MOVLW  00
0A60:  ADDWFC x1F,W
0A62:  MOVWF  03
0A64:  MOVFF  01,FE9
0A68:  MOVLW  04
0A6A:  ADDWF  03,W
0A6C:  MOVWF  FEA
0A6E:  MOVFF  11A,FEF
....................  
....................       debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE)  
0A72:  MOVF   x1C,W
0A74:  SUBLW  02
0A76:  BNZ   0AA6
....................       { 
....................          i = EP_BDxST_I(endpoint); 
0A78:  MOVF   x19,W
0A7A:  MULLW  08
0A7C:  MOVF   FF3,W
0A7E:  CLRF   x1F
0A80:  MOVWF  x1E
0A82:  MOVLW  04
0A84:  ADDWF  x1E,F
0A86:  MOVLW  00
0A88:  ADDWFC x1F,F
0A8A:  MOVFF  11E,FE9
0A8E:  MOVLW  04
0A90:  ADDWF  x1F,W
0A92:  MOVWF  FEA
0A94:  MOVFF  FEF,11D
....................          if (bit_test(i,6)) 
0A98:  BTFSS  x1D.6
0A9A:  BRA    0AA0
....................             tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0A9C:  CLRF   x1C
0A9E:  BRA    0AA4
....................          else 
....................             tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
0AA0:  MOVLW  01
0AA2:  MOVWF  x1C
....................       } 
0AA4:  BRA    0ACC
....................       else if (tgl == USB_DTS_USERX)  
0AA6:  MOVF   x1C,W
0AA8:  SUBLW  04
0AAA:  BNZ   0ACC
....................       { 
....................          i = EP_BDxST_O(endpoint); 
0AAC:  MOVF   x19,W
0AAE:  MULLW  08
0AB0:  MOVF   FF3,W
0AB2:  CLRF   x1F
0AB4:  MOVWF  FE9
0AB6:  MOVLW  04
0AB8:  ADDWF  x1F,W
0ABA:  MOVWF  FEA
0ABC:  MOVFF  FEF,11D
....................          if (bit_test(i,6)) 
0AC0:  BTFSS  x1D.6
0AC2:  BRA    0ACA
....................             tgl = USB_DTS_DATA1; 
0AC4:  MOVLW  01
0AC6:  MOVWF  x1C
0AC8:  BRA    0ACC
....................          else 
....................             tgl = USB_DTS_DATA0; 
0ACA:  CLRF   x1C
....................       } 
....................       if (tgl == USB_DTS_DATA1)  
0ACC:  DECFSZ x1C,W
0ACE:  BRA    0AD6
....................          i=0xC8;  //DATA1, UOWN 
0AD0:  MOVLW  C8
0AD2:  MOVWF  x1D
0AD4:  BRA    0ADA
....................       else //if (tgl == USB_DTS_DATA0)  
....................          i=0x88; //DATA0, UOWN 
0AD6:  MOVLW  88
0AD8:  MOVWF  x1D
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
0ADA:  BTFSS  x1B.0
0ADC:  BRA    0AE0
0ADE:  BSF    x1D.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
0AE0:  BTFSS  x1B.1
0AE2:  BRA    0AE6
0AE4:  BSF    x1D.1
....................  
....................       debug_usb(debug_putc, " %X", i); 
....................  
....................       EP_BDxST_I(endpoint) = i;//save changes 
0AE6:  MOVF   x19,W
0AE8:  MULLW  08
0AEA:  MOVF   FF3,W
0AEC:  CLRF   x1F
0AEE:  MOVWF  x1E
0AF0:  MOVLW  04
0AF2:  ADDWF  x1E,F
0AF4:  MOVLW  00
0AF6:  ADDWFC x1F,F
0AF8:  MOVFF  11E,FE9
0AFC:  MOVLW  04
0AFE:  ADDWF  x1F,W
0B00:  MOVWF  FEA
0B02:  MOVFF  11D,FEF
....................        
....................       //putc('!'); 
....................        
....................       return(1); 
0B06:  MOVLW  01
0B08:  MOVWF  01
0B0A:  BRA    0B14
....................    } 
0B0C:  MOVLB  0
....................    else  
....................    { 
....................       //putc('_'); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................    return(0); 
0B0E:  MOVLW  00
0B10:  MOVWF  01
0B12:  MOVLB  1
0B14:  MOVLB  0
0B16:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl)  
*
18DC:  CLRF   16
18DE:  BTFSC  FF2.7
18E0:  BSF    16.7
18E2:  BCF    FF2.7
.................... { 
....................    int8 * buff_add;     
....................  
....................    if (usb_tbe(endpoint))  
18E4:  MOVFF  FB,11E
18E8:  CALL   09F6
18EC:  BTFSC  16.7
18EE:  BSF    FF2.7
18F0:  MOVF   01,F
18F2:  BZ    197E
....................    { 
....................       buff_add = EP_BDxADR_I(endpoint); 
18F4:  MOVF   xFB,W
18F6:  MULLW  08
18F8:  MOVF   FF3,W
18FA:  MOVLB  1
18FC:  CLRF   x04
18FE:  MOVWF  x03
1900:  MOVLW  04
1902:  ADDWF  x03,F
1904:  MOVLW  00
1906:  ADDWFC x04,F
1908:  MOVLW  02
190A:  ADDWF  x03,W
190C:  MOVWF  01
190E:  MOVLW  00
1910:  ADDWFC x04,W
1912:  MOVWF  03
1914:  MOVFF  01,FE9
1918:  MOVLW  04
191A:  ADDWF  03,W
191C:  MOVWF  FEA
191E:  MOVFF  FEC,102
1922:  MOVF   FED,F
1924:  MOVFF  FEF,101
....................       memcpy(buff_add, ptr, len);      
1928:  MOVFF  102,FEA
192C:  MOVFF  101,FE9
1930:  MOVFF  FD,FE2
1934:  MOVFF  FC,FE1
1938:  MOVFF  FF,02
193C:  MOVFF  FE,01
1940:  MOVF   01,F
1942:  BZ    1948
1944:  INCF   02,F
1946:  BRA    194C
1948:  MOVF   02,F
194A:  BZ    1958
194C:  MOVFF  FE6,FEE
1950:  DECFSZ 01,F
1952:  BRA    194C
1954:  DECFSZ 02,F
1956:  BRA    194C
1958:  CLRF   16
195A:  BTFSC  FF2.7
195C:  BSF    16.7
195E:  BCF    FF2.7
....................        
....................       return(usb_flush_in(endpoint, len, tgl)); 
1960:  MOVFF  FB,119
1964:  MOVFF  FF,11B
1968:  MOVFF  FE,11A
196C:  MOVFF  100,11C
1970:  MOVLB  0
1972:  CALL   0A3A
1976:  BTFSC  16.7
1978:  BSF    FF2.7
197A:  MOVF   01,W
197C:  BRA    1982
....................    } 
....................    else  
....................    { 
....................       //putc('-'); 
....................       //printf("%X", EP_BDxST_I(endpoint)); 
....................       debug_usb(debug_putc,"\r\nPUT ERR"); 
....................    } 
....................  
....................    return(0); 
197E:  MOVLW  00
1980:  MOVWF  01
1982:  GOTO   1E2C (RETURN)
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl)  
.................... { 
....................    int8 i; 
....................    int16 len; 
....................  
....................   #if USB_IGNORE_RX_DTS 
....................    if (tgl == USB_DTS_STALL)  
....................    { 
....................       debug_usb(debug_putc, '*'); 
....................       EP_BDxCNT_O(endpoint) = 0x84; 
....................       EP_BDxST_I(endpoint) = 0x84; 
....................       return; 
....................    } 
....................    else 
....................       i=0x80; 
....................   #else 
....................    i = EP_BDxST_O(endpoint); 
*
0928:  MOVLB  1
092A:  MOVF   x19,W
092C:  MULLW  08
092E:  MOVF   FF3,W
0930:  CLRF   x1F
0932:  MOVWF  FE9
0934:  MOVLW  04
0936:  ADDWF  x1F,W
0938:  MOVWF  FEA
093A:  MOVFF  FEF,11B
....................    if (tgl == USB_DTS_TOGGLE)  
093E:  MOVF   x1A,W
0940:  SUBLW  02
0942:  BNZ   0950
....................    { 
....................       if (bit_test(i,6)) 
0944:  BTFSS  x1B.6
0946:  BRA    094C
....................          tgl = USB_DTS_DATA0;  //was DATA1, goto DATA0 
0948:  CLRF   x1A
094A:  BRA    0950
....................       else 
....................          tgl = USB_DTS_DATA1;  //was DATA0, goto DATA1 
094C:  MOVLW  01
094E:  MOVWF  x1A
....................    } 
....................    if (tgl == USB_DTS_STALL)  
0950:  MOVF   x1A,W
0952:  SUBLW  03
0954:  BNZ   097C
....................    { 
....................       i = 0x84; 
0956:  MOVLW  84
0958:  MOVWF  x1B
....................       EP_BDxST_I(endpoint) = 0x84; //stall both in and out endpoints 
095A:  MOVF   x19,W
095C:  MULLW  08
095E:  MOVF   FF3,W
0960:  CLRF   x1F
0962:  MOVWF  x1E
0964:  MOVLW  04
0966:  ADDWF  x1E,F
0968:  MOVLW  00
096A:  ADDWFC x1F,F
096C:  MOVFF  11E,FE9
0970:  MOVLW  04
0972:  ADDWF  x1F,W
0974:  MOVWF  FEA
0976:  MOVLW  84
0978:  MOVWF  FEF
....................    } 
097A:  BRA    098A
....................    else if (tgl == USB_DTS_DATA1) 
097C:  DECFSZ x1A,W
097E:  BRA    0986
....................       i = 0xC8;  //DATA1, UOWN 
0980:  MOVLW  C8
0982:  MOVWF  x1B
0984:  BRA    098A
....................    else //if (tgl == USB_DTS_DATA0)  
....................       i = 0x88; //DATA0, UOWN 
0986:  MOVLW  88
0988:  MOVWF  x1B
....................   #endif 
....................  
....................    //bit_clear(__usb_kbhit_status,endpoint); 
....................  
....................    len = usb_ep_rx_size[endpoint]; 
098A:  BCF    FD8.0
098C:  RLCF   x19,W
098E:  CLRF   03
0990:  MOVFF  FF2,11E
0994:  BCF    FF2.7
0996:  MOVLB  0
0998:  CALL   00CE
099C:  TBLRD*+
099E:  MOVFF  FF5,03
09A2:  MOVLB  1
09A4:  BTFSC  x1E.7
09A6:  BSF    FF2.7
09A8:  MOVWF  x1C
09AA:  MOVFF  03,11D
....................    EP_BDxCNT_O(endpoint) = len; 
09AE:  MOVF   x19,W
09B0:  MULLW  08
09B2:  MOVF   FF3,W
09B4:  CLRF   x1F
09B6:  MOVWF  x1E
09B8:  MOVLW  01
09BA:  ADDWF  x1E,W
09BC:  MOVWF  01
09BE:  MOVLW  00
09C0:  ADDWFC x1F,W
09C2:  MOVWF  03
09C4:  MOVFF  01,FE9
09C8:  MOVLW  04
09CA:  ADDWF  03,W
09CC:  MOVWF  FEA
09CE:  MOVFF  11C,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
09D2:  BTFSS  x1D.0
09D4:  BRA    09D8
09D6:  BSF    x1B.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
09D8:  BTFSS  x1D.1
09DA:  BRA    09DE
09DC:  BSF    x1B.1
....................  
....................    EP_BDxST_O(endpoint) = i; 
09DE:  MOVF   x19,W
09E0:  MULLW  08
09E2:  MOVF   FF3,W
09E4:  CLRF   x1F
09E6:  MOVWF  FE9
09E8:  MOVLW  04
09EA:  ADDWF  x1F,W
09EC:  MOVWF  FEA
09EE:  MOVFF  11B,FEF
09F2:  MOVLB  0
09F4:  RETURN 0
.................... } 
....................  
.................... // see pic18_usb.h for documentation 
.................... int16 usb_rx_packet_size(int8 endpoint)  
.................... { 
....................    return(EP_BDxCNT_O(endpoint)); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB. 
....................  
.................... /***************************************************************************** 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC  
.................... /*          RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /*****************************************************************************/ 
.................... static int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max)  
.................... { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al = EP_BDxADR_O(endpoint); 
*
1670:  MOVLB  1
1672:  MOVF   x00,W
1674:  MULLW  08
1676:  MOVF   FF3,W
1678:  CLRF   x0B
167A:  MOVWF  x0A
167C:  MOVLW  02
167E:  ADDWF  x0A,W
1680:  MOVWF  01
1682:  MOVLW  00
1684:  ADDWFC x0B,W
1686:  MOVWF  03
1688:  MOVFF  01,FE9
168C:  MOVLW  04
168E:  ADDWF  03,W
1690:  MOVWF  FEA
1692:  MOVFF  FEC,106
1696:  MOVF   FED,F
1698:  MOVFF  FEF,105
....................    i = EP_BDxCNT_O(endpoint); 
169C:  MOVF   x00,W
169E:  MULLW  08
16A0:  MOVF   FF3,W
16A2:  CLRF   x0B
16A4:  MOVWF  x0A
16A6:  MOVLW  01
16A8:  ADDWF  x0A,W
16AA:  MOVWF  01
16AC:  MOVLW  00
16AE:  ADDWFC x0B,W
16B0:  MOVWF  03
16B2:  MOVFF  01,FE9
16B6:  MOVLW  04
16B8:  ADDWF  03,W
16BA:  MOVWF  FEA
16BC:  CLRF   x09
16BE:  MOVFF  FEF,108
....................    st = EP_BDxST_O(endpoint); 
16C2:  MOVF   x00,W
16C4:  MULLW  08
16C6:  MOVF   FF3,W
16C8:  CLRF   x0B
16CA:  MOVWF  FE9
16CC:  MOVLW  04
16CE:  ADDWF  x0B,W
16D0:  MOVWF  FEA
16D2:  MOVFF  FEF,107
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
16D6:  BTFSS  x07.0
16D8:  BRA    16DC
16DA:  BSF    x09.0
....................    if (bit_test(st,1)) {bit_set(i,9);} 
16DC:  BTFSS  x07.1
16DE:  BRA    16E2
16E0:  BSF    x09.1
....................  
....................    if (i < max) {max = i;} 
16E2:  MOVF   x09,W
16E4:  SUBWF  x04,W
16E6:  BNC   16F8
16E8:  BNZ   16F0
16EA:  MOVF   x03,W
16EC:  SUBWF  x08,W
16EE:  BC    16F8
16F0:  MOVFF  109,104
16F4:  MOVFF  108,103
....................     
....................    memcpy(ptr, al ,max); 
16F8:  MOVFF  102,FEA
16FC:  MOVFF  101,FE9
1700:  MOVFF  106,FE2
1704:  MOVFF  105,FE1
1708:  MOVFF  104,02
170C:  MOVFF  103,01
1710:  MOVF   01,F
1712:  BZ    1718
1714:  INCF   02,F
1716:  BRA    171C
1718:  MOVF   02,F
171A:  BZ    1728
171C:  MOVFF  FE6,FEE
1720:  DECFSZ 01,F
1722:  BRA    171C
1724:  DECFSZ 02,F
1726:  BRA    171C
....................  
....................    return(max); 
1728:  MOVFF  103,01
172C:  MOVFF  104,02
1730:  MOVLB  0
1732:  GOTO   174C (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... unsigned int16 usb_get_packet(int8 endpoint, int8 * ptr, unsigned int16 max) 
.................... { 
....................    max = usb_get_packet_buffer(endpoint, ptr, max); 
1736:  MOVFF  FB,100
173A:  MOVFF  FD,102
173E:  MOVFF  FC,101
1742:  MOVFF  FF,104
1746:  MOVFF  FE,103
174A:  BRA    1670
174C:  MOVFF  02,FF
1750:  MOVFF  01,FE
1754:  CLRF   16
1756:  BTFSC  FF2.7
1758:  BSF    16.7
175A:  BCF    FF2.7
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
175C:  MOVFF  FB,119
1760:  MOVLW  02
1762:  MOVLB  1
1764:  MOVWF  x1A
1766:  MOVLB  0
1768:  CALL   0928
176C:  BTFSC  16.7
176E:  BSF    FF2.7
....................  
....................    return(max); 
1770:  MOVFF  FE,01
1774:  MOVFF  FF,02
1778:  GOTO   1D46 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_stall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07F0:  MOVLB  1
07F2:  BCF    x1A.0
07F4:  BTFSC  x19.7
07F6:  BSF    x1A.0
....................    endpoint &= 0x7F; 
07F8:  BCF    x19.7
....................     
....................    if (direction)  
07FA:  BTFSS  x1A.0
07FC:  BRA    0820
....................    { 
....................       EP_BDxST_I(endpoint) = 0x84; 
07FE:  MOVF   x19,W
0800:  MULLW  08
0802:  MOVF   FF3,W
0804:  CLRF   x1C
0806:  MOVWF  x1B
0808:  MOVLW  04
080A:  ADDWF  x1B,F
080C:  MOVLW  00
080E:  ADDWFC x1C,F
0810:  MOVFF  11B,FE9
0814:  MOVLW  04
0816:  ADDWF  x1C,W
0818:  MOVWF  FEA
081A:  MOVLW  84
081C:  MOVWF  FEF
....................    } 
081E:  BRA    0834
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x84; 
0820:  MOVF   x19,W
0822:  MULLW  08
0824:  MOVF   FF3,W
0826:  CLRF   x1C
0828:  MOVWF  FE9
082A:  MOVLW  04
082C:  ADDWF  x1C,W
082E:  MOVWF  FEA
0830:  MOVLW  84
0832:  MOVWF  FEF
....................    } 
0834:  MOVLB  0
0836:  GOTO   08C8 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_unstall_ep(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
07A8:  MOVLB  1
07AA:  BCF    x1A.0
07AC:  BTFSC  x19.7
07AE:  BSF    x1A.0
....................    endpoint &= 0x7F; 
07B0:  BCF    x19.7
....................     
....................    if (direction)  
07B2:  BTFSS  x1A.0
07B4:  BRA    07D8
....................    { 
....................      #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint) = 0x80; 
....................      #else 
....................       EP_BDxST_I(endpoint) = 0x88; 
07B6:  MOVF   x19,W
07B8:  MULLW  08
07BA:  MOVF   FF3,W
07BC:  CLRF   x1C
07BE:  MOVWF  x1B
07C0:  MOVLW  04
07C2:  ADDWF  x1B,F
07C4:  MOVLW  00
07C6:  ADDWFC x1C,F
07C8:  MOVFF  11B,FE9
07CC:  MOVLW  04
07CE:  ADDWF  x1C,W
07D0:  MOVWF  FEA
07D2:  MOVLW  88
07D4:  MOVWF  FEF
....................      #endif 
....................    } 
07D6:  BRA    07EA
....................    else  
....................    { 
....................       EP_BDxST_O(endpoint) = 0x00; 
07D8:  MOVF   x19,W
07DA:  MULLW  08
07DC:  MOVF   FF3,W
07DE:  CLRF   x1C
07E0:  MOVWF  FE9
07E2:  MOVLW  04
07E4:  ADDWF  x1C,W
07E6:  MOVWF  FEA
07E8:  CLRF   FEF
....................    } 
07EA:  MOVLB  0
07EC:  GOTO   08B8 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... int1 usb_endpoint_stalled(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................    int8 st; 
....................     
....................    direction = bit_test(endpoint,7); 
*
083A:  MOVLB  1
083C:  BCF    x1A.0
083E:  BTFSC  x19.7
0840:  BSF    x1A.0
....................    endpoint &= 0x7F; 
0842:  BCF    x19.7
....................     
....................    if (direction)  
0844:  BTFSS  x1A.0
0846:  BRA    086A
....................    { 
....................       st=EP_BDxST_I(endpoint); 
0848:  MOVF   x19,W
084A:  MULLW  08
084C:  MOVF   FF3,W
084E:  CLRF   x1D
0850:  MOVWF  x1C
0852:  MOVLW  04
0854:  ADDWF  x1C,F
0856:  MOVLW  00
0858:  ADDWFC x1D,F
085A:  MOVFF  11C,FE9
085E:  MOVLW  04
0860:  ADDWF  x1D,W
0862:  MOVWF  FEA
0864:  MOVFF  FEF,11B
....................    } 
0868:  BRA    087E
....................    else  
....................    { 
....................       st=EP_BDxST_O(endpoint); 
086A:  MOVF   x19,W
086C:  MULLW  08
086E:  MOVF   FF3,W
0870:  CLRF   x1D
0872:  MOVWF  FE9
0874:  MOVLW  04
0876:  ADDWF  x1D,W
0878:  MOVWF  FEA
087A:  MOVFF  FEF,11B
....................    } 
....................     
....................    return(bit_test(st,7) && bit_test(st,2)); 
087E:  BTFSS  x1B.7
0880:  BRA    0886
0882:  BTFSC  x1B.2
0884:  BRA    088A
0886:  MOVLW  00
0888:  BRA    088C
088A:  MOVLW  01
088C:  MOVWF  01
088E:  MOVLB  0
0890:  GOTO   08E0 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_address(int8 address)  
.................... { 
....................    UADDR = address; 
*
0B22:  MOVFF  11A,F6E
....................     
....................    if (address)  
0B26:  MOVLB  1
0B28:  MOVF   x1A,F
0B2A:  BZ    0B32
....................    { 
....................       usb_state = USB_STATE_ADDRESS; 
0B2C:  MOVLW  04
0B2E:  MOVWF  1D
....................    } 
0B30:  BRA    0B36
....................    else  
....................    { 
....................       usb_state = USB_STATE_POWERED; 
0B32:  MOVLW  02
0B34:  MOVWF  1D
....................    } 
0B36:  MOVLB  0
0B38:  GOTO   0B46 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_set_configured(int8 config)  
.................... { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................     
....................    if (config == 0) 
*
046A:  MOVLB  1
046C:  MOVF   x19,F
046E:  BNZ   047C
....................    { 
....................       // if config=0 then set addressed state 
....................       usb_state = USB_STATE_ADDRESS; 
0470:  MOVLW  04
0472:  MOVWF  1D
....................       usb_disable_endpoints(); 
0474:  MOVLB  0
0476:  RCALL  02CA
....................    } 
0478:  BRA    063A
047A:  MOVLB  1
....................    else  
....................    { 
....................       // else set configed state 
....................       usb_state = USB_STATE_CONFIGURED;  
047C:  MOVLW  05
047E:  MOVWF  1D
....................       addy = (int16)USB_DATA_BUFFER_LOCATION+(2*USB_MAX_EP0_PACKET_LENGTH); 
0480:  MOVLW  04
0482:  MOVWF  x1C
0484:  MOVLW  90
0486:  MOVWF  x1B
....................       for (en=1; en<USB_NUM_UEP; en++)  
0488:  MOVLW  01
048A:  MOVWF  x1A
048C:  MOVF   x1A,W
048E:  SUBLW  0F
0490:  BTFSS  FD8.0
0492:  BRA    063A
....................       { 
....................          // enable and config endpoints based upon user configuration 
....................          usb_disable_endpoint(en); 
0494:  MOVFF  11A,122
0498:  MOVLB  0
049A:  RCALL  0276
....................          new_uep = 0; 
049C:  MOVLB  1
049E:  CLRF   x1D
....................          if (usb_ep_rx_type[en] != USB_ENABLE_DISABLED)  
04A0:  CLRF   03
04A2:  MOVF   x1A,W
04A4:  MOVFF  FF2,121
04A8:  BCF    FF2.7
04AA:  MOVLB  0
04AC:  RCALL  00AE
04AE:  MOVLB  1
04B0:  BTFSC  x21.7
04B2:  BSF    FF2.7
04B4:  SUBLW  FF
04B6:  BZ    0572
....................          { 
....................             new_uep = 0x04; 
04B8:  MOVLW  04
04BA:  MOVWF  x1D
....................             len = usb_ep_rx_size[en]; 
04BC:  BCF    FD8.0
04BE:  RLCF   x1A,W
04C0:  CLRF   03
04C2:  MOVFF  FF2,121
04C6:  BCF    FF2.7
04C8:  MOVLB  0
04CA:  RCALL  00CE
04CC:  TBLRD*+
04CE:  MOVFF  FF5,03
04D2:  MOVLB  1
04D4:  BTFSC  x21.7
04D6:  BSF    FF2.7
04D8:  MOVWF  x1E
04DA:  MOVFF  03,11F
....................             EP_BDxCNT_O(en) = len; 
04DE:  MOVF   x1A,W
04E0:  MULLW  08
04E2:  MOVF   FF3,W
04E4:  CLRF   x22
04E6:  MOVWF  x21
04E8:  MOVLW  01
04EA:  ADDWF  x21,W
04EC:  MOVWF  01
04EE:  MOVLW  00
04F0:  ADDWFC x22,W
04F2:  MOVWF  03
04F4:  MOVFF  01,FE9
04F8:  MOVLW  04
04FA:  ADDWF  03,W
04FC:  MOVWF  FEA
04FE:  MOVFF  11E,FEF
....................             EP_BDxADR_O(en) = addy; 
0502:  MOVF   x1A,W
0504:  MULLW  08
0506:  MOVF   FF3,W
0508:  CLRF   x22
050A:  MOVWF  x21
050C:  MOVLW  02
050E:  ADDWF  x21,W
0510:  MOVWF  01
0512:  MOVLW  00
0514:  ADDWFC x22,W
0516:  MOVWF  03
0518:  MOVFF  01,FE9
051C:  MOVLW  04
051E:  ADDWF  03,W
0520:  MOVWF  FEA
0522:  MOVFF  11C,FEC
0526:  MOVF   FED,F
0528:  MOVFF  11B,FEF
....................             addy += usb_ep_rx_size[en]; 
052C:  BCF    FD8.0
052E:  RLCF   x1A,W
0530:  CLRF   03
0532:  MOVFF  FF2,121
0536:  BCF    FF2.7
0538:  MOVLB  0
053A:  RCALL  00CE
053C:  TBLRD*+
053E:  MOVFF  FF5,03
0542:  MOVLB  1
0544:  BTFSC  x21.7
0546:  BSF    FF2.7
0548:  ADDWF  x1B,F
054A:  MOVF   03,W
054C:  ADDWFC x1C,F
....................            #if USB_IGNORE_RX_DTS 
....................             i = 0x80; 
....................            #else 
....................             i = 0x88; 
054E:  MOVLW  88
0550:  MOVWF  x20
....................            #endif 
....................             if (bit_test(len,8)) {bit_set(i,0);} 
0552:  BTFSS  x1F.0
0554:  BRA    0558
0556:  BSF    x20.0
....................             if (bit_test(len,9)) {bit_set(i,1);} 
0558:  BTFSS  x1F.1
055A:  BRA    055E
055C:  BSF    x20.1
....................             EP_BDxST_O(en) = i; 
055E:  MOVF   x1A,W
0560:  MULLW  08
0562:  MOVF   FF3,W
0564:  CLRF   x22
0566:  MOVWF  FE9
0568:  MOVLW  04
056A:  ADDWF  x22,W
056C:  MOVWF  FEA
056E:  MOVFF  120,FEF
....................          } 
....................          if (usb_ep_tx_type[en] != USB_ENABLE_DISABLED)  
0572:  CLRF   03
0574:  MOVF   x1A,W
0576:  MOVFF  FF2,121
057A:  BCF    FF2.7
057C:  MOVLB  0
057E:  RCALL  00AE
0580:  MOVLB  1
0582:  BTFSC  x21.7
0584:  BSF    FF2.7
0586:  SUBLW  FF
0588:  BZ    0600
....................          { 
....................             new_uep |= 0x02; 
058A:  BSF    x1D.1
....................             EP_BDxADR_I(en) = addy; 
058C:  MOVF   x1A,W
058E:  MULLW  08
0590:  MOVF   FF3,W
0592:  CLRF   x22
0594:  MOVWF  x21
0596:  MOVLW  04
0598:  ADDWF  x21,F
059A:  MOVLW  00
059C:  ADDWFC x22,F
059E:  MOVLW  02
05A0:  ADDWF  x21,W
05A2:  MOVWF  01
05A4:  MOVLW  00
05A6:  ADDWFC x22,W
05A8:  MOVWF  03
05AA:  MOVFF  01,FE9
05AE:  MOVLW  04
05B0:  ADDWF  03,W
05B2:  MOVWF  FEA
05B4:  MOVFF  11C,FEC
05B8:  MOVF   FED,F
05BA:  MOVFF  11B,FEF
....................             addy += usb_ep_tx_size[en]; 
05BE:  BCF    FD8.0
05C0:  RLCF   x1A,W
05C2:  CLRF   03
05C4:  MOVFF  FF2,121
05C8:  BCF    FF2.7
05CA:  MOVLB  0
05CC:  RCALL  00CE
05CE:  TBLRD*+
05D0:  MOVFF  FF5,03
05D4:  MOVLB  1
05D6:  BTFSC  x21.7
05D8:  BSF    FF2.7
05DA:  ADDWF  x1B,F
05DC:  MOVF   03,W
05DE:  ADDWFC x1C,F
....................             EP_BDxST_I(en) = 0x40; 
05E0:  MOVF   x1A,W
05E2:  MULLW  08
05E4:  MOVF   FF3,W
05E6:  CLRF   x22
05E8:  MOVWF  x21
05EA:  MOVLW  04
05EC:  ADDWF  x21,F
05EE:  MOVLW  00
05F0:  ADDWFC x22,F
05F2:  MOVFF  121,FE9
05F6:  MOVLW  04
05F8:  ADDWF  x22,W
05FA:  MOVWF  FEA
05FC:  MOVLW  40
05FE:  MOVWF  FEF
....................          } 
....................          if (new_uep == 0x06) {new_uep = 0x0E;} 
0600:  MOVF   x1D,W
0602:  SUBLW  06
0604:  BNZ   060A
0606:  MOVLW  0E
0608:  MOVWF  x1D
....................          if (usb_ep_tx_type[en] != USB_ENABLE_ISOCHRONOUS) {new_uep |= 0x10;} 
060A:  CLRF   03
060C:  MOVF   x1A,W
060E:  MOVFF  FF2,121
0612:  BCF    FF2.7
0614:  MOVLB  0
0616:  RCALL  00AE
0618:  MOVLB  1
061A:  BTFSC  x21.7
061C:  BSF    FF2.7
061E:  SUBLW  01
0620:  BZ    0624
0622:  BSF    x1D.4
....................           
....................          UEP(en) = new_uep; 
0624:  CLRF   03
0626:  MOVF   x1A,W
0628:  ADDLW  70
062A:  MOVWF  FE9
062C:  MOVLW  0F
062E:  ADDWFC 03,W
0630:  MOVWF  FEA
0632:  MOVFF  11D,FEF
0636:  INCF   x1A,F
0638:  BRA    048C
063A:  MOVLB  0
....................       } 
....................    } 
063C:  GOTO   06E8 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoint(int8 en)  
.................... { 
....................    UEP(en) = ENDPT_DISABLED; 
*
0276:  CLRF   03
0278:  MOVLB  1
027A:  MOVF   x22,W
027C:  ADDLW  70
027E:  MOVWF  FE9
0280:  MOVLW  0F
0282:  ADDWFC 03,W
0284:  MOVWF  FEA
0286:  CLRF   FEF
....................     
....................    if (usb_endpoint_is_valid(en)) 
0288:  MOVFF  122,123
028C:  MOVLB  0
028E:  RCALL  0214
0290:  MOVF   01,F
0292:  BZ    02C8
....................    { 
....................       EP_BDxST_O(en) = 0;   //clear state, deque if necessary       
0294:  MOVLB  1
0296:  MOVF   x22,W
0298:  MULLW  08
029A:  MOVF   FF3,W
029C:  CLRF   x24
029E:  MOVWF  FE9
02A0:  MOVLW  04
02A2:  ADDWF  x24,W
02A4:  MOVWF  FEA
02A6:  CLRF   FEF
....................       EP_BDxST_I(en) = 0;   //clear state, deque if necessary 
02A8:  MOVF   x22,W
02AA:  MULLW  08
02AC:  MOVF   FF3,W
02AE:  CLRF   x24
02B0:  MOVWF  x23
02B2:  MOVLW  04
02B4:  ADDWF  x23,F
02B6:  MOVLW  00
02B8:  ADDWFC x24,F
02BA:  MOVFF  123,FE9
02BE:  MOVLW  04
02C0:  ADDWF  x24,W
02C2:  MOVWF  FEA
02C4:  CLRF   FEF
02C6:  MOVLB  0
....................    } 
02C8:  RETURN 0
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_disable_endpoints(void)  
.................... { 
....................    int8 i; 
....................     
....................    for (i=1; i<USB_NUM_UEP; i++) 
02CA:  MOVLW  01
02CC:  MOVLB  1
02CE:  MOVWF  x21
02D0:  MOVF   x21,W
02D2:  SUBLW  0F
02D4:  BNC   02E4
....................       usb_disable_endpoint(i); 
02D6:  MOVFF  121,122
02DA:  MOVLB  0
02DC:  RCALL  0276
02DE:  MOVLB  1
02E0:  INCF   x21,F
02E2:  BRA    02D0
02E4:  MOVLB  0
02E6:  RETURN 0
....................        
....................    //__usb_kbhit_status=0; 
.................... } 
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... static void usb_clear_trn(void) 
.................... { 
....................    //UIR_TRN = 0; 
....................    //delay_cycles(6); 
....................    UIR &= ~(1 << BIT_TRN); 
*
0004:  BCF    F68.3
0006:  RETURN 0
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt  
.................... /*       method), then you must call this function rapidly.  If there is more  
.................... /*       than 10ms latency the PC may think the USB device is stalled and 
.................... /*       disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this  
.................... /*       fuction.  Also, goto usb_init() and remove the code that enables the  
.................... /*       USB interrupt. 
.................... /******************************************************************************/ 
.................... #int_usb NOCLEAR 
.................... void usb_isr()  
.................... { 
....................    int8 TRNAttempts; 
....................     
....................    clear_interrupt(INT_USB); 
*
0CDE:  BCF    FA1.5
....................     
....................    if (usb_state == USB_STATE_DETACHED) return;   //should never happen, though 
0CE0:  MOVF   1D,F
0CE2:  BTFSC  FD8.2
0CE4:  BRA    0D58
....................    if (UIR)  
0CE6:  MOVF   F68,F
0CE8:  BTFSC  FD8.2
0CEA:  BRA    0D58
....................    { 
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................  
....................       //activity detected.  (only enable after sleep) 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();} 
0CEC:  BTFSS  F68.2
0CEE:  BRA    0CF6
0CF0:  BTFSC  F69.2
0CF2:  GOTO   01CE
....................  
....................       if (UCON_SUSPND) return; 
0CF6:  BTFSC  F6D.1
0CF8:  BRA    0D58
....................  
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
0CFA:  BTFSS  F68.5
0CFC:  BRA    0D04
0CFE:  BTFSC  F69.5
0D00:  GOTO   01FE
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
0D04:  BTFSS  F68.1
0D06:  BRA    0D0E
0D08:  BTFSC  F69.1
0D0A:  GOTO   020C
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
0D0E:  BTFSS  F68.0
0D10:  BRA    0D18
0D12:  BTFSC  F69.0
0D14:  GOTO   0310
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
0D18:  BTFSS  F68.4
0D1A:  BRA    0D22
0D1C:  BTFSC  F69.4
0D1E:  GOTO   033A
....................        
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
0D22:  BTFSS  F68.6
0D24:  BRA    0D2C
0D26:  BTFSC  F69.6
0D28:  GOTO   0344
....................  
....................       TRNAttempts = 0; 
0D2C:  MOVLB  1
0D2E:  CLRF   x16
....................       do 
....................       { 
....................          if (UIR_TRN && UIE_TRN)  
0D30:  BTFSS  F68.3
0D32:  BRA    0D48
0D34:  BTFSS  F69.3
0D36:  BRA    0D48
....................          { 
....................             USTATCopy = U1STAT; 
0D38:  MOVFF  F6C,1C
....................             usb_clear_trn(); 
0D3C:  MOVLB  0
0D3E:  CALL   0004
....................             usb_isr_tok_dne(); 
0D42:  BRA    0B6E
....................          } 
0D44:  BRA    0D4C
0D46:  MOVLB  1
....................          else 
....................             break; 
0D48:  BRA    0D56
0D4A:  MOVLB  0
....................       } while (TRNAttempts++ < 4); 
0D4C:  MOVLB  1
0D4E:  MOVF   x16,W
0D50:  INCF   x16,F
0D52:  SUBLW  03
0D54:  BC    0D30
0D56:  MOVLB  0
....................    } 
0D58:  GOTO   006C
.................... } 
....................  
.................... // SOF interrupt not handled.  user must add this depending on application 
.................... void usb_isr_sof(void)  
.................... { 
....................    debug_usb(debug_putc, "\r\nSOF"); 
....................     
....................    //UIR_SOF = 0; 
....................    UIR &= ~(1 << BIT_SOF); 
*
0344:  BCF    F68.6
0346:  GOTO   0D2C (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /******************************************************************************/ 
.................... void usb_isr_rst(void)  
.................... { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR = 0; 
*
0310:  CLRF   F6A
....................    UIR = 0; 
0312:  CLRF   F68
....................    UEIE = 0x9F; 
0314:  MOVLW  9F
0316:  MOVWF  F6B
....................    UIE = STANDARD_INTS & ~__USB_UIF_ACTIVE; 
0318:  MOVLW  3D
031A:  MOVWF  F69
....................  
....................    UADDR = 0; 
031C:  CLRF   F6E
....................  
....................    usb_disable_endpoints(); 
031E:  RCALL  02CA
....................     
....................    usb_token_reset(); 
0320:  RCALL  02E8
....................  
....................    UEP(0) = ENDPT_CONTROL | 0x10; 
0322:  MOVLW  16
0324:  MOVWF  F70
....................  
....................    while (UIR_TRN)  
0326:  BTFSS  F68.3
0328:  BRA    032E
....................    { 
....................       usb_clear_trn(); 
032A:  RCALL  0004
032C:  BRA    0326
....................    } 
....................  
....................    UCON_PKTDIS = 0; //SIE token and packet processing enabled 
032E:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
0330:  RCALL  01DE
....................  
....................    usb_state = USB_STATE_DEFAULT; //put usb mcu into default state 
0332:  MOVLW  03
0334:  MOVWF  1D
0336:  GOTO   0D18 (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void)  
.................... { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
01DE:  MOVLW  40
01E0:  MOVLB  4
01E2:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_DATA_BUFFER_LOCATION; 
01E4:  MOVLW  04
01E6:  MOVWF  x03
01E8:  MOVLW  10
01EA:  MOVWF  x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
01EC:  MOVLW  88
01EE:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
01F0:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_DATA_BUFFER_LOCATION + (int16)USB_MAX_EP0_PACKET_LENGTH; 
01F2:  MOVLW  04
01F4:  MOVWF  x07
01F6:  MOVLW  50
01F8:  MOVWF  x06
01FA:  MOVLB  0
01FC:  RETURN 0
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr(void) 
.................... { 
....................   #if USB_USE_ERROR_COUNTER 
....................    int ints; 
....................   #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
....................   #if USB_USE_ERROR_COUNTER 
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) )  
....................    {  
....................       //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) )  
....................    {   
....................       //increment crc5 error counter 
....................       debug_usb(debug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) )  
....................    { 
....................       //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) )  
....................    {   
....................       //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) )  
....................    {   
....................       //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) )  
....................    {  
....................       //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
....................   #endif 
....................  
....................    UEIR = 0; 
*
020C:  CLRF   F6A
....................     
....................    //UIR_UERR = 0; 
....................    UIR &= ~(1 << BIT_UERR); 
020E:  BCF    F68.1
0210:  GOTO   0D0E (RETURN)
.................... } 
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_uidle(void) 
.................... { 
....................    debug_usb(debug_putc, "I"); 
....................  
....................    UIE_ACTV = 1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
033A:  BSF    F69.2
....................     
....................    //UIR_IDLE = 0; //clear idle interrupt flag 
....................    UIR &= ~(1 << BIT_IDLE); 
033C:  BCF    F68.4
....................     
....................    UCON_SUSPND = 1; //set suspend. we are now suspended 
033E:  BSF    F6D.1
0340:  GOTO   0D22 (RETURN)
.................... } 
....................  
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_activity(void) 
.................... { 
....................    debug_usb(debug_putc, "A"); 
....................  
....................    UCON_SUSPND = 0; //turn off low power suspending 
*
01CE:  BCF    F6D.1
....................    UIE_ACTV = 0; //clear activity interupt enabling 
01D0:  BCF    F69.2
....................     
....................    while(UIR_ACTV) 
01D2:  BTFSS  F68.2
01D4:  BRA    01DA
....................    { 
....................       //UIR_ACTV = 0; 
....................       UIR &= ~(1 << BIT_ACTV); 
01D6:  BCF    F68.2
01D8:  BRA    01D2
....................    } 
01DA:  GOTO   0CF6 (RETURN)
.................... } 
....................  
.................... /****************************************************************************** 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_stall(void)  
.................... { 
....................    debug_usb(debug_putc, "S"); 
....................     
....................     
....................    if (bit_test(UEP(0),0))  
*
01FE:  BTFSS  F70.0
0200:  BRA    0206
....................    { 
....................       usb_init_ep0_setup(); 
0202:  RCALL  01DE
....................       bit_clear(UEP(0), 0); 
0204:  BCF    F70.0
....................    } 
....................     
....................    //UIR_STALL = 0; 
....................    UIR &= ~(1 << BIT_STALL); 
0206:  BCF    F68.5
0208:  GOTO   0D04 (RETURN)
.................... } 
....................  
.................... // see usb_hw_layer.h for documentation 
.................... void usb_request_send_response(unsigned int8 len) {__setup_0_tx_size = len;} 
*
034A:  MOVFF  11C,1E
034E:  RETURN 0
.................... void usb_request_get_data(void)  {__setup_0_tx_size = 0xFE;} 
.................... void usb_request_stall(void)  {__setup_0_tx_size = 0xFF;} 
0350:  SETF   1E
0352:  RETURN 0
....................  
.................... /***************************************************************************** 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_isr_tok_dne(void)  
.................... { 
....................    int8 en; 
....................  
....................    en = USTATCopy>>3; 
*
0B6E:  RRCF   1C,W
0B70:  MOVLB  1
0B72:  MOVWF  x17
0B74:  RRCF   x17,F
0B76:  RRCF   x17,F
0B78:  MOVLW  1F
0B7A:  ANDWF  x17,F
....................  
....................    debug_usb(debug_putc, "T "); 
....................    debug_usb(debug_putc, "%X ", USTATCopy); 
....................  
....................    if (USTATCopy == USTAT_OUT_SETUP_E0)  
0B7C:  MOVF   1C,F
0B7E:  BNZ   0C1C
....................    { 
....................       //new out or setup token in the buffer 
....................       int8 pidKey; 
....................        
....................       debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................        
....................       pidKey = EP_BDxST_O(0) & 0x3C;  //save PID 
0B80:  MOVLB  4
0B82:  MOVF   x00,W
0B84:  ANDLW  3C
0B86:  MOVLB  1
0B88:  MOVWF  x18
....................        
....................       EP_BDxST_O(0) &= 0x43;  //clear pid, prevent bdstal/pid confusion 
0B8A:  MOVLW  43
0B8C:  MOVLB  4
0B8E:  ANDWF  x00,F
....................        
....................       if (pidKey == USB_PIC_PID_SETUP)  
0B90:  MOVLB  1
0B92:  MOVF   x18,W
0B94:  SUBLW  34
0B96:  BNZ   0BE2
....................       { 
....................          if ((EP_BDxST_I(0) & 0x80) != 0x00) 
0B98:  MOVLB  4
0B9A:  MOVF   x04,W
0B9C:  ANDLW  80
0B9E:  BZ    0BA2
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
0BA0:  CLRF   x04
....................  
....................          debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................          debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................          usb_isr_tok_setup_dne(); 
0BA2:  MOVLB  0
0BA4:  BRA    08FE
....................  
....................          UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
0BA6:  BCF    F6D.4
....................  
....................          //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) (see usb_request_stall()) 
....................          //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone (see usb_request_get_data()) 
....................          //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit (see usb_request_send_response()) 
....................          if (__setup_0_tx_size == 0xFF) 
0BA8:  INCFSZ 1E,W
0BAA:  BRA    0BBA
....................             usb_flush_out(0, USB_DTS_STALL); 
0BAC:  MOVLB  1
0BAE:  CLRF   x19
0BB0:  MOVLW  03
0BB2:  MOVWF  x1A
0BB4:  MOVLB  0
0BB6:  RCALL  0928
0BB8:  BRA    0BDE
....................          else  
....................          { 
....................             usb_flush_out(0, USB_DTS_TOGGLE); 
0BBA:  MOVLB  1
0BBC:  CLRF   x19
0BBE:  MOVLW  02
0BC0:  MOVWF  x1A
0BC2:  MOVLB  0
0BC4:  RCALL  0928
....................             if (__setup_0_tx_size != 0xFE) 
0BC6:  MOVF   1E,W
0BC8:  SUBLW  FE
0BCA:  BZ    0BDE
....................                usb_flush_in(0 ,__setup_0_tx_size, USB_DTS_USERX); 
0BCC:  MOVLB  1
0BCE:  CLRF   x19
0BD0:  CLRF   x1B
0BD2:  MOVFF  1E,11A
0BD6:  MOVLW  04
0BD8:  MOVWF  x1C
0BDA:  MOVLB  0
0BDC:  RCALL  0A3A
....................          } 
....................          //why was this here? 
....................          //UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
....................       } 
0BDE:  BRA    0C18
0BE0:  MOVLB  1
....................       else if (pidKey == USB_PIC_PID_OUT)  
0BE2:  MOVF   x18,W
0BE4:  SUBLW  04
0BE6:  BNZ   0C1A
....................       { 
....................          usb_isr_tok_out_dne(0); 
0BE8:  CLRF   x19
0BEA:  MOVLB  0
0BEC:  RCALL  0B18
....................          usb_flush_out(0, USB_DTS_TOGGLE); 
0BEE:  MOVLB  1
0BF0:  CLRF   x19
0BF2:  MOVLW  02
0BF4:  MOVWF  x1A
0BF6:  MOVLB  0
0BF8:  RCALL  0928
....................          if ((__setup_0_tx_size!=0xFE) && (__setup_0_tx_size!=0xFF)) 
0BFA:  MOVF   1E,W
0BFC:  SUBLW  FE
0BFE:  BZ    0C18
0C00:  INCFSZ 1E,W
0C02:  BRA    0C06
0C04:  BRA    0C18
....................          { 
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
0C06:  MOVLB  1
0C08:  CLRF   x19
0C0A:  CLRF   x1B
0C0C:  MOVFF  1E,11A
0C10:  MOVLW  01
0C12:  MOVWF  x1C
0C14:  MOVLB  0
0C16:  RCALL  0A3A
....................          } 
....................       } 
0C18:  MOVLB  1
....................       else 
....................       { 
....................          debug_usb(debug_putc, "!!! "); 
....................       } 
....................    } 
0C1A:  BRA    0CD8
....................    else if (USTATCopy == USTAT_IN_E0)  
0C1C:  MOVF   1C,W
0C1E:  SUBLW  04
0C20:  BNZ   0C4E
....................    {    
....................       //pic -> host transfer completed 
....................       EP_BDxST_I(0) = EP_BDxST_I(0) & 0x43;   //clear up any BDSTAL confusion 
0C22:  MOVLW  43
0C24:  MOVLB  4
0C26:  ANDWF  x04,F
....................       __setup_0_tx_size = 0xFF; 
0C28:  SETF   1E
....................       usb_isr_tok_in_dne(0); 
0C2A:  MOVLB  1
0C2C:  CLRF   x19
0C2E:  MOVLB  0
0C30:  RCALL  0B4A
....................       if (__setup_0_tx_size!=0xFF) 
0C32:  INCFSZ 1E,W
0C34:  BRA    0C38
0C36:  BRA    0C4A
....................          usb_flush_in(0, __setup_0_tx_size, USB_DTS_TOGGLE); 
0C38:  MOVLB  1
0C3A:  CLRF   x19
0C3C:  CLRF   x1B
0C3E:  MOVFF  1E,11A
0C42:  MOVLW  02
0C44:  MOVWF  x1C
0C46:  MOVLB  0
0C48:  RCALL  0A3A
....................       else 
....................       { 
....................          //usb_init_ep0_setup(); //REMOVED JUN/9/2009 
....................       }   
....................    } 
0C4A:  BRA    0CD6
0C4C:  MOVLB  1
....................    else  
....................    { 
....................       if (!bit_test(USTATCopy, 2))  
0C4E:  BTFSC  1C.2
0C50:  BRA    0C8C
....................       { 
....................          EP_BDxST_O(en) = EP_BDxST_O(en) & 0x43;   //clear up any BDSTAL confusion 
0C52:  MOVF   x17,W
0C54:  MULLW  08
0C56:  MOVF   FF3,W
0C58:  CLRF   x1A
0C5A:  MOVWF  01
0C5C:  MOVLW  04
0C5E:  ADDWF  x1A,W
0C60:  MOVWF  03
0C62:  MOVF   x17,W
0C64:  MULLW  08
0C66:  MOVF   FF3,W
0C68:  CLRF   x1E
0C6A:  MOVWF  FE9
0C6C:  MOVLW  04
0C6E:  ADDWF  x1E,W
0C70:  MOVWF  FEA
0C72:  MOVF   FEF,W
0C74:  ANDLW  43
0C76:  MOVFF  03,FEA
0C7A:  MOVFF  01,FE9
0C7E:  MOVWF  FEF
....................          usb_isr_tok_out_dne(en); 
0C80:  MOVFF  117,119
0C84:  MOVLB  0
0C86:  RCALL  0B18
....................       } 
0C88:  BRA    0CD6
0C8A:  MOVLB  1
....................       else  
....................       { 
....................          EP_BDxST_I(en) = EP_BDxST_I(en) & 0x43;   //clear up any BDSTAL confusion 
0C8C:  MOVF   x17,W
0C8E:  MULLW  08
0C90:  MOVF   FF3,W
0C92:  CLRF   x1A
0C94:  MOVWF  x19
0C96:  MOVLW  04
0C98:  ADDWF  x19,F
0C9A:  MOVLW  00
0C9C:  ADDWFC x1A,F
0C9E:  MOVLW  04
0CA0:  ADDWF  x1A,W
0CA2:  MOVWF  03
0CA4:  MOVF   x17,W
0CA6:  MULLW  08
0CA8:  MOVF   FF3,W
0CAA:  CLRF   x1E
0CAC:  MOVWF  x1D
0CAE:  MOVLW  04
0CB0:  ADDWF  x1D,F
0CB2:  MOVLW  00
0CB4:  ADDWFC x1E,F
0CB6:  MOVFF  11D,FE9
0CBA:  MOVLW  04
0CBC:  ADDWF  x1E,W
0CBE:  MOVWF  FEA
0CC0:  MOVF   FEF,W
0CC2:  ANDLW  43
0CC4:  MOVFF  03,FEA
0CC8:  MOVFF  119,FE9
0CCC:  MOVWF  FEF
....................          usb_isr_tok_in_dne(en); 
0CCE:  MOVFF  117,119
0CD2:  MOVLB  0
0CD4:  RCALL  0B4A
0CD6:  MOVLB  1
....................       } 
....................    } 
0CD8:  MOVLB  0
0CDA:  GOTO   0D44 (RETURN)
.................... } 
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
.................... #endif 
....................  
.................... #if defined(__PIC24_USB_H__) 
....................  #include <pic24_usb.c> 
.................... #endif 
....................  
.................... #if defined(__USBN960X_H__) 
....................  #include <usbn960x.c> 
.................... #endif 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... TYPE_USB_STACK_STATUS USB_stack_status; 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; unsigned int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
.................... void usb_finish_set_address(void); 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... // see usb.h for documentation 
.................... int1 usb_enumerated(void) 
.................... { 
....................    return(USB_stack_status.curr_config); 
*
1630:  MOVF   19,W
1632:  MOVWF  01
1634:  GOTO   1D24 (RETURN)
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_wait_for_enumeration(void)  
.................... { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... // see USB.H for documentation 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, unsigned int16 len, unsigned int8 timeout) { 
....................    unsigned int16 i=0; 
....................    int1 res; 
....................    unsigned int16 this_packet_len; 
....................    unsigned int16 packet_size; 
....................    unsigned int32 timeout_1us; 
....................  
....................    packet_size = usb_ep_tx_size[endpoint]; 
....................     
....................    //printf("\r\nUSB PUTS %U LEN=%LU MAX_PACK=%LU\r\n", endpoint, len, packet_size); 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len)  
....................    { 
....................       timeout_1us = (int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len = packet_size;} 
....................       else {this_packet_len = len-i;} 
....................       //putc('*'); 
....................       do  
....................       { 
....................          res = usb_put_packet(endpoint, ptr + i, this_packet_len, USB_DTS_TOGGLE);   //send 64 byte packets 
....................          //putc('.'); 
....................          if (!res) 
....................          { 
....................             delay_us(1); 
....................             //delay_ms(500); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i += packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res = usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... unsigned int16 usb_gets(int8 endpoint, int8 * ptr, unsigned int16 max, unsigned int16 timeout) { 
....................    unsigned int16 ret=0; 
....................    unsigned int16 to; 
....................    unsigned int16 len; 
....................    unsigned int16 packet_size; 
....................    unsigned int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... // see usb.h for documentation 
.................... void usb_token_reset(void)  
.................... { 
....................    unsigned int i; 
....................  
....................    for (i=0;i<USB_MAX_NUM_INTERFACES;i++)  
*
02E8:  MOVLB  1
02EA:  CLRF   x17
02EC:  MOVF   x17,F
02EE:  BNZ   0304
....................       USB_Interface[i] = 0;   //reset each interface to default 
02F0:  CLRF   03
02F2:  MOVF   x17,W
02F4:  ADDLW  22
02F6:  MOVWF  FE9
02F8:  MOVLW  00
02FA:  ADDWFC 03,W
02FC:  MOVWF  FEA
02FE:  CLRF   FEF
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) 
....................       hid_protocol[i] = 1; 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
0300:  INCF   x17,F
0302:  BRA    02EC
....................    usb_cdc_init(); 
....................   #endif 
....................  
....................    USB_stack_status.curr_config = 0;      //unconfigured device 
0304:  CLRF   19
....................  
....................    USB_stack_status.status_device = 1;    //previous state.  init at none 
0306:  MOVLW  01
0308:  MOVWF  1A
....................    USB_stack_status.dev_req = NONE;       //previous token request state.  init at none 
030A:  CLRF   18
030C:  MOVLB  0
030E:  RETURN 0
.................... } 
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... int1 usb_endpoint_is_valid(int8 endpoint)  
.................... { 
....................    int1 direction; 
....................     
....................    direction = bit_test(endpoint,7); 
*
0214:  MOVLB  1
0216:  BCF    x24.0
0218:  BTFSC  x23.7
021A:  BSF    x24.0
....................     
....................    endpoint &= 0x7F; 
021C:  BCF    x23.7
....................     
....................    if (endpoint > 16) 
021E:  MOVF   x23,W
0220:  SUBLW  10
0222:  BC    022A
....................       return(FALSE); 
0224:  MOVLW  00
0226:  MOVWF  01
0228:  BRA    0272
....................     
....................    if (direction) { //IN 
022A:  BTFSS  x24.0
022C:  BRA    0252
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
022E:  CLRF   03
0230:  MOVF   x23,W
0232:  MOVFF  FF2,125
0236:  BCF    FF2.7
0238:  MOVLB  0
023A:  RCALL  00AE
023C:  MOVLB  1
023E:  BTFSC  x25.7
0240:  BSF    FF2.7
0242:  SUBLW  FF
0244:  BNZ   024A
0246:  MOVLW  00
0248:  BRA    024C
024A:  MOVLW  01
024C:  MOVWF  01
024E:  BRA    0272
....................    } 
0250:  BRA    0272
....................    else {   //OUT 
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
0252:  CLRF   03
0254:  MOVF   x23,W
0256:  MOVFF  FF2,125
025A:  BCF    FF2.7
025C:  MOVLB  0
025E:  RCALL  00AE
0260:  MOVLB  1
0262:  BTFSC  x25.7
0264:  BSF    FF2.7
0266:  SUBLW  FF
0268:  BNZ   026E
026A:  MOVLW  00
026C:  BRA    0270
026E:  MOVLW  01
0270:  MOVWF  01
....................    } 
0272:  MOVLB  0
0274:  RETURN 0
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
0B4A:  MOVLB  1
0B4C:  MOVF   x19,F
0B4E:  BNZ   0B6A
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
0B50:  DECFSZ 18,W
0B52:  BRA    0B5E
0B54:  MOVLB  0
0B56:  CALL   0354
0B5A:  BRA    0B68
0B5C:  MOVLB  1
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
0B5E:  MOVF   18,W
0B60:  SUBLW  02
0B62:  BNZ   0B6A
0B64:  MOVLB  0
0B66:  BRA    0B3C
0B68:  MOVLB  1
....................    } 
....................   #if USB_CDC_DEVICE 
0B6A:  MOVLB  0
0B6C:  RETURN 0
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_in_cdc_data_dne(); 
....................   } 
....................   #endif 
.................... } 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_out_dne(int8 endpoint) 
.................... { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
0B18:  MOVLB  1
0B1A:  MOVF   x19,F
0B1C:  BNZ   0B1E
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
....................      //#else   //REMOVED JUN/9/2009 
....................      //usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
0B1E:  MOVLB  0
0B20:  RETURN 0
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
....................       usb_isr_tok_out_cdc_data_dne(); 
....................    } 
....................   #endif 
....................    //else { 
....................    //   bit_set(__usb_kbhit_status,endpoint); 
....................    //} 
.................... } 
....................  
....................  
.................... //---- process setup message stage -----------// 
....................  
.................... // see usb.h for documentation 
.................... void usb_isr_tok_setup_dne(void)  
.................... { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
08FE:  CLRF   18
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
0900:  MOVLB  4
0902:  MOVF   x10,W
0904:  ANDLW  7F
0906:  XORLW  00
0908:  MOVLB  0
090A:  BZ    0916
090C:  XORLW  01
090E:  BZ    091A
0910:  XORLW  03
0912:  BZ    091E
0914:  BRA    0922
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
0916:  BRA    0640
....................          break; 
0918:  BRA    0924
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
091A:  BRA    06FC
....................          break; 
091C:  BRA    0924
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
091E:  BRA    0894
....................          break; 
0920:  BRA    0924
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
0922:  RCALL  0350
....................          break; 
....................    } 
0924:  GOTO   0BA6 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
0640:  MOVLB  4
0642:  MOVF   x11,W
0644:  XORLW  00
0646:  MOVLB  0
0648:  BZ    0664
064A:  XORLW  01
064C:  BZ    0678
064E:  XORLW  02
0650:  BZ    0694
0652:  XORLW  06
0654:  BZ    06AE
0656:  XORLW  03
0658:  BZ    06C0
065A:  XORLW  0E
065C:  BZ    06C4
065E:  XORLW  01
0660:  BZ    06D4
0662:  BRA    06F6
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
0664:  MOVFF  1A,450
....................             usb_ep0_tx_buffer[1]=0; 
0668:  MOVLB  4
066A:  CLRF   x51
....................             usb_request_send_response(2); 
066C:  MOVLW  02
066E:  MOVLB  1
0670:  MOVWF  x1C
0672:  MOVLB  0
0674:  RCALL  034A
....................             break; 
0676:  BRA    06F8
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0678:  MOVLB  4
067A:  DECFSZ x12,W
067C:  BRA    068E
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
067E:  MOVLW  01
0680:  ANDWF  1A,F
....................                usb_put_0len_0(); 
0682:  MOVLB  1
0684:  CLRF   x1C
0686:  MOVLB  0
0688:  RCALL  034A
....................             } 
068A:  BRA    0692
068C:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
068E:  MOVLB  0
0690:  RCALL  0350
....................             break; 
0692:  BRA    06F8
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
0694:  MOVLB  4
0696:  DECFSZ x12,W
0698:  BRA    06A8
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
069A:  BSF    1A.1
....................                usb_put_0len_0(); 
069C:  MOVLB  1
069E:  CLRF   x1C
06A0:  MOVLB  0
06A2:  RCALL  034A
....................             } 
06A4:  BRA    06AC
06A6:  MOVLB  4
....................             else 
....................                usb_request_stall(); 
06A8:  MOVLB  0
06AA:  RCALL  0350
....................             break; 
06AC:  BRA    06F8
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
06AE:  MOVLW  02
06B0:  MOVWF  18
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
06B2:  MOVFF  412,1F
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................             USB_stack_status.curr_config=0;   // make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
06B6:  MOVLB  1
06B8:  CLRF   x1C
06BA:  MOVLB  0
06BC:  RCALL  034A
....................             break; 
06BE:  BRA    06F8
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
06C0:  BRA    03EC
....................             break; 
06C2:  BRA    06F8
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
06C4:  MOVFF  19,450
....................             usb_request_send_response(1); 
06C8:  MOVLW  01
06CA:  MOVLB  1
06CC:  MOVWF  x1C
06CE:  MOVLB  0
06D0:  RCALL  034A
....................             break; 
06D2:  BRA    06F8
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
06D4:  MOVLB  4
06D6:  MOVF   x12,W
06D8:  SUBLW  01
06DA:  BNC   06F2
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
06DC:  MOVFF  412,19
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
06E0:  MOVFF  412,119
06E4:  MOVLB  0
06E6:  BRA    046A
....................                debug_usb(debug_putc,"SC%U", USB_stack_status.curr_config);                
....................                usb_put_0len_0(); 
06E8:  MOVLB  1
06EA:  CLRF   x1C
06EC:  MOVLB  0
06EE:  RCALL  034A
06F0:  MOVLB  4
....................             } 
....................             break; 
06F2:  MOVLB  0
06F4:  BRA    06F8
....................  
....................       default: 
....................             usb_request_stall(); 
06F6:  RCALL  0350
....................             break; 
....................    } 
06F8:  GOTO   0924 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
06FC:  MOVFF  19,119
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
0700:  MOVLB  4
0702:  MOVF   x11,W
0704:  XORLW  00
0706:  MOVLB  0
0708:  BZ    0714
070A:  XORLW  0A
070C:  BZ    0726
070E:  XORLW  01
0710:  BZ    0776
0712:  BRA    07A2
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
0714:  MOVLB  4
0716:  CLRF   x50
....................             usb_ep0_tx_buffer[1]=0; 
0718:  CLRF   x51
....................             usb_request_send_response(2); 
071A:  MOVLW  02
071C:  MOVLB  1
071E:  MOVWF  x1C
0720:  MOVLB  0
0722:  RCALL  034A
....................             break; 
0724:  BRA    07A4
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
0726:  MOVLB  1
0728:  MOVF   x19,F
072A:  BZ    0770
072C:  MOVLW  01
072E:  SUBWF  x19,W
0730:  CLRF   03
0732:  MOVFF  FF2,11A
0736:  BCF    FF2.7
0738:  MOVLB  0
073A:  RCALL  0140
073C:  MOVLB  1
073E:  BTFSC  x1A.7
0740:  BSF    FF2.7
0742:  MOVWF  01
0744:  MOVLB  4
0746:  SUBWF  x14,W
0748:  BTFSS  FD8.0
074A:  BRA    0750
074C:  MOVLB  1
074E:  BRA    0770
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
0750:  CLRF   03
0752:  MOVF   x14,W
0754:  ADDLW  22
0756:  MOVWF  FE9
0758:  MOVLW  00
075A:  ADDWFC 03,W
075C:  MOVWF  FEA
075E:  MOVFF  FEF,450
....................                usb_request_send_response(1);; //send byte back 
0762:  MOVLW  01
0764:  MOVLB  1
0766:  MOVWF  x1C
0768:  MOVLB  0
076A:  RCALL  034A
....................             } 
076C:  BRA    0774
076E:  MOVLB  1
....................             else 
....................                usb_request_stall(); 
0770:  MOVLB  0
0772:  RCALL  0350
....................             break; 
0774:  BRA    07A4
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
0776:  MOVLB  1
0778:  MOVF   x19,F
077A:  BZ    079C
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
077C:  CLRF   03
077E:  MOVLB  4
0780:  MOVF   x14,W
0782:  ADDLW  22
0784:  MOVWF  FE9
0786:  MOVLW  00
0788:  ADDWFC 03,W
078A:  MOVWF  FEA
078C:  MOVFF  412,FEF
....................                usb_put_0len_0(); 
0790:  MOVLB  1
0792:  CLRF   x1C
0794:  MOVLB  0
0796:  RCALL  034A
....................             } 
0798:  BRA    07A0
079A:  MOVLB  1
....................             else 
....................                usb_request_stall(); 
079C:  MOVLB  0
079E:  RCALL  0350
....................             break; 
07A0:  BRA    07A4
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
07A2:  RCALL  0350
....................             break; 
....................    } 
07A4:  GOTO   0924 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
0894:  MOVFF  414,123
0898:  RCALL  0214
089A:  MOVF   01,F
089C:  BZ    08FA
....................       switch(usb_ep0_rx_buffer[1]) { 
089E:  MOVLB  4
08A0:  MOVF   x11,W
08A2:  XORLW  01
08A4:  MOVLB  0
08A6:  BZ    08B2
08A8:  XORLW  02
08AA:  BZ    08C2
08AC:  XORLW  03
08AE:  BZ    08D2
08B0:  BRA    08F8
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
08B2:  MOVFF  414,119
08B6:  BRA    07A8
....................                usb_put_0len_0(); 
08B8:  MOVLB  1
08BA:  CLRF   x1C
08BC:  MOVLB  0
08BE:  RCALL  034A
....................                break; 
08C0:  BRA    08FA
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
08C2:  MOVFF  414,119
08C6:  BRA    07F0
....................                      usb_put_0len_0(); 
08C8:  MOVLB  1
08CA:  CLRF   x1C
08CC:  MOVLB  0
08CE:  RCALL  034A
....................                      break; 
08D0:  BRA    08FA
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
08D2:  MOVLB  4
08D4:  CLRF   x50
....................                usb_ep0_tx_buffer[1]=0; 
08D6:  CLRF   x51
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
08D8:  MOVFF  414,119
08DC:  MOVLB  0
08DE:  BRA    083A
08E0:  MOVF   01,F
08E2:  BZ    08EC
....................                   usb_ep0_tx_buffer[0]=1; 
08E4:  MOVLW  01
08E6:  MOVLB  4
08E8:  MOVWF  x50
08EA:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
08EC:  MOVLW  02
08EE:  MOVLB  1
08F0:  MOVWF  x1C
08F2:  MOVLB  0
08F4:  RCALL  034A
....................                break; 
08F6:  BRA    08FA
....................  
....................          default: 
....................             usb_request_stall(); 
08F8:  RCALL  0350
....................             break; 
....................       } 
....................    } 
08FA:  GOTO   0924 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
03EC:  CLRF   20
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
03EE:  CLRF   1B
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
03F0:  MOVLB  4
03F2:  MOVF   x13,W
03F4:  XORLW  01
03F6:  MOVLB  0
03F8:  BZ    0404
03FA:  XORLW  03
03FC:  BZ    040E
03FE:  XORLW  01
0400:  BZ    0414
0402:  BRA    044A
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
0404:  MOVLW  12
0406:  MOVWF  21
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
0408:  MOVLW  03
040A:  MOVWF  1B
....................             break; 
040C:  BRA    044E
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
040E:  MOVLW  20
0410:  MOVWF  21
....................             break; 
0412:  BRA    044E
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
0414:  MOVLW  02
0416:  MOVWF  1B
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
0418:  CLRF   03
041A:  MOVLB  4
041C:  MOVF   x12,W
041E:  MOVFF  FF2,119
0422:  BCF    FF2.7
0424:  MOVLB  0
0426:  RCALL  0174
0428:  MOVLB  1
042A:  BTFSC  x19.7
042C:  BSF    FF2.7
042E:  MOVWF  20
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
0430:  CLRF   03
0432:  MOVF   20,W
0434:  MOVFF  FF2,119
0438:  BCF    FF2.7
043A:  MOVLB  0
043C:  RCALL  0188
043E:  MOVLB  1
0440:  BTFSC  x19.7
0442:  BSF    FF2.7
0444:  MOVWF  21
....................             break; 
0446:  MOVLB  0
0448:  BRA    044E
....................  
.................... #IF USB_HID_DEVICE || USB_CDC_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             //TODO does this work for multiple interfaces or multiple languages? 
....................             //usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][usb_ep0_rx_buffer[4]][usb_ep0_rx_buffer[2]]; 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][usb_ep0_rx_buffer[2]]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
044A:  RCALL  0350
....................             return; 
044C:  BRA    0466
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
044E:  MOVLB  4
0450:  MOVF   x17,F
0452:  BNZ   045E
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
0454:  MOVF   21,W
0456:  SUBWF  x16,W
0458:  BC    045E
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
045A:  MOVFF  416,21
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
045E:  MOVLW  01
0460:  MOVWF  18
....................    usb_copy_desc_seg_to_ep(); 
0462:  MOVLB  0
0464:  RCALL  0354
0466:  GOTO   06F8 (RETURN)
.................... } 
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
....................    USB_stack_status.curr_config=0;   // make sure current configuration is 0 
*
0B3C:  CLRF   19
....................  
....................    #ifdef __PIC__ 
....................    USB_stack_status.dev_req=NONE;  // no request pending 
0B3E:  CLRF   18
....................    usb_set_address(USB_address_pending); 
0B40:  MOVFF  1F,11A
0B44:  BRA    0B22
....................    #endif 
0B46:  GOTO   0B68 (RETURN)
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
*
0354:  MOVLB  1
0356:  CLRF   x1A
....................    unsigned int i=0; 
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
0358:  MOVF   21,F
035A:  BZ    03D6
035C:  MOVF   x1A,W
035E:  SUBLW  3F
0360:  BNC   03D6
....................    { 
....................       switch(USB_stack_status.getdesc_type) { 
0362:  MOVF   1B,W
0364:  XORLW  00
0366:  MOVLB  0
0368:  BZ    0374
036A:  XORLW  02
036C:  BZ    038C
036E:  XORLW  01
0370:  BZ    03A4
0372:  BRA    03BA
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
0374:  CLRF   03
0376:  MOVF   20,W
0378:  MOVFF  FF2,11C
037C:  BCF    FF2.7
037E:  RCALL  0110
0380:  MOVLB  1
0382:  BTFSC  x1C.7
0384:  BSF    FF2.7
0386:  MOVWF  x1B
....................             break; 
0388:  MOVLB  0
038A:  BRA    03BA
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
038C:  CLRF   03
038E:  MOVF   20,W
0390:  MOVFF  FF2,11C
0394:  BCF    FF2.7
0396:  RCALL  0188
0398:  MOVLB  1
039A:  BTFSC  x1C.7
039C:  BSF    FF2.7
039E:  MOVWF  x1B
....................             break; 
03A0:  MOVLB  0
03A2:  BRA    03BA
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
03A4:  CLRF   03
03A6:  MOVF   20,W
03A8:  MOVFF  FF2,11C
03AC:  BCF    FF2.7
03AE:  RCALL  0152
03B0:  MOVLB  1
03B2:  BTFSC  x1C.7
03B4:  BSF    FF2.7
03B6:  MOVWF  x1B
....................             break; 
03B8:  MOVLB  0
....................       } 
....................       usb_getdesc_ptr++; 
03BA:  INCF   20,F
....................       usb_getdesc_len--; 
03BC:  DECF   21,F
....................       usb_ep0_tx_buffer[i++]=c; 
03BE:  MOVLB  1
03C0:  MOVF   x1A,W
03C2:  INCF   x1A,F
03C4:  CLRF   03
03C6:  ADDLW  50
03C8:  MOVWF  FE9
03CA:  MOVLW  04
03CC:  ADDWFC 03,W
03CE:  MOVWF  FEA
03D0:  MOVFF  11B,FEF
03D4:  BRA    0358
....................    } 
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
03D6:  MOVF   21,F
03D8:  BNZ   03E2
03DA:  MOVF   x1A,W
03DC:  SUBLW  40
03DE:  BZ    03E2
....................          USB_stack_status.dev_req = NONE; 
03E0:  CLRF   18
....................    } 
....................  
....................    usb_request_send_response(i); 
03E2:  MOVFF  11A,11C
03E6:  MOVLB  0
03E8:  RCALL  034A
03EA:  RETURN 0
.................... } 
....................  
.................... #ENDIF 
....................  
.................... const int8 Lenbuf = 32;  
.................... int8 recbuf[Lenbuf]; 
.................... int8 rxubuf[Lenbuf]; 
....................  
.................... #define   LEVEL_L          !input(PIN_A0) 
.................... #define   LEVEL_H          !input(PIN_A1) 
....................  
.................... #define   SSR1_on          output_bit(PIN_C0,1) 
.................... #define   SSR1_off         output_bit(PIN_C0,0) 
....................  
.................... #define   SSR2_on          output_bit(PIN_C1,1) 
.................... #define   SSR2_off         output_bit(PIN_C1,0) 
....................  
.................... #define   Bomba_on          output_bit(PIN_C2,1) 
.................... #define   Bomba_off         output_bit(PIN_C2,0) 
....................  
.................... // Variables para Pt100 
.................... short conteoLlenado=0,envia=0,ajustaIP=0; 
.................... float d3=0.0; 
.................... float Temperatura=0.0,TempUSB=0.0,Temporal=0.0,Temperatura2=0.0,Humedad=0; 
.................... int16 tlevelL=0,tlevelH=0,tLlenado=0,tiempos=0,n=0; 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x20], txbuf[0x20],rxbuf[0x20];     //Buffer de memoria 
.................... int8 IP[4]={0,0,0,0}; 
.................... int8 Gateway[4]={0,0,0,0}; 
.................... int8 Subnet[4]={0,0,0,0}; 
.................... int8 MAC[6]={0,0x04,0xA3,0x06,0x07,0}; 
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
0D74:  BTFSC  FC7.5
0D76:  BRA    0D7E
0D78:  CLRF   xFA
0D7A:  BTFSC  FC7.2
0D7C:  BSF    xFA.7
0D7E:  MOVF   xFA,W
0D80:  INCF   xFA,F
0D82:  MOVWF  x86
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
0D84:  MOVF   x86,W
0D86:  SUBLW  80
0D88:  BNZ   0DA4
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
0D8A:  CLRF   03
0D8C:  MOVF   x87,W
0D8E:  ADDLW  A8
0D90:  MOVWF  FE9
0D92:  MOVLW  00
0D94:  ADDWFC 03,W
0D96:  MOVWF  FEA
0D98:  MOVFF  FEF,117
0D9C:  MOVFF  117,118
0DA0:  BRA    0D5C
....................    }else{                              //Sino es que hay dato en el bus I2C... 
0DA2:  BRA    0DD6
....................       incoming = i2c_read();           //... lo lee 
0DA4:  BCF    FC6.6
0DA6:  BTFSS  F9E.3
0DA8:  BRA    0DA6
0DAA:  MOVF   FC9,W
0DAC:  BSF    FC6.4
0DAE:  MOVLB  1
0DB0:  MOVWF  x16
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0DB2:  MOVLB  0
0DB4:  DECFSZ x86,W
0DB6:  BRA    0DBE
....................          posicion = incoming;          //Se guarda posición 
0DB8:  MOVFF  116,87
....................       }else if (fState == 2) {          //Información recibida corresponde al dato 
0DBC:  BRA    0DD6
0DBE:  MOVF   x86,W
0DC0:  SUBLW  02
0DC2:  BNZ   0DD6
....................          rxbuf[posicion] = incoming; 
0DC4:  CLRF   03
0DC6:  MOVF   x87,W
0DC8:  ADDLW  C8
0DCA:  MOVWF  FE9
0DCC:  MOVLW  00
0DCE:  ADDWFC 03,W
0DD0:  MOVWF  FEA
0DD2:  MOVFF  116,FEF
....................       } 
....................    } 
0DD6:  BCF    F9E.3
0DD8:  GOTO   006C
.................... } 
....................  
.................... void Lee_Vector(void){ 
....................    if(rxbuf[7]==255 && rxbuf[8]==255 && rxbuf[9]==128){ 
*
1286:  INCFSZ xCF,W
1288:  BRA    1460
128A:  INCFSZ xD0,W
128C:  BRA    1460
128E:  MOVF   xD1,W
1290:  SUBLW  80
1292:  BTFSS  FD8.2
1294:  BRA    1460
....................       Temporal=(float)rxbuf[1]; 
1296:  CLRF   xFC
1298:  MOVFF  C9,FB
129C:  RCALL  0E50
129E:  MOVFF  03,73
12A2:  MOVFF  02,72
12A6:  MOVFF  01,71
12AA:  MOVFF  00,70
....................       Temperatura=rxbuf[0]; 
12AE:  CLRF   xFC
12B0:  MOVFF  C8,FB
12B4:  RCALL  0E50
12B6:  MOVFF  03,6B
12BA:  MOVFF  02,6A
12BE:  MOVFF  01,69
12C2:  MOVFF  00,68
....................       Temperatura=Temperatura+(Temporal/10); 
12C6:  MOVFF  73,FE
12CA:  MOVFF  72,FD
12CE:  MOVFF  71,FC
12D2:  MOVFF  70,FB
12D6:  MOVLB  1
12D8:  CLRF   x02
12DA:  CLRF   x01
12DC:  MOVLW  20
12DE:  MOVWF  x00
12E0:  MOVLW  82
12E2:  MOVLB  0
12E4:  MOVWF  xFF
12E6:  RCALL  0E86
12E8:  BCF    FD8.1
12EA:  MOVFF  6B,FE
12EE:  MOVFF  6A,FD
12F2:  MOVFF  69,FC
12F6:  MOVFF  68,FB
12FA:  MOVFF  03,102
12FE:  MOVFF  02,101
1302:  MOVFF  01,100
1306:  MOVFF  00,FF
130A:  RCALL  1002
130C:  MOVFF  03,6B
1310:  MOVFF  02,6A
1314:  MOVFF  01,69
1318:  MOVFF  00,68
....................       Temporal=(float)rxbuf[3]; 
131C:  CLRF   xFC
131E:  MOVFF  CB,FB
1322:  RCALL  0E50
1324:  MOVFF  03,73
1328:  MOVFF  02,72
132C:  MOVFF  01,71
1330:  MOVFF  00,70
....................       Temperatura2=rxbuf[2]; 
1334:  CLRF   xFC
1336:  MOVFF  CA,FB
133A:  RCALL  0E50
133C:  MOVFF  03,77
1340:  MOVFF  02,76
1344:  MOVFF  01,75
1348:  MOVFF  00,74
....................       Temperatura2=Temperatura2+(Temporal/10); 
134C:  MOVFF  73,FE
1350:  MOVFF  72,FD
1354:  MOVFF  71,FC
1358:  MOVFF  70,FB
135C:  MOVLB  1
135E:  CLRF   x02
1360:  CLRF   x01
1362:  MOVLW  20
1364:  MOVWF  x00
1366:  MOVLW  82
1368:  MOVLB  0
136A:  MOVWF  xFF
136C:  RCALL  0E86
136E:  BCF    FD8.1
1370:  MOVFF  77,FE
1374:  MOVFF  76,FD
1378:  MOVFF  75,FC
137C:  MOVFF  74,FB
1380:  MOVFF  03,102
1384:  MOVFF  02,101
1388:  MOVFF  01,100
138C:  MOVFF  00,FF
1390:  RCALL  1002
1392:  MOVFF  03,77
1396:  MOVFF  02,76
139A:  MOVFF  01,75
139E:  MOVFF  00,74
....................       Temporal=(float)rxbuf[5]; 
13A2:  CLRF   xFC
13A4:  MOVFF  CD,FB
13A8:  RCALL  0E50
13AA:  MOVFF  03,73
13AE:  MOVFF  02,72
13B2:  MOVFF  01,71
13B6:  MOVFF  00,70
....................       Humedad=rxbuf[4]; 
13BA:  CLRF   xFC
13BC:  MOVFF  CC,FB
13C0:  RCALL  0E50
13C2:  MOVFF  03,7B
13C6:  MOVFF  02,7A
13CA:  MOVFF  01,79
13CE:  MOVFF  00,78
....................       Humedad=Humedad+(Temporal/10); 
13D2:  MOVFF  73,FE
13D6:  MOVFF  72,FD
13DA:  MOVFF  71,FC
13DE:  MOVFF  70,FB
13E2:  MOVLB  1
13E4:  CLRF   x02
13E6:  CLRF   x01
13E8:  MOVLW  20
13EA:  MOVWF  x00
13EC:  MOVLW  82
13EE:  MOVLB  0
13F0:  MOVWF  xFF
13F2:  RCALL  0E86
13F4:  BCF    FD8.1
13F6:  MOVFF  7B,FE
13FA:  MOVFF  7A,FD
13FE:  MOVFF  79,FC
1402:  MOVFF  78,FB
1406:  MOVFF  03,102
140A:  MOVFF  02,101
140E:  MOVFF  01,100
1412:  MOVFF  00,FF
1416:  RCALL  1002
1418:  MOVFF  03,7B
141C:  MOVFF  02,7A
1420:  MOVFF  01,79
1424:  MOVFF  00,78
....................       IP[0]=rxbuf[10]; 
1428:  MOVFF  D2,E8
....................       IP[1]=rxbuf[11]; 
142C:  MOVFF  D3,E9
....................       IP[2]=rxbuf[12]; 
1430:  MOVFF  D4,EA
....................       IP[3]=rxbuf[13]; 
1434:  MOVFF  D5,EB
....................       Subnet[0]=rxbuf[14]; 
1438:  MOVFF  D6,F0
....................       Subnet[1]=rxbuf[15]; 
143C:  MOVFF  D7,F1
....................       Subnet[2]=rxbuf[16]; 
1440:  MOVFF  D8,F2
....................       Subnet[3]=rxbuf[17]; 
1444:  MOVFF  D9,F3
....................       MAC[0]=rxbuf[18]; 
1448:  MOVFF  DA,F4
....................       MAC[1]=rxbuf[19]; 
144C:  MOVFF  DB,F5
....................       MAC[2]=rxbuf[20]; 
1450:  MOVFF  DC,F6
....................       MAC[3]=rxbuf[21]; 
1454:  MOVFF  DD,F7
....................       MAC[4]=rxbuf[22]; 
1458:  MOVFF  DE,F8
....................       MAC[5]=rxbuf[23]; 
145C:  MOVFF  DF,F9
....................    } 
1460:  RETURN 0
.................... } 
....................  
.................... void controlaTemperatura(){ 
....................    if(Temperatura2>=(Temperatura-1) && Temperatura2<(Temperatura+1)){ 
*
1584:  BSF    FD8.1
1586:  MOVFF  6B,FE
158A:  MOVFF  6A,FD
158E:  MOVFF  69,FC
1592:  MOVFF  68,FB
1596:  MOVLB  1
1598:  CLRF   x02
159A:  CLRF   x01
159C:  CLRF   x00
159E:  MOVLW  7F
15A0:  MOVLB  0
15A2:  MOVWF  xFF
15A4:  RCALL  1002
15A6:  MOVFF  03,FE
15AA:  MOVFF  02,FD
15AE:  MOVFF  01,FC
15B2:  MOVFF  00,FB
15B6:  MOVFF  77,102
15BA:  MOVFF  76,101
15BE:  MOVFF  75,100
15C2:  MOVFF  74,FF
15C6:  RCALL  14DE
15C8:  BC    15CC
15CA:  BNZ   161C
15CC:  BCF    FD8.1
15CE:  MOVFF  6B,FE
15D2:  MOVFF  6A,FD
15D6:  MOVFF  69,FC
15DA:  MOVFF  68,FB
15DE:  MOVLB  1
15E0:  CLRF   x02
15E2:  CLRF   x01
15E4:  CLRF   x00
15E6:  MOVLW  7F
15E8:  MOVLB  0
15EA:  MOVWF  xFF
15EC:  RCALL  1002
15EE:  MOVFF  77,FE
15F2:  MOVFF  76,FD
15F6:  MOVFF  75,FC
15FA:  MOVFF  74,FB
15FE:  MOVFF  03,102
1602:  MOVFF  02,101
1606:  MOVFF  01,100
160A:  MOVFF  00,FF
160E:  RCALL  14DE
1610:  BNC   161C
....................       SSR1_off;SSR2_off;//apaga 
1612:  BCF    F8B.0
1614:  BCF    F94.0
1616:  BCF    F8B.1
1618:  BCF    F94.1
....................    }else{ 
161A:  BRA    1624
....................       SSR1_on;SSR2_off;//Enfria 
161C:  BSF    F8B.0
161E:  BCF    F94.0
1620:  BCF    F8B.1
1622:  BCF    F94.1
....................    } 
1624:  GOTO   1B32 (RETURN)
.................... } 
....................  
.................... #int_TIMER1  
.................... void temp1s(void){ 
....................    set_timer1(5536); // Se repite cada 5ms  
*
0DDC:  MOVLW  15
0DDE:  MOVWF  FCF
0DE0:  MOVLW  A0
0DE2:  MOVWF  FCE
....................    if(LEVEL_L){ 
0DE4:  BSF    F92.0
0DE6:  BTFSC  F80.0
0DE8:  BRA    0E00
....................       if(tlevelL<3000) 
0DEA:  MOVF   x7D,W
0DEC:  SUBLW  0B
0DEE:  BNC   0DFE
0DF0:  BNZ   0DF8
0DF2:  MOVF   x7C,W
0DF4:  SUBLW  B7
0DF6:  BNC   0DFE
....................          tlevelL++; 
0DF8:  INCF   x7C,F
0DFA:  BTFSC  FD8.2
0DFC:  INCF   x7D,F
....................    }else{ 
0DFE:  BRA    0E04
....................       tlevelL=0; 
0E00:  CLRF   x7D
0E02:  CLRF   x7C
....................    } 
....................        
....................    if(LEVEL_H){ 
0E04:  BSF    F92.1
0E06:  BTFSC  F80.1
0E08:  BRA    0E20
....................       if(tlevelH<3000) 
0E0A:  MOVF   x7F,W
0E0C:  SUBLW  0B
0E0E:  BNC   0E1E
0E10:  BNZ   0E18
0E12:  MOVF   x7E,W
0E14:  SUBLW  B7
0E16:  BNC   0E1E
....................          tlevelH++; 
0E18:  INCF   x7E,F
0E1A:  BTFSC  FD8.2
0E1C:  INCF   x7F,F
....................    }else{ 
0E1E:  BRA    0E24
....................       tlevelH=0;    
0E20:  CLRF   x7F
0E22:  CLRF   x7E
....................    } 
....................    tiempos++; 
0E24:  INCF   x82,F
0E26:  BTFSC  FD8.2
0E28:  INCF   x83,F
....................    if(tiempos>=200){ 
0E2A:  MOVF   x83,F
0E2C:  BNZ   0E34
0E2E:  MOVF   x82,W
0E30:  SUBLW  C7
0E32:  BC    0E4A
....................       tiempos=0; 
0E34:  CLRF   x83
0E36:  CLRF   x82
....................       envia=1; 
0E38:  BSF    x63.1
....................       if(conteoLlenado){ 
0E3A:  BTFSS  x63.0
0E3C:  BRA    0E46
....................          tLlenado++; 
0E3E:  INCF   x80,F
0E40:  BTFSC  FD8.2
0E42:  INCF   x81,F
....................       }else{ 
0E44:  BRA    0E4A
....................          tLlenado=0; 
0E46:  CLRF   x81
0E48:  CLRF   x80
....................       } 
....................    } 
0E4A:  BCF    F9E.0
0E4C:  GOTO   006C
.................... } 
.................... void main(){ 
*
1986:  CLRF   FF8
1988:  BCF    FD0.7
198A:  BSF    07.7
198C:  BSF    F93.1
198E:  BSF    F93.0
1990:  MOVLW  B0
1992:  MOVWF  FC8
1994:  MOVLW  36
1996:  MOVWF  FC6
1998:  BSF    FC5.0
199A:  CLRF   17
199C:  BSF    FB8.3
199E:  MOVLW  D4
19A0:  MOVWF  FAF
19A2:  MOVLW  04
19A4:  MOVWF  FB0
19A6:  MOVLW  A6
19A8:  MOVWF  FAC
19AA:  MOVLW  90
19AC:  MOVWF  FAB
19AE:  CLRF   1D
19B0:  CLRF   21
19B2:  BCF    x63.0
19B4:  BCF    x63.1
19B6:  BCF    x63.2
19B8:  CLRF   x67
19BA:  CLRF   x66
19BC:  CLRF   x65
19BE:  CLRF   x64
19C0:  CLRF   x6B
19C2:  CLRF   x6A
19C4:  CLRF   x69
19C6:  CLRF   x68
19C8:  CLRF   x6F
19CA:  CLRF   x6E
19CC:  CLRF   x6D
19CE:  CLRF   x6C
19D0:  CLRF   x73
19D2:  CLRF   x72
19D4:  CLRF   x71
19D6:  CLRF   x70
19D8:  CLRF   x77
19DA:  CLRF   x76
19DC:  CLRF   x75
19DE:  CLRF   x74
19E0:  CLRF   x7B
19E2:  CLRF   x7A
19E4:  CLRF   x79
19E6:  CLRF   x78
19E8:  CLRF   x7D
19EA:  CLRF   x7C
19EC:  CLRF   x7F
19EE:  CLRF   x7E
19F0:  CLRF   x81
19F2:  CLRF   x80
19F4:  CLRF   x83
19F6:  CLRF   x82
19F8:  CLRF   x85
19FA:  CLRF   x84
19FC:  MOVLW  03
19FE:  MOVWF  xFA
1A00:  MOVF   FC1,W
1A02:  ANDLW  C0
1A04:  IORLW  0F
1A06:  MOVWF  FC1
1A08:  MOVLW  07
1A0A:  MOVWF  FB4
1A0C:  CLRF   xE8
1A0E:  CLRF   xE9
1A10:  CLRF   xEA
1A12:  CLRF   xEB
1A14:  CLRF   xEC
1A16:  CLRF   xED
1A18:  CLRF   xEE
1A1A:  CLRF   xEF
1A1C:  CLRF   xF0
1A1E:  CLRF   xF1
1A20:  CLRF   xF2
1A22:  CLRF   xF3
1A24:  CLRF   xF4
1A26:  MOVLW  04
1A28:  MOVWF  xF5
1A2A:  MOVLW  A3
1A2C:  MOVWF  xF6
1A2E:  MOVLW  06
1A30:  MOVWF  xF7
1A32:  MOVLW  07
1A34:  MOVWF  xF8
1A36:  CLRF   xF9
....................    fState = 0; 
1A38:  CLRF   x86
....................    for (posicion=0;posicion<0x10;posicion++){ 
1A3A:  CLRF   x87
1A3C:  MOVF   x87,W
1A3E:  SUBLW  0F
1A40:  BNC   1A76
....................       buffer[posicion] = 0x00; 
1A42:  CLRF   03
1A44:  MOVF   x87,W
1A46:  ADDLW  88
1A48:  MOVWF  FE9
1A4A:  MOVLW  00
1A4C:  ADDWFC 03,W
1A4E:  MOVWF  FEA
1A50:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
1A52:  CLRF   03
1A54:  MOVF   x87,W
1A56:  ADDLW  A8
1A58:  MOVWF  FE9
1A5A:  MOVLW  00
1A5C:  ADDWFC 03,W
1A5E:  MOVWF  FEA
1A60:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
1A62:  CLRF   03
1A64:  MOVF   x87,W
1A66:  ADDLW  C8
1A68:  MOVWF  FE9
1A6A:  MOVLW  00
1A6C:  ADDWFC 03,W
1A6E:  MOVWF  FEA
1A70:  CLRF   FEF
1A72:  INCF   x87,F
1A74:  BRA    1A3C
....................    } 
....................     
....................    Lee_Vector(); 
1A76:  RCALL  1286
....................    enable_interrupts(INT_SSP); 
1A78:  BSF    F9D.3
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1A7A:  MOVLW  85
1A7C:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1A7E:  BSF    F9D.0
....................    usb_init(); 
1A80:  BRA    14D0
....................    usb_task(); 
1A82:  RCALL  14AE
....................    setup_wdt(WDT_ON); 
1A84:  BSF    FD1.0
....................    enable_interrupts(global); 
1A86:  MOVLW  C0
1A88:  IORWF  FF2,F
....................    Bomba_off; 
1A8A:  BCF    F8B.2
1A8C:  BCF    F94.2
....................    tLevelL=3000; 
1A8E:  MOVLW  0B
1A90:  MOVWF  x7D
1A92:  MOVLW  B8
1A94:  MOVWF  x7C
....................  
.................... while(true){ 
....................    Lee_Vector(); 
1A96:  CALL   1286
....................    restart_wdt(); 
1A9A:  CLRWDT
....................     
....................    if(tLevelL>400){ 
1A9C:  MOVF   x7D,W
1A9E:  SUBLW  00
1AA0:  BC    1AB2
1AA2:  XORLW  FF
1AA4:  BNZ   1AAC
1AA6:  MOVF   x7C,W
1AA8:  SUBLW  90
1AAA:  BC    1AB2
....................       txbuf[1]=5;//Nivel Bajo con agua 
1AAC:  MOVLW  05
1AAE:  MOVWF  xA9
....................    }else{ 
1AB0:  BRA    1AB6
....................       txbuf[1]=10;//Nivel Bajo sin agua 
1AB2:  MOVLW  0A
1AB4:  MOVWF  xA9
....................    } 
....................     
....................    if(tLevelH>400){ 
1AB6:  MOVF   x7F,W
1AB8:  SUBLW  00
1ABA:  BC    1ACC
1ABC:  XORLW  FF
1ABE:  BNZ   1AC6
1AC0:  MOVF   x7E,W
1AC2:  SUBLW  90
1AC4:  BC    1ACC
....................       txbuf[2]=5;//Nivel Alto con agua 
1AC6:  MOVLW  05
1AC8:  MOVWF  xAA
....................    }else{ 
1ACA:  BRA    1AD0
....................       txbuf[2]=10;//Nivel Alto sin agua 
1ACC:  MOVLW  0A
1ACE:  MOVWF  xAA
....................    } 
....................     
....................    if(input_state(PIN_C2)){ 
1AD0:  BTFSS  F82.2
1AD2:  BRA    1ADA
....................       txbuf[3]=5;//Bomba Activada 
1AD4:  MOVLW  05
1AD6:  MOVWF  xAB
....................    }else{ 
1AD8:  BRA    1ADE
....................       txbuf[3]=10;//Bomba desactivada 
1ADA:  MOVLW  0A
1ADC:  MOVWF  xAB
....................    } 
....................     
....................    if(tLevelL>400){ 
1ADE:  MOVF   x7D,W
1AE0:  SUBLW  00
1AE2:  BC    1B34
1AE4:  XORLW  FF
1AE6:  BNZ   1AEE
1AE8:  MOVF   x7C,W
1AEA:  SUBLW  90
1AEC:  BC    1B34
....................       if(Temperatura2>2.0 && Temperatura2<50.0) 
1AEE:  CLRF   xFE
1AF0:  CLRF   xFD
1AF2:  CLRF   xFC
1AF4:  MOVLW  80
1AF6:  MOVWF  xFB
1AF8:  MOVFF  77,102
1AFC:  MOVFF  76,101
1B00:  MOVFF  75,100
1B04:  MOVFF  74,FF
1B08:  RCALL  14DE
1B0A:  BNC   1B32
1B0C:  MOVFF  77,FE
1B10:  MOVFF  76,FD
1B14:  MOVFF  75,FC
1B18:  MOVFF  74,FB
1B1C:  MOVLB  1
1B1E:  CLRF   x02
1B20:  CLRF   x01
1B22:  MOVLW  48
1B24:  MOVWF  x00
1B26:  MOVLW  84
1B28:  MOVLB  0
1B2A:  MOVWF  xFF
1B2C:  RCALL  14DE
1B2E:  BNC   1B32
....................          controlaTemperatura(); 
1B30:  BRA    1584
....................    }else{ 
1B32:  BRA    1B3C
....................       SSR1_off;SSR2_off;//Apaga 
1B34:  BCF    F8B.0
1B36:  BCF    F94.0
1B38:  BCF    F8B.1
1B3A:  BCF    F94.1
....................    } 
....................     
....................    if(tLlenado<300){    
1B3C:  MOVF   x81,W
1B3E:  SUBLW  01
1B40:  BNC   1B70
1B42:  BNZ   1B4A
1B44:  MOVF   x80,W
1B46:  SUBLW  2B
1B48:  BNC   1B70
....................       if(tLevelL==0){ 
1B4A:  MOVF   x7C,F
1B4C:  BNZ   1B5A
1B4E:  MOVF   x7D,F
1B50:  BNZ   1B5A
....................          Bomba_on; 
1B52:  BSF    F8B.2
1B54:  BCF    F94.2
....................          conteoLlenado=1; 
1B56:  BSF    x63.0
....................       }else{ 
1B58:  BRA    1B70
....................          if(tlevelH>=400){ 
1B5A:  MOVF   x7F,W
1B5C:  SUBLW  00
1B5E:  BC    1B70
1B60:  XORLW  FF
1B62:  BNZ   1B6A
1B64:  MOVF   x7E,W
1B66:  SUBLW  8F
1B68:  BC    1B70
....................             Bomba_off; 
1B6A:  BCF    F8B.2
1B6C:  BCF    F94.2
....................             conteoLlenado=0; 
1B6E:  BCF    x63.0
....................          } 
....................       } 
....................    } 
....................     
....................    if(tLlenado>=300){ 
1B70:  MOVF   x81,W
1B72:  SUBLW  00
1B74:  BC    1B8A
1B76:  XORLW  FF
1B78:  BNZ   1B80
1B7A:  MOVF   x80,W
1B7C:  SUBLW  2B
1B7E:  BC    1B8A
....................       txbuf[0]=10;//Alarma de llenado 
1B80:  MOVLW  0A
1B82:  MOVWF  xA8
....................       Bomba_off; 
1B84:  BCF    F8B.2
1B86:  BCF    F94.2
....................    }else if(tlevelH>=600){ 
1B88:  BRA    1BB0
1B8A:  MOVF   x7F,W
1B8C:  SUBLW  01
1B8E:  BC    1BA0
1B90:  XORLW  FF
1B92:  BNZ   1B9A
1B94:  MOVF   x7E,W
1B96:  SUBLW  57
1B98:  BC    1BA0
....................       txbuf[0]=20;//indicacion de que esta lleno el humidificador 
1B9A:  MOVLW  14
1B9C:  MOVWF  xA8
....................    }else if(tlevelL==0){ 
1B9E:  BRA    1BB0
1BA0:  MOVF   x7C,F
1BA2:  BNZ   1BAE
1BA4:  MOVF   x7D,F
1BA6:  BNZ   1BAE
....................       txbuf[0]=30;//indicacion de que esta sin agua el humidificador 
1BA8:  MOVLW  1E
1BAA:  MOVWF  xA8
....................    }else{ 
1BAC:  BRA    1BB0
....................       txbuf[0]=0;//indicacion de que esta sin agua el humidificador 
1BAE:  CLRF   xA8
....................    } 
....................     
....................    if(envia){ 
1BB0:  BTFSS  x63.1
1BB2:  BRA    1D22
....................       envia=0; 
1BB4:  BCF    x63.1
....................          putc(0x65);//[0] 
1BB6:  MOVLW  65
1BB8:  RCALL  1628
....................          delay_us(10); 
1BBA:  MOVLW  27
1BBC:  MOVWF  00
1BBE:  DECFSZ 00,F
1BC0:  BRA    1BBE
1BC2:  BRA    1BC4
....................          putc(0xff);//[1] 
1BC4:  MOVLW  FF
1BC6:  RCALL  1628
....................          delay_us(10); 
1BC8:  MOVLW  27
1BCA:  MOVWF  00
1BCC:  DECFSZ 00,F
1BCE:  BRA    1BCC
1BD0:  BRA    1BD2
....................          putc(0xff);//[2] 
1BD2:  MOVLW  FF
1BD4:  RCALL  1628
....................          delay_us(10); 
1BD6:  MOVLW  27
1BD8:  MOVWF  00
1BDA:  DECFSZ 00,F
1BDC:  BRA    1BDA
1BDE:  BRA    1BE0
....................          putc(rxbuf[0]);//[3] 
1BE0:  MOVF   xC8,W
1BE2:  RCALL  1628
....................          delay_us(10); 
1BE4:  MOVLW  27
1BE6:  MOVWF  00
1BE8:  DECFSZ 00,F
1BEA:  BRA    1BE8
1BEC:  BRA    1BEE
....................          putc(rxbuf[1]);//[4] 
1BEE:  MOVF   xC9,W
1BF0:  RCALL  1628
....................          delay_us(10); 
1BF2:  MOVLW  27
1BF4:  MOVWF  00
1BF6:  DECFSZ 00,F
1BF8:  BRA    1BF6
1BFA:  BRA    1BFC
....................          putc(rxbuf[2]);//[5] 
1BFC:  MOVF   xCA,W
1BFE:  RCALL  1628
....................          delay_us(10); 
1C00:  MOVLW  27
1C02:  MOVWF  00
1C04:  DECFSZ 00,F
1C06:  BRA    1C04
1C08:  BRA    1C0A
....................          putc(rxbuf[3]);//[6] 
1C0A:  MOVF   xCB,W
1C0C:  RCALL  1628
....................          delay_us(10); 
1C0E:  MOVLW  27
1C10:  MOVWF  00
1C12:  DECFSZ 00,F
1C14:  BRA    1C12
1C16:  BRA    1C18
....................          putc(rxbuf[4]);//[7] 
1C18:  MOVF   xCC,W
1C1A:  RCALL  1628
....................          delay_us(10); 
1C1C:  MOVLW  27
1C1E:  MOVWF  00
1C20:  DECFSZ 00,F
1C22:  BRA    1C20
1C24:  BRA    1C26
....................          putc(rxbuf[5]);//[8] 
1C26:  MOVF   xCD,W
1C28:  RCALL  1628
....................          delay_us(10); 
1C2A:  MOVLW  27
1C2C:  MOVWF  00
1C2E:  DECFSZ 00,F
1C30:  BRA    1C2E
1C32:  BRA    1C34
....................          putc(0x00);//[9] 
1C34:  MOVLW  00
1C36:  RCALL  1628
....................          delay_us(10); 
1C38:  MOVLW  27
1C3A:  MOVWF  00
1C3C:  DECFSZ 00,F
1C3E:  BRA    1C3C
1C40:  BRA    1C42
....................          putc(0xff);//[10] 
1C42:  MOVLW  FF
1C44:  RCALL  1628
....................          delay_us(10); 
1C46:  MOVLW  27
1C48:  MOVWF  00
1C4A:  DECFSZ 00,F
1C4C:  BRA    1C4A
1C4E:  BRA    1C50
....................          putc(IP[0]);//[11] 
1C50:  MOVF   xE8,W
1C52:  RCALL  1628
....................          delay_us(10); 
1C54:  MOVLW  27
1C56:  MOVWF  00
1C58:  DECFSZ 00,F
1C5A:  BRA    1C58
1C5C:  BRA    1C5E
....................          putc(IP[1]);//[12] 
1C5E:  MOVF   xE9,W
1C60:  RCALL  1628
....................          delay_us(10); 
1C62:  MOVLW  27
1C64:  MOVWF  00
1C66:  DECFSZ 00,F
1C68:  BRA    1C66
1C6A:  BRA    1C6C
....................          putc(IP[2]);//[13] 
1C6C:  MOVF   xEA,W
1C6E:  RCALL  1628
....................          delay_us(10); 
1C70:  MOVLW  27
1C72:  MOVWF  00
1C74:  DECFSZ 00,F
1C76:  BRA    1C74
1C78:  BRA    1C7A
....................          putc(IP[3]);//[14] 
1C7A:  MOVF   xEB,W
1C7C:  RCALL  1628
....................          delay_us(10); 
1C7E:  MOVLW  27
1C80:  MOVWF  00
1C82:  DECFSZ 00,F
1C84:  BRA    1C82
1C86:  BRA    1C88
....................          putc(Subnet[0]);//[15] 
1C88:  MOVF   xF0,W
1C8A:  RCALL  1628
....................          delay_us(10); 
1C8C:  MOVLW  27
1C8E:  MOVWF  00
1C90:  DECFSZ 00,F
1C92:  BRA    1C90
1C94:  BRA    1C96
....................          putc(Subnet[1]);//[16] 
1C96:  MOVF   xF1,W
1C98:  RCALL  1628
....................          delay_us(10); 
1C9A:  MOVLW  27
1C9C:  MOVWF  00
1C9E:  DECFSZ 00,F
1CA0:  BRA    1C9E
1CA2:  BRA    1CA4
....................          putc(Subnet[2]);//[17] 
1CA4:  MOVF   xF2,W
1CA6:  RCALL  1628
....................          delay_us(10); 
1CA8:  MOVLW  27
1CAA:  MOVWF  00
1CAC:  DECFSZ 00,F
1CAE:  BRA    1CAC
1CB0:  BRA    1CB2
....................          putc(Subnet[3]);//[18] 
1CB2:  MOVF   xF3,W
1CB4:  RCALL  1628
....................          delay_us(10); 
1CB6:  MOVLW  27
1CB8:  MOVWF  00
1CBA:  DECFSZ 00,F
1CBC:  BRA    1CBA
1CBE:  BRA    1CC0
....................          putc(0x01);//[19] 
1CC0:  MOVLW  01
1CC2:  RCALL  1628
....................          delay_us(10); 
1CC4:  MOVLW  27
1CC6:  MOVWF  00
1CC8:  DECFSZ 00,F
1CCA:  BRA    1CC8
1CCC:  BRA    1CCE
....................          putc(MAC[0]);//[20] 
1CCE:  MOVF   xF4,W
1CD0:  RCALL  1628
....................          delay_us(10); 
1CD2:  MOVLW  27
1CD4:  MOVWF  00
1CD6:  DECFSZ 00,F
1CD8:  BRA    1CD6
1CDA:  BRA    1CDC
....................          putc(MAC[1]);//[21] 
1CDC:  MOVF   xF5,W
1CDE:  RCALL  1628
....................          delay_us(10); 
1CE0:  MOVLW  27
1CE2:  MOVWF  00
1CE4:  DECFSZ 00,F
1CE6:  BRA    1CE4
1CE8:  BRA    1CEA
....................          putc(MAC[2]);//[22] 
1CEA:  MOVF   xF6,W
1CEC:  RCALL  1628
....................          delay_us(10); 
1CEE:  MOVLW  27
1CF0:  MOVWF  00
1CF2:  DECFSZ 00,F
1CF4:  BRA    1CF2
1CF6:  BRA    1CF8
....................          putc(MAC[3]);//[23] 
1CF8:  MOVF   xF7,W
1CFA:  RCALL  1628
....................          delay_us(10); 
1CFC:  MOVLW  27
1CFE:  MOVWF  00
1D00:  DECFSZ 00,F
1D02:  BRA    1D00
1D04:  BRA    1D06
....................          putc(MAC[4]);//[24] 
1D06:  MOVF   xF8,W
1D08:  RCALL  1628
....................          delay_us(10); 
1D0A:  MOVLW  27
1D0C:  MOVWF  00
1D0E:  DECFSZ 00,F
1D10:  BRA    1D0E
1D12:  BRA    1D14
....................          putc(MAC[5]);//[25] 
1D14:  MOVF   xF9,W
1D16:  RCALL  1628
....................          delay_us(10); 
1D18:  MOVLW  27
1D1A:  MOVWF  00
1D1C:  DECFSZ 00,F
1D1E:  BRA    1D1C
1D20:  BRA    1D22
....................        
....................       //printf("T%2.1f,T2%2.1f,H%2.1f\r\n",Temperatura,Temperatura2,Humedad); 
....................    } 
.................... //_Menu_De_USB--------------------------------------------------------------------------------------------------------------------------------------------     
.................... if(usb_enumerated()){ 
1D22:  BRA    1630
1D24:  MOVF   01,F
1D26:  BTFSC  FD8.2
1D28:  BRA    1E2C
....................     
....................    if(usb_kbhit(1)){ 
1D2A:  MOVLW  01
1D2C:  MOVWF  xFB
1D2E:  BRA    1638
1D30:  MOVF   01,F
1D32:  BZ    1D46
....................       usb_get_packet(1, rxubuf, Lenbuf); 
1D34:  MOVLW  01
1D36:  MOVWF  xFB
1D38:  CLRF   xFD
1D3A:  MOVLW  43
1D3C:  MOVWF  xFC
1D3E:  CLRF   xFF
1D40:  MOVLW  20
1D42:  MOVWF  xFE
1D44:  BRA    1736
....................    } 
....................     
....................    TempUSB=Temperatura; 
1D46:  MOVFF  6B,6F
1D4A:  MOVFF  6A,6E
1D4E:  MOVFF  69,6D
1D52:  MOVFF  68,6C
....................    recbuf[0]=rxbuf[0]; 
1D56:  MOVFF  C8,23
....................    recbuf[1]=120; 
1D5A:  MOVLW  78
1D5C:  MOVWF  24
....................    d3=TempUSB-(int8)TempUSB; 
1D5E:  MOVFF  6F,FE
1D62:  MOVFF  6E,FD
1D66:  MOVFF  6D,FC
1D6A:  MOVFF  6C,FB
1D6E:  BRA    177C
1D70:  CLRF   xFC
1D72:  MOVFF  01,FB
1D76:  CALL   0E50
1D7A:  BSF    FD8.1
1D7C:  MOVFF  6F,FE
1D80:  MOVFF  6E,FD
1D84:  MOVFF  6D,FC
1D88:  MOVFF  6C,FB
1D8C:  MOVFF  03,102
1D90:  MOVFF  02,101
1D94:  MOVFF  01,100
1D98:  MOVFF  00,FF
1D9C:  CALL   1002
1DA0:  MOVFF  03,67
1DA4:  MOVFF  02,66
1DA8:  MOVFF  01,65
1DAC:  MOVFF  00,64
....................    d3=d3*10.0; 
1DB0:  MOVFF  67,FE
1DB4:  MOVFF  66,FD
1DB8:  MOVFF  65,FC
1DBC:  MOVFF  64,FB
1DC0:  MOVLB  1
1DC2:  CLRF   x02
1DC4:  CLRF   x01
1DC6:  MOVLW  20
1DC8:  MOVWF  x00
1DCA:  MOVLW  82
1DCC:  MOVLB  0
1DCE:  MOVWF  xFF
1DD0:  BRA    17B6
1DD2:  MOVFF  03,67
1DD6:  MOVFF  02,66
1DDA:  MOVFF  01,65
1DDE:  MOVFF  00,64
....................    recbuf[2]=rxbuf[1]; 
1DE2:  MOVFF  C9,25
....................    recbuf[3]=rxbuf[2]; 
1DE6:  MOVFF  CA,26
....................    recbuf[4]=rxbuf[3]; 
1DEA:  MOVFF  CB,27
....................    recbuf[5]=rxbuf[4];     
1DEE:  MOVFF  CC,28
....................    recbuf[6]=rxbuf[5]; 
1DF2:  MOVFF  CD,29
....................    recbuf[7]=IP[0]; 
1DF6:  MOVFF  E8,2A
....................    recbuf[8]=IP[1]; 
1DFA:  MOVFF  E9,2B
....................    recbuf[9]=IP[2]; 
1DFE:  MOVFF  EA,2C
....................    recbuf[10]=IP[3];      
1E02:  MOVFF  EB,2D
....................    recbuf[11]=n; 
1E06:  MOVFF  84,2E
....................    recbuf[13]=rxbuf[24]; 
1E0A:  MOVFF  E0,30
....................    recbuf[14]=rxbuf[25]; 
1E0E:  MOVFF  E1,31
....................                  
....................     usb_put_packet(1, recbuf, Lenbuf, USB_DTS_TOGGLE); //y enviamos el mismo paquete de tamaño 32bytes del EP1 al PC 
1E12:  MOVLW  01
1E14:  MOVWF  xFB
1E16:  CLRF   xFD
1E18:  MOVLW  23
1E1A:  MOVWF  xFC
1E1C:  CLRF   xFF
1E1E:  MOVLW  20
1E20:  MOVWF  xFE
1E22:  MOVLW  02
1E24:  MOVLB  1
1E26:  MOVWF  x00
1E28:  MOVLB  0
1E2A:  BRA    18DC
.................... } 
1E2C:  BRA    1A96
.................... //_--------------------------------------------------------------------------------------------------------------------------------------------------------     
....................    } 
.................... } 
1E2E:  SLEEP 

Configuration Fuses:
   Word  1: CE24   PLL5 CPUDIV1 USBDIV HSPLL FCMEN IESO
   Word  2: 193E   PUT BROWNOUT BORV21 VREGEN WDT WDT4096
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
