C L "MAIN" 0 190 3 "FUNCTION"
D G "__PCH__" 0 1743 ""5.015""
D G "__DEVICE__" 0 1743 "4685"
D G "__DATE__" 0 1743 ""08-sept.-22""
D G "__TIME__" 0 1743 ""11:59:50"" "Falta crear menu de ajuste de variables y de norma CFR21"
c L "set_tris_a" 1 1 6 "FUNCTION"
v L "value" 1 43 "int8" `54 
f B "set_tris_a" 1 43 "void(int8 value)" `53 
v L "value" 1 44 "int8" `56 
f B "set_tris_b" 1 44 "void(int8 value)" `55 
v L "value" 1 45 "int8" `58 
f B "set_tris_c" 1 45 "void(int8 value)" `57 
v L "value" 1 46 "int8" `60 
f B "set_tris_d" 1 46 "void(int8 value)" `59 
v L "value" 1 47 "int8" `62 
f B "set_tris_e" 1 47 "void(int8 value)" `61 
f B "get_tris_a" 1 48 "int8()" `63 
f B "get_tris_b" 1 49 "int8()" `64 
f B "get_tris_c" 1 50 "int8()" `65 
f B "get_tris_d" 1 51 "int8()" `66 
f B "get_tris_e" 1 52 "int8()" `67 
v L "value" 1 53 "int8" `69 
f B "output_a" 1 53 "void(int8 value)" `68 
v L "value" 1 54 "int8" `71 
f B "output_b" 1 54 "void(int8 value)" `70 
v L "value" 1 55 "int8" `73 
f B "output_c" 1 55 "void(int8 value)" `72 
v L "value" 1 56 "int8" `75 
f B "output_d" 1 56 "void(int8 value)" `74 
v L "value" 1 57 "int8" `77 
f B "output_e" 1 57 "void(int8 value)" `76 
f B "input_a" 1 58 "int8()" `78 
f B "input_b" 1 59 "int8()" `79 
f B "input_c" 1 60 "int8()" `80 
f B "input_d" 1 61 "int8()" `81 
f B "input_e" 1 62 "int8()" `82 
f B "input_change_a" 1 63 "int8()" `83 
f B "input_change_b" 1 64 "int8()" `84 
f B "input_change_c" 1 65 "int8()" `85 
f B "input_change_d" 1 66 "int8()" `86 
f B "input_change_e" 1 67 "int8()" `87 
v L "pin" 1 68 "int16" `89 
f B "input" 1 68 "int8(int16 pin)" `88 
v L "pin" 1 69 "int16" `91 
f B "input_state" 1 69 "int8(int16 pin)" `90 
v L "pin" 1 70 "int16" `93 
f B "output_low" 1 70 "void(int16 pin)" `92 
v L "pin" 1 71 "int16" `95 
f B "output_high" 1 71 "void(int16 pin)" `94 
v L "pin" 1 72 "int16" `97 
f B "output_toggle" 1 72 "void(int16 pin)" `96 
v L "pin" 1 73 "int16" `99 
v L "level" 1 73 "int8" `100 
f B "output_bit" 1 73 "void(int16 pin,int8 level)" `98 
v L "pin" 1 74 "int16" `102 
f B "output_float" 1 74 "void(int16 pin)" `101 
v L "pin" 1 75 "int16" `104 
f B "output_drive" 1 75 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 79 "31744"
d G "PIN_A1" 1 80 "31745"
d G "PIN_A2" 1 81 "31746"
d G "PIN_A3" 1 82 "31747"
d G "PIN_A4" 1 83 "31748"
d G "PIN_A5" 1 84 "31749"
d G "PIN_A6" 1 85 "31750"
d G "PIN_A7" 1 86 "31751"
d G "PIN_B0" 1 88 "31752"
d G "PIN_B1" 1 89 "31753"
d G "PIN_B2" 1 90 "31754"
d G "PIN_B3" 1 91 "31755"
d G "PIN_B4" 1 92 "31756"
d G "PIN_B5" 1 93 "31757"
d G "PIN_B6" 1 94 "31758"
d G "PIN_B7" 1 95 "31759"
d G "PIN_C0" 1 97 "31760"
d G "PIN_C1" 1 98 "31761"
d G "PIN_C2" 1 99 "31762"
d G "PIN_C3" 1 100 "31763"
d G "PIN_C4" 1 101 "31764"
d G "PIN_C5" 1 102 "31765"
d G "PIN_C6" 1 103 "31766"
d G "PIN_C7" 1 104 "31767"
d G "PIN_D0" 1 106 "31768"
d G "PIN_D1" 1 107 "31769"
d G "PIN_D2" 1 108 "31770"
d G "PIN_D3" 1 109 "31771"
d G "PIN_D4" 1 110 "31772"
d G "PIN_D5" 1 111 "31773"
d G "PIN_D6" 1 112 "31774"
d G "PIN_D7" 1 113 "31775"
d G "PIN_E0" 1 115 "31776"
d G "PIN_E1" 1 116 "31777"
d G "PIN_E2" 1 117 "31778"
d G "PIN_E3" 1 118 "31779"
d G "FALSE" 1 121 "0"
d G "TRUE" 1 122 "1"
d G "BYTE" 1 124 "int8"
d G "BOOLEAN" 1 125 "int1"
d G "getc" 1 127 "getch"
d G "fgetc" 1 128 "getch"
d G "getchar" 1 129 "getch"
d G "putc" 1 130 "putchar"
d G "fputc" 1 131 "putchar"
d G "fgets" 1 132 "gets"
d G "fputs" 1 133 "puts"
c L "output_drive" 1 1 3 "FUNCTION"
f B "restart_cause" 1 138 "int8()" `105 
f B "reset_cpu" 1 139 "void()" `106 
f B "sleep" 1 140 "void()" `107 
v L "type" 1 141 "int8" `109 
f G "sleep" 1 141 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 143 "7"
d G "MCLR_FROM_SLEEP" 1 144 "11"
d G "MCLR_FROM_RUN" 1 145 "15"
d G "NORMAL_POWER_UP" 1 146 "12"
d G "BROWNOUT_RESTART" 1 147 "14"
d G "WDT_FROM_SLEEP" 1 148 "3"
d G "RESET_INSTRUCTION" 1 149 "0"
d G "SLEEP_FULL" 1 152 "0" "Default"
d G "SLEEP_IDLE" 1 153 "1" "Clock and peripherals don't stop"
c L "sleep" 1 1 5 "FUNCTION"
v L "mode" 1 160 "int8" `111 
f B "setup_timer_0" 1 160 "void(int8 mode)" `110 
v L "value" 1 161 "int16" `113 
f B "set_timer0" 1 161 "void(int16 value)" `112 
f B "get_timer0" 1 162 "int16()" `114 
v L "mode" 1 163 "int8" `116 
v L "prescaler" 1 163 "int8" `117 
f B "setup_counters" 1 163 "void(int8 mode,int8 prescaler)" `115 
v L "value" 1 164 "int16" `119 
f B "set_rtcc" 1 164 "void(int16 value)" `118 
f B "get_rtcc" 1 165 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 167 "0"
d G "T0_EXT_L_TO_H" 1 168 "32"
d G "T0_EXT_H_TO_L" 1 169 "48"
d G "T0_DIV_1" 1 171 "8"
d G "T0_DIV_2" 1 172 "0"
d G "T0_DIV_4" 1 173 "1"
d G "T0_DIV_8" 1 174 "2"
d G "T0_DIV_16" 1 175 "3"
d G "T0_DIV_32" 1 176 "4"
d G "T0_DIV_64" 1 177 "5"
d G "T0_DIV_128" 1 178 "6"
d G "T0_DIV_256" 1 179 "7"
d G "T0_OFF" 1 181 "0x80"
d G "T0_8_BIT" 1 183 "0x40"
d G "RTCC_INTERNAL" 1 185 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 186 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 187 "48"
d G "RTCC_DIV_1" 1 188 "8"
d G "RTCC_DIV_2" 1 189 "0"
d G "RTCC_DIV_4" 1 190 "1"
d G "RTCC_DIV_8" 1 191 "2"
d G "RTCC_DIV_16" 1 192 "3"
d G "RTCC_DIV_32" 1 193 "4"
d G "RTCC_DIV_64" 1 194 "5"
d G "RTCC_DIV_128" 1 195 "6"
d G "RTCC_DIV_256" 1 196 "7"
d G "RTCC_OFF" 1 197 "0x80"
d G "RTCC_8_BIT" 1 198 "0x40"
c L "get_rtcc" 1 1 8 "FUNCTION"
v L "mode" 1 209 "int16" `122 
f B "setup_wdt" 1 209 "void(int16 mode)" `121 
f B "restart_wdt" 1 210 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 212 "0x100"
d G "WDT_OFF" 1 213 "0"
d G "WDT_4MS" 1 215 "0x300"
d G "WDT_8MS" 1 216 "0x500"
d G "WDT_16MS" 1 217 "0x700"
d G "WDT_32MS" 1 218 "0x900"
d G "WDT_64MS" 1 219 "0xB00"
d G "WDT_128MS" 1 220 "0xD00"
d G "WDT_256MS" 1 221 "0xF00"
d G "WDT_512MS" 1 222 "0x1100"
d G "WDT_1S" 1 223 "0x1300"
d G "WDT_2S" 1 224 "0x1500"
d G "WDT_4S" 1 225 "0x1700"
d G "WDT_8S" 1 226 "0x1900"
d G "WDT_16" 1 227 "0x1B00"
d G "WDT_32S" 1 228 "0x1D00"
d G "WDT_64S" 1 229 "0x1F00"
d G "WDT_128S" 1 230 "0x2100"
c L "restart_wdt" 1 1 3 "FUNCTION"
v L "mode" 1 236 "int16" `125 
f B "setup_timer_1" 1 236 "void(int16 mode)" `124 
f B "get_timer1" 1 237 "int16()" `126 
v L "value" 1 238 "int16" `128 
f B "set_timer1" 1 238 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 241 "0"
d G "T1_INTERNAL" 1 242 "0x85"
d G "T1_EXTERNAL" 1 243 "0x87"
d G "T1_EXTERNAL_SYNC" 1 244 "0x83"
d G "T1_CLK_OUT" 1 246 "8"
d G "T1_DIV_BY_1" 1 248 "0"
d G "T1_DIV_BY_2" 1 249 "0x10"
d G "T1_DIV_BY_4" 1 250 "0x20"
d G "T1_DIV_BY_8" 1 251 "0x30"
c L "set_timer1" 1 1 3 "FUNCTION"
v L "mode" 1 256 "int8" `130 
v L "period" 1 256 "int8" `131 
v L "postscale" 1 256 "int8" `132 
f B "setup_timer_2" 1 256 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 1 257 "int8()" `133 
v L "value" 1 258 "int8" `135 
f B "set_timer2" 1 258 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 260 "0"
d G "T2_DIV_BY_1" 1 261 "4"
d G "T2_DIV_BY_4" 1 262 "5"
d G "T2_DIV_BY_16" 1 263 "6"
c L "set_timer2" 1 1 3 "FUNCTION"
v L "mode" 1 268 "int16" `137 
f B "setup_timer_3" 1 268 "void(int16 mode)" `136 
f B "get_timer3" 1 269 "int16()" `138 
v L "value" 1 270 "int16" `140 
f B "set_timer3" 1 270 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 273 "0"
d G "T3_INTERNAL" 1 274 "0x85"
d G "T3_EXTERNAL" 1 275 "0x87"
d G "T3_EXTERNAL_SYNC" 1 276 "0x83"
d G "T3_DIV_BY_1" 1 278 "0"
d G "T3_DIV_BY_2" 1 279 "0x10"
d G "T3_DIV_BY_4" 1 280 "0x20"
d G "T3_DIV_BY_8" 1 281 "0x30"
c L "set_timer3" 1 1 4 "FUNCTION"
v L "mode" 1 287 "int32" `142 
f B "setup_ccp1" 1 287 "void(int32 mode)" `141 
v L "mode" 1 288 "int32" `144 
v L "pwm" 1 288 "int8" `145 
f G "setup_ccp1" 1 288 "void(int32 mode,int8 pwm)" `143 
v L "value" 1 289 "int16" `147 
f B "set_pwm1_duty" 1 289 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 291 "0"
d G "CCP_CAPTURE_FE" 1 292 "4"
d G "CCP_CAPTURE_RE" 1 293 "5"
d G "CCP_CAPTURE_DIV_4" 1 294 "6"
d G "CCP_CAPTURE_DIV_16" 1 295 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 1 296 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 297 "9"
d G "CCP_COMPARE_INT" 1 298 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 299 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 1 300 "0xB"
d G "CCP_PWM" 1 301 "0xC"
d G "CCP_PWM_PLUS_1" 1 302 "0x1c"
d G "CCP_PWM_PLUS_2" 1 303 "0x2c"
d G "CCP_PWM_PLUS_3" 1 304 "0x3c"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
d G "T3_CCP1_TO_2" 1 310 "0x48"
d G "T3_CCP2" 1 311 "0x8"
d G "CCP_PWM_H_H" 1 314 "0x0c"
d G "CCP_PWM_H_L" 1 315 "0x0d"
d G "CCP_PWM_L_H" 1 316 "0x0e"
d G "CCP_PWM_L_L" 1 317 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 319 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 320 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 321 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 323 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 324 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 325 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 326 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 327 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 328 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 329 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 331 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 332 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 333 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 335 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 336 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 337 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 339 "0x80000000"
c L "set_pwm1_duty" 1 1 1 "FUNCTION"
v L "mode" 1 343 "int32" `152 
f B "setup_ccp2" 1 343 "void(int32 mode)" `151 
v L "mode" 1 344 "int32" `154 
v L "pwm" 1 344 "int8" `155 
f G "setup_ccp2" 1 344 "void(int32 mode,int8 pwm)" `153 
v L "value" 1 345 "int16" `157 
f B "set_pwm2_duty" 1 345 "void(int16 value)" `156 
c L "set_pwm2_duty" 1 1 5 "FUNCTION"
v L "mode" 1 354 "int8" `162 
f B "setup_psp" 1 354 "void(int8 mode)" `161 
f B "psp_output_full" 1 355 "int8()" `163 
f B "psp_input_full" 1 356 "int8()" `164 
f B "psp_overflow" 1 357 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 1 359 "0x10"
d G "PSP_DISABLED" 1 360 "0"
c L "psp_overflow" 1 1 3 "FUNCTION"
v L "mode" 1 367 "int32" `168 
f B "setup_spi" 1 367 "void(int32 mode)" `167 
v L "value" 1 368 "int8" `170 
f B "spi_write" 1 368 "void(int8 value)" `169 
f B "spi_read" 1 369 "int8()" `171 
v L "value" 1 370 "int8" `173 
f G "spi_read" 1 370 "int8(int8 value)" `172 
f B "spi_data_in" 1 371 "int8()" `174 
v L "mode" 1 372 "int32" `176 
f B "setup_spi2" 1 372 "void(int32 mode)" `175 
v L "value" 1 373 "int8" `178 
f B "spi_write2" 1 373 "void(int8 value)" `177 
f B "spi_read2" 1 374 "int8()" `179 
v L "value" 1 375 "int8" `181 
f G "spi_read2" 1 375 "int8(int8 value)" `180 
f B "spi_data_in2" 1 376 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 378 "0x00"
d G "SPI_MASTER" 1 379 "0x20"
d G "SPI_SLAVE" 1 380 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 381 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 382 "0x00"
d G "SPI_CLK_DIV_4" 1 383 "0x00"
d G "SPI_CLK_DIV_16" 1 384 "0x01"
d G "SPI_CLK_DIV_64" 1 385 "0x02"
d G "SPI_CLK_T2" 1 386 "0x03"
d G "SPI_SS_DISABLED" 1 387 "0x01"
d G "SPI_XMIT_L_TO_H" 1 389 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 390 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 392 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 393 "0x8000"
d G "SPI_L_TO_H" 1 396 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 397 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 1 2 "FUNCTION"
v L "baud" 1 401 "int32" `184 
f B "setup_uart" 1 401 "void(int32 baud)" `183 
v L "baud" 1 402 "int32" `186 
v L "stream" 1 402 "int8" `187 
f G "setup_uart" 1 402 "void(int32 baud,int8 stream)" `185 
v L "baud" 1 403 "int32" `189 
v L "stream" 1 403 "int8" `190 
v L "clock" 1 403 "int32" `191 
f G "setup_uart" 1 403 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 1 404 "int32" `193 
f B "set_uart_speed" 1 404 "void(int32 baud)" `192 
v L "baud" 1 405 "int32" `195 
v L "stream" 1 405 "int8" `196 
f G "set_uart_speed" 1 405 "void(int32 baud,int8 stream)" `194 
v L "baud" 1 406 "int32" `198 
v L "stream" 1 406 "int8" `199 
v L "clock" 1 406 "int32" `200 
f G "set_uart_speed" 1 406 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 410 "2"
d G "UART_DATA" 1 411 "4"
d G "UART_AUTODETECT" 1 412 "8"
d G "UART_AUTODETECT_NOWAIT" 1 413 "9"
d G "UART_WAKEUP_ON_RDA" 1 414 "10"
d G "UART_SEND_BREAK" 1 415 "13"
c L "set_uart_speed" 1 1 3 "FUNCTION"
v L "mode" 1 419 "int32" `202 
f B "setup_comparator" 1 419 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "D1_D0_D3_D0" 1 421 "0x0Bff04"
d G "D1_D0_D3_D2_OUT_ON_E1_E2" 1 422 "0x0FF903"
d G "D1_D0_D3_D0_OUT_ON_E1_E2" 1 423 "0x0BF905"
d G "NC_NC_NC_NC" 1 424 "0x00ff07"
d G "D1_D0_D3_D2" 1 425 "0x0Fff02"
d G "D1_D0_NC_NC_OUT_ON_E1" 1 426 "0x03FD01"
d G "D1_VR_D3_VR" 1 427 "0x0Aff06"
d G "D0_VR_D2_VR" 1 428 "0x05ff0e"
d G "CP1_INVERT" 1 429 "0x0000010"
d G "CP2_INVERT" 1 430 "0x0000020"
c L "setup_comparator" 1 1 2 "FUNCTION"
v L "mode" 1 437 "int8" `206 
f B "setup_vref" 1 437 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 439 "0xa0"
d G "VREF_HIGH" 1 440 "0x80"
d G "VREF_F5" 1 442 "0x40"
d G "VREF_COMP" 1 443 "0x10"
c L "setup_vref" 1 1 2 "FUNCTION"
v L "mode" 1 447 "int8" `208 
f B "setup_low_volt_detect" 1 447 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 449 "0x1F"
d G "LVD_45" 1 450 "0x1E"
d G "LVD_42" 1 451 "0x1D"
d G "LVD_40" 1 452 "0x1C"
d G "LVD_38" 1 453 "0x1B"
d G "LVD_36" 1 454 "0x1A"
d G "LVD_35" 1 455 "0x19"
d G "LVD_33" 1 456 "0x18"
d G "LVD_30" 1 457 "0x17"
d G "LVD_28" 1 458 "0x16"
d G "LVD_27" 1 459 "0x15"
d G "LVD_25" 1 460 "0x14"
d G "LVD_24" 1 461 "0x13"
d G "LVD_23" 1 462 "0x12"
d G "LVD_22" 1 463 "0x11"
d G "LVD_21" 1 464 "0x10"
d G "LVD_TRIGGER_BELOW" 1 466 "0"
d G "LVD_TRIGGER_ABOVE" 1 467 "0x80"
c L "setup_low_volt_detect" 1 1 2 "FUNCTION"
v L "mode" 1 472 "int8" `210 
f B "setup_oscillator" 1 472 "int8(int8 mode)" `209 
v L "mode" 1 473 "int8" `212 
v L "tune" 1 473 "sint8" `213 
f G "setup_oscillator" 1 473 "int8(int8 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 1 476 "0"
d G "OSC_125KHZ" 1 477 "0x10"
d G "OSC_250KHZ" 1 478 "0x20"
d G "OSC_500KHZ" 1 479 "0x30"
d G "OSC_1MHZ" 1 480 "0x40"
d G "OSC_2MHZ" 1 481 "0x50"
d G "OSC_4MHZ" 1 482 "0x60"
d G "OSC_8MHZ" 1 483 "0x70"
d G "OSC_16MHZ" 1 484 "0x4060"
d G "OSC_32MHZ" 1 485 "0x4070"
d G "OSC_TIMER1" 1 487 "1"
d G "OSC_INTRC" 1 488 "2"
d G "OSC_NORMAL" 1 489 "0"
d G "OSC_IDLE_MODE" 1 491 "0x80"
d G "OSC_31250" 1 492 "0x8000"
d G "OSC_PLL_ON" 1 493 "0x4000"
d G "OSC_PLL_OFF" 1 494 "0"
d G "OSC_STATE_STABLE" 1 498 "4"
d G "OSC_STATE_EXT_RUNNING" 1 499 "8"
c L "setup_oscillator" 1 1 4 "FUNCTION"
v L "mode" 1 506 "int16" `215 
f B "setup_adc" 1 506 "void(int16 mode)" `214 
f B "read_adc" 1 507 "int8()" `216 
v L "mode" 1 508 "int8" `218 
f G "read_adc" 1 508 "int8(int8 mode)" `217 
f G "read_adc" 1 509 "int16()" `219 
v L "mode" 1 510 "int8" `221 
f G "read_adc" 1 510 "int16(int8 mode)" `220 
f B "adc_done" 1 511 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 513 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 514 "0x100"
d G "ADC_CLOCK_DIV_4" 1 515 "0x04"
d G "ADC_CLOCK_DIV_8" 1 516 "0x01"
d G "ADC_CLOCK_DIV_16" 1 517 "0x05"
d G "ADC_CLOCK_DIV_32" 1 518 "0x02"
d G "ADC_CLOCK_DIV_64" 1 519 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 520 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 522 "0x00"
d G "ADC_TAD_MUL_2" 1 523 "0x08"
d G "ADC_TAD_MUL_4" 1 524 "0x10"
d G "ADC_TAD_MUL_6" 1 525 "0x18"
d G "ADC_TAD_MUL_8" 1 526 "0x20"
d G "ADC_TAD_MUL_12" 1 527 "0x28"
d G "ADC_TAD_MUL_16" 1 528 "0x30"
d G "ADC_TAD_MUL_20" 1 529 "0x38"
c L "adc_done" 1 1 1 "FUNCTION"
v L "pins" 1 532 "int8" `224 
f B "setup_adc_ports" 1 532 "void(int8 pins)" `223 
v L "pins" 1 533 "int8" `226 
v L "reference" 1 533 "int8" `227 
f G "setup_adc_ports" 1 533 "void(int8 pins,int8 reference)" `225 
v L "channel" 1 534 "int8" `229 
f B "set_adc_channel" 1 534 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 1 537 "0x0F" "None"
d G "ALL_ANALOG" 1 538 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B1 B4 B0"
d G "AN0_TO_AN9" 1 539 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B1 B4"
d G "AN0_TO_AN8" 1 540 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B1"
d G "AN0_TO_AN7" 1 541 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 1 542 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 1 543 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 1 544 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 1 545 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 1 546 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 1 547 "0x0D" "A0 A1"
d G "AN0" 1 548 "0x0E" "A0"
d G "AN0_TO_AN12_ANALOG" 1 549 "0x02" "!old only provided for compatibility"
d G "AN0_TO_AN11_ANALOG" 1 550 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 1 551 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 1 552 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 1 553 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 1 554 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 1 555 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 1 556 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 1 557 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 1 558 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 1 561 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 1 562 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 1 563 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 1 564 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 1 567 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 568 "1"
d G "ADC_READ_ONLY" 1 569 "6"
c L "set_adc_channel" 1 1 3 "FUNCTION"
v L "x" 1 575 "sint8" `231 
f B "abs" 1 575 "sint8(sint8 x)" `230 
v L "x" 1 576 "sint16" `233 
f G "abs" 1 576 "sint16(sint16 x)" `232 
v L "x" 1 577 "sint32" `235 
f G "abs" 1 577 "sint32(sint32 x)" `234 
v L "x" 1 578 "float" `237 
f G "abs" 1 578 "float(float x)" `236 
v L "??65535" 1 579 "int8" `239 
v L "??65535" 1 579 "int8" `240 
f B "_mul" 1 579 "int16(int8 ,int8 )" `238 
v L "??65535" 1 580 "sint8" `239 
v L "??65535" 1 580 "sint8" `243 
f G "_mul" 1 580 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 1 581 "int16" `239 
v L "??65535" 1 581 "int16" `246 
f G "_mul" 1 581 "int32(int16 ,int16 )" `244 
v L "??65535" 1 582 "sint16" `239 
v L "??65535" 1 582 "sint16" `249 
f G "_mul" 1 582 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 1 585 "int8" `251 
v L "offset" 1 585 "int8" `252 
f B "read_bank" 1 585 "int8(int8 bank,int8 offset)" `250 
v L "bank" 1 586 "int8" `254 
v L "offset" 1 586 "int8" `255 
v L "value" 1 586 "int8" `256 
f B "write_bank" 1 586 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 1 587 "*int8" `258 
v L "src" 1 587 "*int8" `259 
f B "strcpy" 1 587 "void(*int8 dest,*int8 src)" `257 
v L "dest" 1 588 "*int8" `261 
v L "src" 1 588 "*int8" `262 
f B "strcopy" 1 588 "void(*int8 dest,*int8 src)" `260 
v L "destination" 1 589 "*int8" `264 
v L "value" 1 589 "int8" `265 
v L "num" 1 589 "int16" `266 
f B "memset" 1 589 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 1 590 "*int8" `268 
v L "source" 1 590 "*int8" `269 
v L "num" 1 590 "int16" `270 
f B "memcpy" 1 590 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 1 593 "int8" `272 
f B "toupper" 1 593 "int8(int8 cvalue)" `271 
v L "cvalue" 1 594 "int8" `274 
f B "tolower" 1 594 "int8(int8 cvalue)" `273 
v L "string" 1 595 "*int8" `276 
v L "cstring" 1 595 "*int8" `277 
f B "sprintf" 1 595 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 1 598 "*int8" `280 
v L "bytes" 1 598 "int8" `281 
v L "value" 1 598 "int8" `282 
f B "shift_left" 1 598 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 1 599 "*int8" `284 
v L "bytes" 1 599 "int8" `285 
v L "value" 1 599 "int8" `286 
f B "shift_right" 1 599 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 1 600 "*int8" `288 
v L "bytes" 1 600 "int8" `289 
f B "rotate_left" 1 600 "void(*int8 address,int8 bytes)" `287 
v L "address" 1 601 "*int8" `291 
v L "bytes" 1 601 "int8" `292 
f B "rotate_right" 1 601 "void(*int8 address,int8 bytes)" `290 
v L "value" 1 602 "int8" `294 
f B "swap" 1 602 "void(int8 value)" `293 
v L "var" 1 603 "int16" `296 
v L "offset" 1 603 "int8" `297 
f B "make8" 1 603 "int8(int16 var,int8 offset)" `295 
v L "var" 1 604 "int32" `296 
v L "offset" 1 604 "int8" `300 
f G "make8" 1 604 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 1 605 "int8" `302 
v L "varlow" 1 605 "int8" `303 
f B "make16" 1 605 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 1 606 "int16" `305 
f B "make32" 1 606 "int32(int16 var1)" `304 
v L "var1" 1 607 "int16" `307 
v L "var2" 1 607 "int16" `308 
f G "make32" 1 607 "int32(int16 var1,int16 var2)" `306 
v L "var1" 1 608 "int16" `307 
v L "var2" 1 608 "int8" `311 
f G "make32" 1 608 "int32(int16 var1,int8 var2)" `309 
v L "var1" 1 609 "int16" `313 
v L "var2" 1 609 "int8" `314 
v L "var3" 1 609 "int8" `315 
f G "make32" 1 609 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 1 610 "int8" `317 
f G "make32" 1 610 "int32(int8 var1)" `316 
v L "var1" 1 611 "int8" `307 
v L "var2" 1 611 "int8" `320 
f G "make32" 1 611 "int32(int8 var1,int8 var2)" `318 
v L "var1" 1 612 "int8" `313 
v L "var2" 1 612 "int8" `314 
v L "var3" 1 612 "int8" `324 
f G "make32" 1 612 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 1 613 "int8" `326 
v L "var2" 1 613 "int8" `327 
v L "var3" 1 613 "int8" `328 
v L "var4" 1 613 "int8" `329 
f G "make32" 1 613 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 1 614 "int8" `307 
v L "var2" 1 614 "int16" `332 
f G "make32" 1 614 "int32(int8 var1,int16 var2)" `330 
v L "var1" 1 615 "int8" `313 
v L "var2" 1 615 "int16" `314 
v L "var3" 1 615 "int8" `336 
f G "make32" 1 615 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 1 616 "int8" `313 
v L "var2" 1 616 "int8" `314 
v L "var3" 1 616 "int16" `340 
f G "make32" 1 616 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 1 617 "int8" `342 
v L "bit" 1 617 "int8" `343 
f B "bit_set" 1 617 "void(int8 var,int8 bit)" `341 
v L "var" 1 618 "int16" `342 
v L "bit" 1 618 "int8" `346 
f G "bit_set" 1 618 "void(int16 var,int8 bit)" `344 
v L "var" 1 619 "int32" `342 
v L "bit" 1 619 "int8" `349 
f G "bit_set" 1 619 "void(int32 var,int8 bit)" `347 
v L "var" 1 620 "int8" `351 
v L "bit" 1 620 "int8" `352 
f B "bit_clear" 1 620 "void(int8 var,int8 bit)" `350 
v L "var" 1 621 "int16" `351 
v L "bit" 1 621 "int8" `355 
f G "bit_clear" 1 621 "void(int16 var,int8 bit)" `353 
v L "var" 1 622 "int32" `351 
v L "bit" 1 622 "int8" `358 
f G "bit_clear" 1 622 "void(int32 var,int8 bit)" `356 
v L "var" 1 623 "int8" `360 
v L "bit" 1 623 "int8" `361 
f B "bit_test" 1 623 "int8(int8 var,int8 bit)" `359 
v L "var" 1 624 "int16" `360 
v L "bit" 1 624 "int8" `364 
f G "bit_test" 1 624 "int8(int16 var,int8 bit)" `362 
v L "var" 1 625 "int32" `360 
v L "bit" 1 625 "int8" `367 
f G "bit_test" 1 625 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 1 628 "int8" `369 
f B "delay_cycles" 1 628 "void(int8 count)" `368 
v L "time" 1 629 "int16" `371 
f B "delay_ms" 1 629 "void(int16 time)" `370 
v L "time" 1 630 "int16" `373 
f B "delay_us" 1 630 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 1 633 "int8" `375 
f B "putchar" 1 633 "void(int8 cdata)" `374 
v L "cdata" 1 634 "int8" `377 
v L "stream" 1 634 "int8" `378 
f G "putchar" 1 634 "void(int8 cdata,int8 stream)" `376 
v L "string" 1 635 "*int8" `380 
f B "puts" 1 635 "void(*int8 string)" `379 
v L "string" 1 636 "*int8" `382 
v L "stream" 1 636 "int8" `383 
f G "puts" 1 636 "void(*int8 string,int8 stream)" `381 
f B "getch" 1 637 "int8()" `384 
v L "stream" 1 638 "int8" `386 
f G "getch" 1 638 "int8(int8 stream)" `385 
v L "string" 1 639 "*int8" `388 
f B "gets" 1 639 "void(*int8 string)" `387 
v L "string" 1 640 "*int8" `390 
v L "stream" 1 640 "int8" `391 
f G "gets" 1 640 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 1 641 "int8()" `392 
v L "stream" 1 642 "int8" `394 
f G "kbhit" 1 642 "int8(int8 stream)" `393 
v L "string" 1 643 "*int8" `396 
f B "printf" 1 643 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 1 644 "int8" `399 
v L "string" 1 644 "*int8" `400 
f B "fprintf" 1 644 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 1 645 "void()" `402 
v L "stream" 1 646 "int8" `404 
f B "fputc_send" 1 646 "void(int8 stream)" `403 
f B "rcv_buffer_full" 1 647 "int8()" `405 
v L "stream" 1 648 "int8" `407 
f G "rcv_buffer_full" 1 648 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 1 649 "int16()" `408 
v L "stream" 1 650 "int8" `410 
f G "rcv_buffer_bytes" 1 650 "int16(int8 stream)" `409 
f B "tx_buffer_full" 1 651 "int8()" `411 
v L "stream" 1 652 "int8" `413 
f G "tx_buffer_full" 1 652 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 1 653 "int16()" `414 
v L "stream" 1 654 "int8" `416 
f G "tx_buffer_bytes" 1 654 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 1 657 "int8()" `417 
v L "stream" 1 658 "int8" `419 
f G "i2c_read" 1 658 "int8(int8 stream)" `418 
v L "stream" 1 659 "int8" `421 
v L "ack" 1 659 "int8" `422 
f G "i2c_read" 1 659 "int8(int8 stream,int8 ack)" `420 
v L "data" 1 660 "int8" `424 
f B "i2c_write" 1 660 "int8(int8 data)" `423 
v L "stream" 1 661 "int8" `426 
v L "data" 1 661 "int8" `427 
f G "i2c_write" 1 661 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 1 662 "void()" `428 
v L "stream" 1 663 "int8" `430 
f G "i2c_start" 1 663 "void(int8 stream)" `429 
v L "stream" 1 664 "int8" `432 
v L "restart" 1 664 "int8" `433 
f G "i2c_start" 1 664 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 1 665 "void()" `434 
v L "stream" 1 666 "int8" `436 
f G "i2c_stop" 1 666 "void(int8 stream)" `435 
f B "i2c_isr_state" 1 667 "int8()" `437 
v L "addr" 1 668 "int8" `439 
f B "i2c_slaveaddr" 1 668 "void(int8 addr)" `438 
v L "stream" 1 669 "int8" `441 
v L "addr" 1 669 "int8" `442 
f G "i2c_slaveaddr" 1 669 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 1 670 "int8()" `443 
v L "stream" 1 671 "int8" `445 
f G "i2c_poll" 1 671 "int8(int8 stream)" `444 
v L "baud" 1 672 "int32" `447 
f B "i2c_init" 1 672 "void(int32 baud)" `446 
v L "stream" 1 673 "int8" `449 
v L "baud" 1 673 "int32" `450 
f G "i2c_init" 1 673 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 1 676 "int8()" `451 
f G "spi_xfer" 1 677 "int16()" `452 
f G "spi_xfer" 1 678 "int32()" `453 
v L "data" 1 679 "int8" `455 
f G "spi_xfer" 1 679 "int8(int8 data)" `454 
v L "data" 1 680 "int16" `457 
f G "spi_xfer" 1 680 "int16(int16 data)" `456 
v L "data" 1 681 "int32" `459 
f G "spi_xfer" 1 681 "int32(int32 data)" `458 
v L "stream" 1 682 "int8" `461 
v L "data" 1 682 "int8" `462 
f G "spi_xfer" 1 682 "int8(int8 stream,int8 data)" `460 
v L "stream" 1 683 "int8" `461 
v L "data" 1 683 "int16" `465 
f G "spi_xfer" 1 683 "int16(int8 stream,int16 data)" `463 
v L "stream" 1 684 "int8" `461 
v L "data" 1 684 "int32" `468 
f G "spi_xfer" 1 684 "int32(int8 stream,int32 data)" `466 
v L "stream" 1 685 "int8" `470 
v L "data" 1 685 "int8" `471 
v L "bits" 1 685 "int8" `472 
f G "spi_xfer" 1 685 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 1 686 "int8" `470 
v L "data" 1 686 "int16" `471 
v L "bits" 1 686 "int8" `476 
f G "spi_xfer" 1 686 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 1 687 "int8" `470 
v L "data" 1 687 "int32" `471 
v L "bits" 1 687 "int8" `480 
f G "spi_xfer" 1 687 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 1 688 "int32" `482 
f B "spi_init" 1 688 "void(int32 baud)" `481 
v L "stream" 1 689 "int8" `484 
v L "baud" 1 689 "int32" `485 
f G "spi_init" 1 689 "void(int8 stream,int32 baud)" `483 
v L "baud" 1 690 "int32" `487 
f B "spi_speed" 1 690 "void(int32 baud)" `486 
v L "stream" 1 691 "int8" `489 
v L "baud" 1 691 "int32" `490 
f G "spi_speed" 1 691 "void(int8 stream,int32 baud)" `488 
v L "stream" 1 692 "int8" `492 
v L "baud" 1 692 "int32" `493 
v L "clock" 1 692 "int32" `494 
f G "spi_speed" 1 692 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 1 693 "int8" `496 
f B "spi_prewrite" 1 693 "void(int8 data)" `495 
v L "data" 1 694 "int16" `498 
f G "spi_prewrite" 1 694 "void(int16 data)" `497 
v L "data" 1 695 "int32" `500 
f G "spi_prewrite" 1 695 "void(int32 data)" `499 
v L "??65535" 1 696 "int8" `502 
v L "data" 1 696 "int8" `503 
f G "spi_prewrite" 1 696 "void(int8 ,int8 data)" `501 
v L "??65535" 1 697 "int8" `502 
v L "data" 1 697 "int16" `506 
f G "spi_prewrite" 1 697 "void(int8 ,int16 data)" `504 
v L "??65535" 1 698 "int8" `502 
v L "data" 1 698 "int32" `509 
f G "spi_prewrite" 1 698 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 1 699 "int8()" `510 
f G "spi_xfer_in" 1 700 "int16()" `511 
f G "spi_xfer_in" 1 701 "int32()" `512 
v L "bits" 1 702 "int8" `514 
f G "spi_xfer_in" 1 702 "int8(int8 bits)" `513 
v L "bits" 1 703 "int8" `516 
f G "spi_xfer_in" 1 703 "int16(int8 bits)" `515 
v L "bits" 1 704 "int8" `518 
f G "spi_xfer_in" 1 704 "int32(int8 bits)" `517 
v L "stream" 1 705 "int8" `520 
v L "bits" 1 705 "int8" `521 
f G "spi_xfer_in" 1 705 "int8(int8 stream,int8 bits)" `519 
v L "stream" 1 706 "int8" `520 
v L "bits" 1 706 "int8" `524 
f G "spi_xfer_in" 1 706 "int16(int8 stream,int8 bits)" `522 
v L "stream" 1 707 "int8" `520 
v L "bits" 1 707 "int8" `527 
f G "spi_xfer_in" 1 707 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 1 710 "void()" `528 
f B "rtos_yield" 1 711 "void()" `529 
v L "task" 1 712 "int8" `531 
f B "rtos_enable" 1 712 "void(int8 task)" `530 
v L "task" 1 713 "int8" `533 
f B "rtos_disable" 1 713 "void(int8 task)" `532 
f B "rtos_terminate" 1 714 "void()" `534 
v L "flag" 1 715 "int8" `536 
f B "rtos_await" 1 715 "void(int8 flag)" `535 
v L "sem" 1 716 "int8" `538 
f B "rtos_wait" 1 716 "void(int8 sem)" `537 
v L "sem" 1 717 "int8" `540 
f B "rtos_signal" 1 717 "void(int8 sem)" `539 
v L "task" 1 718 "int8" `542 
v L "msg" 1 718 "int8" `543 
f B "rtos_msg_send" 1 718 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 1 719 "int8()" `544 
f B "rtos_msg_poll" 1 720 "int8()" `545 
v L "task" 1 721 "int8" `547 
f B "rtos_overrun" 1 721 "int8(int8 task)" `546 
v L "task" 1 722 "int8" `549 
v L "stat" 1 722 "*int8" `550 
f B "rtos_stats" 1 722 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 1 725 "int8()" `551 
f G "get_ticks" 1 726 "int16()" `552 
f G "get_ticks" 1 727 "int32()" `553 
v L "stream" 1 728 "int8" `555 
f G "get_ticks" 1 728 "int8(int8 stream)" `554 
v L "stream" 1 729 "int8" `557 
f G "get_ticks" 1 729 "int16(int8 stream)" `556 
v L "stream" 1 730 "int8" `559 
f G "get_ticks" 1 730 "int32(int8 stream)" `558 
v L "value" 1 731 "int8" `561 
f B "set_ticks" 1 731 "void(int8 value)" `560 
v L "value" 1 732 "int16" `563 
f G "set_ticks" 1 732 "void(int16 value)" `562 
v L "value" 1 733 "int32" `565 
f G "set_ticks" 1 733 "void(int32 value)" `564 
v L "stream" 1 734 "int8" `567 
v L "value" 1 734 "int8" `568 
f G "set_ticks" 1 734 "void(int8 stream,int8 value)" `566 
v L "stream" 1 735 "int8" `567 
v L "value" 1 735 "int16" `571 
f G "set_ticks" 1 735 "void(int8 stream,int16 value)" `569 
v L "stream" 1 736 "int8" `567 
v L "value" 1 736 "int32" `574 
f G "set_ticks" 1 736 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 1 739 "void()" `575 
v L "stream" 1 740 "int8" `577 
f G "pwm_on" 1 740 "void(int8 stream)" `576 
f B "pwm_off" 1 741 "void()" `578 
v L "stream" 1 742 "int8" `580 
f G "pwm_off" 1 742 "void(int8 stream)" `579 
v L "duty" 1 743 "int16" `582 
f B "pwm_set_duty" 1 743 "void(int16 duty)" `581 
v L "stream" 1 744 "int8" `584 
v L "duty" 1 744 "int16" `585 
f G "pwm_set_duty" 1 744 "void(int8 stream,int16 duty)" `583 
v L "percent" 1 745 "int16" `587 
f B "pwm_set_duty_percent" 1 745 "void(int16 percent)" `586 
v L "stream" 1 746 "int8" `589 
v L "percent" 1 746 "int16" `590 
f G "pwm_set_duty_percent" 1 746 "void(int8 stream,int16 percent)" `588 
v L "frequency" 1 747 "int32" `592 
f B "pwm_set_frequency" 1 747 "void(int32 frequency)" `591 
v L "stream" 1 748 "int8" `594 
v L "frequency" 1 748 "int32" `595 
f G "pwm_set_frequency" 1 748 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 1 751 "int16()" `596 
v L "stream" 1 752 "int8" `598 
f G "get_capture_time" 1 752 "int16(int8 stream)" `597 
f B "get_capture_event" 1 753 "int8()" `599 
v L "stream" 1 754 "int8" `601 
f G "get_capture_event" 1 754 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 1 1 2 "FUNCTION"
v L "address" 1 767 "int32" `603 
f B "goto_address" 1 767 "void(int32 address)" `602 
v L "label" 1 768 "int32" `605 
f B "label_address" 1 768 "int32(int32 label)" `604  "Program Memory Prototypes:"
v L "address" 1 771 "int32" `607 
v L "dataptr" 1 771 "*int8" `608 
v L "count" 1 771 "int16" `609 
f B "read_program_memory" 1 771 "void(int32 address,*int8 dataptr,int16 count)" `606 
v L "address" 1 772 "int32" `611 
f B "read_program_eeprom" 1 772 "int16(int32 address)" `610 
v L "address" 1 773 "int32" `613 
f B "erase_program_eeprom" 1 773 "void(int32 address)" `612 
v L "address" 1 774 "int32" `615 
v L "dataptr" 1 774 "*int8" `616 
v L "count" 1 774 "int16" `617 
f B "write_program_memory" 1 774 "void(int32 address,*int8 dataptr,int16 count)" `614 
v L "address" 1 775 "int32" `619 
v L "data" 1 775 "int16" `620 
f B "write_program_eeprom" 1 775 "void(int32 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 780 "int16" `621 
v L "address" 1 785 "__EEADDRESS__" `623 
f B "read_eeprom" 1 785 "int8(__EEADDRESS__ address)" `622 
v L "address" 1 786 "__EEADDRESS__" `625 
v L "value" 1 786 "int8" `626 
f B "write_eeprom" 1 786 "void(__EEADDRESS__ address,int8 value)" `624  "INT"
c L "write_eeprom" 1 1 4 "FUNCTION"
v L "interrupt" 1 793 "int32" `628 
f B "enable_interrupts" 1 793 "void(int32 interrupt)" `627 
v L "interrupt" 1 794 "int32" `630 
f B "disable_interrupts" 1 794 "void(int32 interrupt)" `629 
v L "interrupt" 1 795 "int32" `632 
f B "clear_interrupt" 1 795 "void(int32 interrupt)" `631 
v L "interrupt" 1 796 "int32" `634 
f B "interrupt_active" 1 796 "int8(int32 interrupt)" `633 
v L "interrupt" 1 797 "int32" `636 
f B "interrupt_enabled" 1 797 "int8(int32 interrupt)" `635 
v L "source" 1 798 "int8" `638 
v L "edge" 1 798 "int8" `639 
f B "ext_int_edge" 1 798 "void(int8 source,int8 edge)" `637 
v L "address" 1 799 "int16" `641 
f B "jump_to_irs" 1 799 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 801 "0x40"
d G "H_TO_L" 1 802 "0"
d G "GLOBAL" 1 804 "0xF2C0"
d G "PERIPH" 1 805 "0xF240"
d G "INT_RTCC" 1 806 "0x00F220"
d G "INT_TIMER0" 1 807 "0x00F220"
d G "INT_TIMER1" 1 808 "0x009D01"
d G "INT_TIMER2" 1 809 "0x009D02"
d G "INT_TIMER3" 1 810 "0x00A002"
d G "INT_EXT_L2H" 1 811 "0x5000F210"
d G "INT_EXT_H2L" 1 812 "0x6000F210"
d G "INT_EXT" 1 813 "0x00F210"
d G "INT_EXT1_L2H" 1 814 "0x5001F008"
d G "INT_EXT1_H2L" 1 815 "0x6001F008"
d G "INT_EXT1" 1 816 "0x00F008"
d G "INT_EXT2_L2H" 1 817 "0x5002F010"
d G "INT_EXT2_H2L" 1 818 "0x6002F010"
d G "INT_EXT2" 1 819 "0x00F010"
d G "INT_RB" 1 820 "0x00FFF208"
d G "INT_PSP" 1 821 "0x009D80"
d G "INT_AD" 1 822 "0x009D40"
d G "INT_RDA" 1 823 "0x009D20"
d G "INT_TBE" 1 824 "0x009D10"
d G "INT_SSP" 1 825 "0x009D08"
d G "INT_CCP1" 1 826 "0x009D04"
d G "INT_CCP2" 1 827 "0x00A001"
d G "INT_BUSCOL" 1 828 "0x00A008"
d G "INT_LOWVOLT" 1 829 "0x00A004"
d G "INT_CANIRX" 1 830 "0x00A380"
d G "INT_CANWAKE" 1 831 "0x00A340"
d G "INT_CANERR" 1 832 "0x00A320"
d G "INT_COMP" 1 833 "0x00A040"
d G "INT_EEPROM" 1 834 "0x00A010"
d G "INT_CANTX2" 1 835 "0x00A310"
d G "INT_CANTX1" 1 836 "0x00A308"
d G "INT_CANTX0" 1 837 "0x00A304"
d G "INT_CANRX1" 1 838 "0x00A302"
d G "INT_CANRX0" 1 839 "0x00A301"
d G "INT_OSCF" 1 840 "0x00A080"
D G "_STDIO" 2 12 ""
D G "_STRING" 3 12 ""
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 21 "unsigned int8"
D G "wchar_t" 4 22 "char"
D G "NULL" 4 23 "0"
D G "offsetof" 4 25 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 5 12 ""
D G "islower" 5 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 5 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 5 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 5 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 5 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 5 19 "(x)  ((x)==' ')"
D G "isxdigit" 5 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 5 21 "(x)  ((x)<' ')"
D G "isprint" 5 22 "(x)  ((x)>=' ')"
D G "isgraph" 5 23 "(x)  ((x)>' ')"
D G "ispunct" 5 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 3 19 10 "FUNCTION"
V L "s1" 3 34 "*int8" `657 
V L "s2" 3 34 "*int8" `658 
V L "n" 3 34 "int8" `659 
F G "memmove" 3 35 "*int8(*int8 s1,*int8 s2,int8 n)" `656 
V L "sc1" 3 36 "*int8" `660 
V L "sc2" 3 37 "*int8" `661 
D G "strcopy" 3 54 "strcpy"
C L "strncpy" 3 19 4 "FUNCTION"
V L "s1" 3 61 "*int8" `663 
V L "s2" 3 61 "*int8" `664 
V L "n" 3 61 "int8" `665 
F G "strncpy" 3 62 "*int8(*int8 s1,*int8 s2,int8 n)" `662 
V L "s" 3 63 "*int8" `666 
C L "strcat" 3 19 3 "FUNCTION"
V L "s1" 3 78 "*int8" `668 
V L "s2" 3 78 "*int8" `669 
F G "strcat" 3 79 "*int8(*int8 s1,*int8 s2)" `667 
V L "s" 3 80 "*int8" `670 
C L "strncat" 3 19 2 "FUNCTION"
V L "s1" 3 96 "*int8" `672 
V L "s2" 3 96 "*int8" `673 
V L "n" 3 96 "int8" `674 
F G "strncat" 3 97 "*int8(*int8 s1,*int8 s2,int8 n)" `671 
V L "s" 3 98 "*int8" `675 
C L "memcmp" 3 19 3 "FUNCTION"
V L "s1" 3 120 "*int8" `677 
V L "s2" 3 120 "*int8" `678 
V L "n" 3 120 "int8" `679 
F G "memcmp" 3 121 "sint8(*int8 s1,*int8 s2,int8 n)" `676 
V L "su1" 3 122 "*int8" `680 
V L "su2" 3 122 "*int8" `681 
C L "strcmp" 3 19 2 "FUNCTION"
V L "s1" 3 134 "*int8" `683 
V L "s2" 3 134 "*int8" `684 
F G "strcmp" 3 135 "sint8(*int8 s1,*int8 s2)" `682 
C L "strcoll" 3 19 2 "FUNCTION"
V L "s1" 3 144 "*int8" `686 
V L "s2" 3 144 "*int8" `687 
F G "strcoll" 3 145 "sint8(*int8 s1,*int8 s2)" `685 
C L "strncmp" 3 19 4 "FUNCTION"
V L "s1" 3 157 "*int8" `689 
V L "s2" 3 157 "*int8" `690 
V L "n" 3 157 "int8" `691 
F G "strncmp" 3 158 "sint8(*int8 s1,*int8 s2,int8 n)" `688 
C L "strxfrm" 3 19 3 "FUNCTION"
V L "s1" 3 169 "*int8" `693 
V L "s2" 3 169 "*int8" `694 
V L "n" 3 169 "int8" `695 
F G "strxfrm" 3 170 "int8(*int8 s1,*int8 s2,int8 n)" `692 
V L "s" 3 171 "*int8" `696 
V L "n1" 3 172 "int8" `697 
C L "memchr" 3 19 3 "FUNCTION"
V L "s" 3 191 "*int8" `699 
V L "c" 3 191 "int8" `700 
V L "n" 3 191 "int8" `701 
F G "memchr" 3 192 "*int8(*int8 s,int8 c,int8 n)" `698 
V L "uc" 3 193 "int8" `702 
V L "su" 3 194 "*int8" `703 
C L "strchr" 3 19 2 "FUNCTION"
V L "s" 3 205 "*int8" `705 
V L "c" 3 205 "int8" `706 
F G "strchr" 3 206 "*int8(*int8 s,int8 c)" `704 
C L "strcspn" 3 19 4 "FUNCTION"
V L "s1" 3 217 "*int8" `708 
V L "s2" 3 217 "*int8" `709 
F G "strcspn" 3 218 "int8(*int8 s1,*int8 s2)" `707 
V L "sc1" 3 219 "*int8" `710 
V L "sc2" 3 219 "*int8" `711 
C L "strpbrk" 3 19 4 "FUNCTION"
V L "s1" 3 232 "*int8" `713 
V L "s2" 3 232 "*int8" `714 
F G "strpbrk" 3 233 "*int8(*int8 s1,*int8 s2)" `712 
V L "sc1" 3 234 "*int8" `715 
V L "sc2" 3 234 "*int8" `716 
C L "strrchr" 3 19 2 "FUNCTION"
V L "s" 3 247 "*int8" `718 
V L "c" 3 247 "int8" `719 
F G "strrchr" 3 248 "*int8(*int8 s,int8 c)" `717 
V L "p" 3 249 "*int8" `720 
C L "strspn" 3 19 2 "FUNCTION"
V L "s1" 3 262 "*int8" `722 
V L "s2" 3 262 "*int8" `723 
F G "strspn" 3 263 "int8(*int8 s1,*int8 s2)" `721 
V L "sc1" 3 264 "*int8" `724 
V L "sc2" 3 264 "*int8" `725 
C L "strstr" 3 19 6 "FUNCTION"
V L "s1" 3 281 "*int8" `727 
V L "s2" 3 281 "*int8" `728 
F G "strstr" 3 282 "*int8(*int8 s1,*int8 s2)" `726 
V L "s" 3 283 "*int8" `729 
V L "t" 3 283 "*int8" `730 
C L "strtok" 3 19 13 "FUNCTION"
V L "s1" 3 320 "*int8" `732 
V L "s2" 3 320 "*int8" `733 
F G "strtok" 3 321 "*int8(*int8 s1,*int8 s2)" `731 
V L "beg" 3 322 "*int8" `734 
V L "end" 3 322 "*int8" `735 
V L "save" 3 323 "*int8" `736 
C L "strlen" 3 19 6 "FUNCTION"
V L "s" 3 369 "*int8" `738 
F G "strlen" 3 370 "int8(*int8 s)" `737 
V L "sc" 3 371 "*int8" `739 
C L "stricmp" 3 19 2 "FUNCTION"
V L "s1" 3 380 "*int8" `741 
V L "s2" 3 380 "*int8" `742 
F G "stricmp" 3 381 "sint8(*int8 s1,*int8 s2)" `740 
C L "strlwr" 3 19 3 "FUNCTION"
V L "s" 3 394 "*int8" `746 
F G "strlwr" 3 395 "*int8(*int8 s)" `745 
V L "p" 3 396 "*int8" `747 
D G "_STDLIB" 6 12 ""
D G "RAND_MAX" 6 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 6 25 "1"
T G "div_t" 6 33 "{sint8 quot,sint8 rem}" `751 
T G "ldiv_t" 6 38 "{sint16 quot,sint16 rem}" `755  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 4 3 6 "FUNCTION"
C L "atoi" 6 43 2 "FUNCTION"
C L "atoi" 6 46 1 "*"
C L "atoi" 6 46 1 "*"
V L "s" 6 50 "*int8" `757 
f G "atoi" 6 50 "sint8(*int8 s)" `756  "Syntax: signed int32  atoi32(char * s)"
V L "s" 6 58 "*int8" `759 
f G "atoi32" 6 58 "sint32(*int8 s)" `758  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 6 46 2 "FUNCTION"
V L "num" 6 79 "sint32" `761 
V L "base" 6 79 "int8" `762 
V L "s" 6 79 "*int8" `763 
f G "itoa" 6 79 "*int8(sint32 num,int8 base,*int8 s)" `760  "Standard template: signed int16  atol(char * s)"
C L "itoa" 6 81 1 "*"
C L "itoa" 6 81 1 "*"
V L "s" 6 85 "*int8" `765 
f G "atol" 6 85 "sint16(*int8 s)" `764  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
C L "atol" 6 87 1 "*"
V L "s" 6 93 "*int8" `767 
V L "endptr" 6 93 "*int8" `768 
V L "base" 6 93 "sint8" `769 
f G "strtol" 6 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `766  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
C L "strtol" 6 95 1 "*"
V L "s" 6 101 "*int8" `771 
V L "endptr" 6 101 "*int8" `772 
V L "base" 6 101 "sint8" `773 
f G "strtoul" 6 101 "int16(*int8 s,*int8 endptr,sint8 base)" `770  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 6 95 2 "FUNCTION"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
C L "strtoul" 6 103 1 "*"
V L "s" 6 110 "*int8" `775 
V L "endptr" 6 110 "*int8" `776 
f G "strtof" 6 110 "float(*int8 s,*int8 endptr)" `774  "provided for compatibility"
D G "strtof48" 6 116 "(s, e) strtof(s, e)"
D G "strtod" 6 117 "(s, e) strtof(s, e)"
C L "strtof" 6 103 1 "FUNCTION"
C L "strtof" 6 120 1 "*"
D G "atof" 6 124 "(s)   strtof(s, 0)"
C L "strtof" 6 120 1 "FUNCTION"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
C L "strtof" 6 143 1 "*"
V L "s" 6 149 "*int8" `778 
f G "atoe" 6 149 "float(*int8 s)" `777  "Pseudo-random sequence generation functions"
C L "atoe" 6 143 1 "FUNCTION"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
C L "atoe" 6 160 1 "*"
f G "rand" 6 169 "int16()" `779  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
C L "rand" 6 171 1 "*"
V L "seed" 6 191 "int32" `781 
f G "srand" 6 191 "void(int32 seed)" `780  "Memory management functions"
C L "srand" 6 171 3 "FUNCTION"
V L "string" 6 205 "*int8" `783 
f G "system" 6 205 "sint8(*int8 string)" `782  "Searching and sorting utilities"
C L "system" 6 171 1 "FUNCTION"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 1 "*"
C L "system" 6 211 4 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
C L "system" 6 229 1 "*"
D G "labs" 6 249 "abs"
V L "numer" 6 251 "sint8" `785 
V L "denom" 6 251 "sint8" `786 
f G "div" 6 251 "div_t(sint8 numer,sint8 denom)" `784 
V L "numer" 6 252 "sint16" `788 
V L "denom" 6 252 "sint16" `789 
f G "ldiv" 6 252 "ldiv_t(sint16 numer,sint16 denom)" `787  "Multibyte character functions"
C L "ldiv" 6 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
C L "ldiv" 3 2 7 "FUNCTION"
V L "numer" 6 274 "sint8" `785 
V L "denom" 6 274 "sint8" `792 
F G "div" 6 275 "div_t(sint8 numer,sint8 denom)" `784 
V L "val" 6 276 "div_t" `790 
V L "numer" 6 282 "sint16" `788 
V L "denom" 6 282 "sint16" `799 
F G "ldiv" 6 283 "ldiv_t(sint16 numer,sint16 denom)" `787 
V L "val" 6 284 "ldiv_t" `797 
V L "s" 6 361 "*int8" `805 
F G "atoe" 6 362 "float(*int8 s)" `777 
V L "pow10" 6 363 "float" `804 
V L "result" 6 364 "float" `805 
V L "sign" 6 365 "int8" `806 
V L "expsign" 6 366 "int8" `807 
V L "c" 6 367 "int8" `808 
V L "ptr" 6 368 "int8" `809 
V L "i" 6 369 "int8" `810 
V L "exp" 6 370 "float" `811 
V L "expcnt" 6 371 "int8" `812 
C L "atoe" 6 397 1 "FUNCTION"
V L "s" 6 429 "*int8" `825 
F G "atoi" 6 430 "sint8(*int8 s)" `756 
V L "result" 6 431 "sint8" `824 
V L "sign" 6 432 "int8" `825 
V L "base" 6 432 "int8" `826 
V L "index" 6 432 "int8" `827 
V L "c" 6 433 "int8" `828 
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
C L "atoi" 6 397 1 "FUNCTION"
V L "s" 6 498 "*int8" `830 
F G "atol" 6 499 "sint16(*int8 s)" `764 
V L "result" 6 500 "sint16" `829 
V L "sign" 6 501 "int8" `830 
V L "base" 6 501 "int8" `831 
V L "index" 6 501 "int8" `832 
V L "c" 6 502 "int8" `833 
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "atol" 6 397 1 "FUNCTION"
C L "mult_with10" 6 397 1 "FUNCTION"
V L "num" 6 565 "int32" `835 
F G "mult_with10" 6 566 "sint32(int32 num)" `834 
V L "s" 6 571 "*int8" `837 
F G "atoi32" 6 572 "sint32(*int8 s)" `758 
V L "result" 6 573 "sint32" `836 
V L "sign" 6 574 "int8" `837 
V L "base" 6 574 "int8" `838 
V L "index" 6 574 "int8" `839 
V L "c" 6 575 "int8" `840 
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
C L "atoi32" 6 397 1 "FUNCTION"
V L "num" 6 770 "sint32" `761 
V L "base" 6 770 "int8" `762 
V L "s" 6 770 "*int8" `844 
F G "itoa" 6 771 "*int8(sint32 num,int8 base,*int8 s)" `760 
V L "temp" 6 772 "int32" `841 
V L "i" 6 773 "int8" `842 
V L "sign" 6 773 "int8" `843 
V L "cnt" 6 773 "int8" `844 
V L "c" 6 774 "int8" `845 
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
C L "itoa" 6 397 1 "FUNCTION"
V L "s" 6 807 "*int8" `775 
V L "endptr" 6 807 "*int8" `854 
F G "strtof" 6 808 "float(*int8 s,*int8 endptr)" `774 
V L "pow10" 6 809 "float" `852 
V L "result" 6 810 "float" `853 
V L "skip" 6 811 "int1" `854 
V L "sign" 6 811 "int1" `855 
V L "point" 6 811 "int1" `856 
V L "c" 6 812 "int8" `857 
V L "ptr" 6 813 "int8" `858 
V L "s" 6 1025 "*int8" `771 
V L "endptr" 6 1025 "*int8" `772 
V L "base" 6 1025 "sint8" `863 
F G "strtoul" 6 1026 "int16(*int8 s,*int8 endptr,sint8 base)" `770 
V L "sc" 6 1027 "*int8" `860 
V L "s1" 6 1027 "*int8" `861 
V L "sd" 6 1027 "*int8" `862 
V L "x" 6 1028 "int16" `863 
V L "sign" 6 1029 "int8" `864 
V L "digits" 6 1030 "int8[1]" `865 
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
C L "strtoul" 6 397 1 "FUNCTION"
V L "s" 6 1087 "*int8" `767 
V L "endptr" 6 1087 "*int8" `768 
V L "base" 6 1087 "sint8" `870 
F G "strtol" 6 1088 "sint16(*int8 s,*int8 endptr,sint8 base)" `766 
V L "sc" 6 1089 "*int8" `867 
V L "s1" 6 1089 "*int8" `868 
V L "sd" 6 1089 "*int8" `869 
V L "x" 6 1090 "sint16" `870 
V L "sign" 6 1091 "int8" `871 
V L "digits" 6 1092 "int8[1]" `872 
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
C L "strtol" 6 397 1 "FUNCTION"
V L "string" 6 1150 "*int8" `875 
F G "system" 6 1151 "sint8(*int8 string)" `782 
V L "s" 6 1155 "*int8" `875 
V L "n" 6 1155 "int8" `876 
F G "mblen" 6 1156 "int8(*int8 s,int8 n)" `874 
V L "pwc" 6 1160 "*int8" `878 
V L "s" 6 1160 "*int8" `879 
V L "n" 6 1160 "int8" `880 
F G "mbtowc" 6 1161 "int8(*int8 pwc,*int8 s,int8 n)" `877 
V L "s" 6 1166 "*int8" `882 
V L "wchar" 6 1166 "int8" `883 
F G "wctomb" 6 1167 "int8(*int8 s,int8 wchar)" `881 
V L "pwcs" 6 1172 "*int8" `885 
V L "s" 6 1172 "*int8" `886 
V L "n" 6 1172 "int8" `887 
F G "mbstowcs" 6 1173 "int8(*int8 pwcs,*int8 s,int8 n)" `884 
V L "s" 6 1178 "*int8" `889 
V L "pwcs" 6 1178 "*int8" `890 
V L "n" 6 1178 "int8" `891 
F G "wcstombs" 6 1179 "int8(*int8 s,*int8 pwcs,int8 n)" `888 
V G "_Randseed" 6 1188 "int32" `892 
F G "rand" 6 1191 "int16()" `779 
V L "seed" 6 1196 "int32" `897 
F G "srand" 6 1197 "void(int32 seed)" `780 
V L "p1" 6 1206 "*int8" `897 
V L "p2" 6 1206 "*int8" `898 
T G "*_Cmpfun" 6 1206 "sint8(*int8 p1,*int8 p2)" `896 
V L "qdata" 6 1213 "*int8" `901 
V L "qitems" 6 1213 "int8" `902 
V L "qsize" 6 1213 "int8" `903 
V L "cmp" 6 1213 "_Cmpfun" `904 
F G "qsort" 6 1213 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `900 
V L "m" 6 1214 "int8" `905 
V L "j" 6 1214 "int8" `906 
V L "i" 6 1214 "int8" `907 
V L "l" 6 1214 "int8" `908 
V L "done" 6 1215 "int1" `909 
V L "t" 6 1216 "int8[16]" `910 
V L "key" 6 1241 "*int8" `913 
V L "base" 6 1241 "*int8" `914 
V L "num" 6 1241 "int8" `915 
V L "width" 6 1241 "int8" `916 
V L "cmp" 6 1241 "_Cmpfun" `917 
F G "bsearch" 6 1242 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `912 
V L "p" 6 1243 "*int8" `918 
V L "q" 6 1243 "*int8" `919 
V L "n" 6 1244 "int8" `920 
V L "pivot" 6 1245 "int8" `921 
V L "val" 6 1246 "sint8" `922 
C L "bsearch" 6 397 1 "FUNCTION"
D G "MATH_H" 7 30 ""
D G "PI" 7 35 "3.1415926535897932"
D G "SQRT2" 7 38 "1.4142135623730950"
C L "CEIL_FLOOR" 7 2 3 "FUNCTION"
V L "x" 7 45 "float" `924 
V L "n" 7 45 "int8" `925 
F G "CEIL_FLOOR" 7 46 "float(float x,int8 n)" `923 
V L "y" 7 47 "float" `926 
V L "res" 7 47 "float" `927 
V L "l" 7 48 "int16" `928 
V L "s" 7 49 "int1" `929 
C L "floor" 7 2 5 "FUNCTION"
V L "x" 7 207 "float" `936 
F G "floor" 7 208 "float(float x)" `935 
C L "ceil" 7 2 5 "FUNCTION"
V L "x" 7 233 "float" `938 
F G "ceil" 7 234 "float(float x)" `937 
D G "fabs" 7 259 "abs"
C L "fmod" 7 2 6 "FUNCTION"
V L "x" 7 271 "float" `940 
V L "y" 7 271 "float" `941 
F G "fmod" 7 272 "float(float x,float y)" `939 
V L "i" 7 273 "float" `942 
D G "LN2" 7 334 "0.6931471805599453"
D G "LN2_INV" 7 335 "1.4426950408889634073"
V G "pe" 7 337 "[6]" `943 
V L "x" 7 341 "float" `947 
F G "exp" 7 342 "float(float x)" `946 
V L "y" 7 343 "float" `948 
V L "res" 7 343 "float" `949 
V L "r" 7 343 "float" `950 
V L "n" 7 347 "sint8" `951 
V L "s" 7 348 "int1" `952 
C L "exp" 7 2 1 "FUNCTION"
V G "pl" 7 525 "[4]" `955 
V G "ql" 7 526 "[4]" `958 
C L "log" 7 2 3 "FUNCTION"
V L "x" 7 534 "float" `962 
F G "log" 7 535 "float(float x)" `961 
V L "y" 7 536 "float" `963 
V L "res" 7 536 "float" `964 
V L "r" 7 536 "float" `965 
V L "y2" 7 536 "float" `966 
V L "n" 7 540 "sint8" `967 
C L "log" 7 2 1 "FUNCTION"
D G "LN10" 7 758 "2.3025850929940456"
D G "LN10_INV" 7 759 "0.4342944819032518276"
C L "log10" 7 2 3 "FUNCTION"
V L "x" 7 767 "float" `969 
F G "log10" 7 768 "float(float x)" `968 
V L "r" 7 769 "float" `970 
C L "modf" 7 2 8 "FUNCTION"
V L "value" 7 808 "float" `972 
V L "iptr" 7 808 "*float" `973 
F G "modf" 7 809 "float(float value,*float iptr)" `971 
C L "pwr" 7 2 6 "FUNCTION"
V L "x" 7 836 "float" `975 
V L "y" 7 836 "float" `976 
F G "pwr" 7 837 "float(float x,float y)" `974 
C L "pow" 7 2 7 "FUNCTION"
V L "x" 7 899 "float" `978 
V L "y" 7 899 "float" `979 
F G "pow" 7 900 "float(float x,float y)" `977 
C L "sqrt" 7 2 5 "FUNCTION"
V L "x" 7 960 "float" `981 
F G "sqrt" 7 961 "float(float x)" `980 
V L "y" 7 962 "float" `982 
V L "res" 7 962 "float" `983 
V L "p" 7 966 "*int8" `984 
D G "PI_DIV_BY_TWO_INV" 7 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 7 1159 "1.5707963267948966"
D G "TWOBYPI" 7 1163 "0.6366197723675813"
C L "cos" 7 2 3 "FUNCTION"
V L "x" 7 1171 "float" `986 
F G "cos" 7 1172 "float(float x)" `985 
V L "y" 7 1173 "float" `987 
V L "t" 7 1173 "float" `988 
V L "t2" 7 1173 "float" `989 
V L "quad" 7 1174 "int8" `990 
V L "i" 7 1174 "int8" `991 
V L "frac" 7 1175 "float" `992 
V L "p" 7 1176 "float[5]" `993  "by the series definition for cosine"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 2 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "cos" 7 2 1 "FUNCTION"
C L "sin" 7 2 5 "FUNCTION"
V L "x" 7 1312 "float" `995 
F G "sin" 7 1313 "float(float x)" `994 
C L "tan" 7 2 5 "FUNCTION"
V L "x" 7 1338 "float" `997 
F G "tan" 7 1339 "float(float x)" `996 
V L "c" 7 1340 "float" `998 
V L "s" 7 1340 "float" `999 
V G "pas" 7 1378 "[3]" `1000 
V G "qas" 7 1379 "[3]" `1003 
V L "x" 7 1381 "float" `1007 
V L "n" 7 1381 "int8" `1008 
F G "ASIN_COS" 7 1382 "float(float x,int8 n)" `1006 
V L "y" 7 1383 "float" `1009 
V L "res" 7 1383 "float" `1010 
V L "r" 7 1383 "float" `1011 
V L "y2" 7 1383 "float" `1012 
V L "s" 7 1384 "int1" `1013 
C L "ASIN_COS" 7 2 1 "FUNCTION"
C L "ASIN_COS" 7 2 1 "FUNCTION"
C L "asin" 7 2 5 "FUNCTION"
V L "x" 7 1539 "float" `1015 
F G "asin" 7 1540 "float(float x)" `1014 
V L "r" 7 1541 "float" `1016 
C L "acos" 7 2 5 "FUNCTION"
V L "x" 7 1573 "float" `1018 
F G "acos" 7 1574 "float(float x)" `1017 
V L "r" 7 1575 "float" `1019 
V G "pat" 7 1601 "[4]" `1020 
V G "qat" 7 1602 "[4]" `1023 
C L "atan" 7 2 3 "FUNCTION"
V L "x" 7 1610 "float" `1027 
F G "atan" 7 1611 "float(float x)" `1026 
V L "y" 7 1612 "float" `1028 
V L "res" 7 1612 "float" `1029 
V L "r" 7 1612 "float" `1030 
V L "s" 7 1613 "int1" `1031 
V L "flag" 7 1613 "int1" `1032 
C L "atan" 7 2 1 "FUNCTION"
C L "atan2" 7 2 7 "FUNCTION"
V L "y" 7 1753 "float" `1034 
V L "x" 7 1753 "float" `1035 
F G "atan2" 7 1754 "float(float y,float x)" `1033 
V L "z" 7 1755 "float" `1036 
V L "sign" 7 1756 "int1" `1037 
V L "quad" 7 1757 "int8" `1038 
C L "atan2" 7 2 1 "FUNCTION"
C L "atan2" 7 2 1 "FUNCTION"
C L "cosh" 7 2 7 "FUNCTION"
V L "x" 7 1975 "float" `1041 
F G "cosh" 7 1976 "float(float x)" `1040 
C L "sinh" 7 2 6 "FUNCTION"
V L "x" 7 2002 "float" `1043 
F G "sinh" 7 2003 "float(float x)" `1042 
C L "tanh" 7 2 6 "FUNCTION"
V L "x" 7 2032 "float" `1045 
F G "tanh" 7 2033 "float(float x)" `1044 
D G "LOG2" 7 2062 ".30102999566398119521"
D G "LOG2_INV" 7 2063 "3.32192809488736234787"
V L "x" 7 2064 "float" `1047 
V L "exp" 7 2064 "*sint8" `1048 
F G "frexp" 7 2065 "float(float x,*sint8 exp)" `1046 
V L "res" 7 2066 "float" `1049 
V L "sign" 7 2067 "int1" `1050 
C L "ldexp" 7 2 6 "FUNCTION"
V L "value" 7 2209 "float" `1052 
V L "exp" 7 2209 "sint8" `1053 
F G "ldexp" 7 2210 "float(float value,sint8 exp)" `1051 
D G "RTC_SCLK" 8 33 "PIN_D5"
D G "RTC_IO" 8 34 "PIN_D6"
D G "RTC_RST" 8 35 "PIN_D7"
C L "write_ds1302_byte" 8 2 1 "FUNCTION"
V L "cmd" 8 39 "int8" `1055 
F G "write_ds1302_byte" 8 39 "void(int8 cmd)" `1054 
V L "i" 8 40 "int8" `1056 
V L "cmd" 8 49 "int8" `1058 
V L "data" 8 49 "int8" `1059 
F G "write_ds1302" 8 49 "void(int8 cmd,int8 data)" `1057 
V L "cmd" 8 57 "int8" `1061 
F G "read_ds1302" 8 57 "int8(int8 cmd)" `1060 
V L "i" 8 58 "int8" `1062 
V L "data" 8 58 "int8" `1063 
F G "rtc_init" 8 78 "void()" `1064 
V L "x" 8 79 "int8" `1065 
V L "data" 8 90 "int8" `1067 
F G "get_bcd" 8 91 "int8(int8 data)" `1066 
V L "nibh" 8 92 "int8" `1068 
V L "nibl" 8 93 "int8" `1069 
V L "data" 8 101 "int8" `1074 
F G "rm_bcd" 8 102 "int8(int8 data)" `1073 
V L "i" 8 103 "int8" `1075 
V L "day" 8 112 "int8" `1077 
V L "mth" 8 112 "int8" `1078 
V L "year" 8 112 "int8" `1079 
V L "dow" 8 112 "int8" `1080 
V L "hr" 8 112 "int8" `1081 
V L "min" 8 112 "int8" `1082 
F G "rtc_set_datetime" 8 112 "void(int8 day,int8 mth,int8 year,int8 dow,int8 hr,int8 min)" `1076 
V L "day" 8 123 "int8" `1084 
V L "mth" 8 123 "int8" `1085 
V L "year" 8 123 "int8" `1086 
V L "dow" 8 123 "int8" `1087 
F G "rtc_get_date" 8 123 "void(int8 day,int8 mth,int8 year,int8 dow)" `1083 
V L "hr" 8 130 "int8" `1089 
V L "min" 8 130 "int8" `1090 
V L "sec" 8 130 "int8" `1091 
F G "rtc_get_time" 8 130 "void(int8 hr,int8 min,int8 sec)" `1088 
V L "address" 8 136 "int8" `1093 
V L "data" 8 136 "int8" `1094 
F G "rtc_write_nvr" 8 136 "void(int8 address,int8 data)" `1092 
V L "address" 8 140 "int8" `1096 
F G "rtc_read_nvr" 8 140 "int8(int8 address)" `1095 
D G "EEPROM_SDA" 9 25 "PIN_E2"
D G "EEPROM_SCL" 9 26 "PIN_E1"
D G "EEPROM_ADDRESS" 9 32 "long int"
D G "EEPROM_SIZE" 9 33 "65535"
F G "init_ext_eeprom" 9 36 "void()" `1097 
V L "address" 9 42 "int16" `1099 
V L "data" 9 42 "int8" `1100 
F G "write_ext_eeprom" 9 43 "void(int16 address,int8 data)" `1098 
V L "address" 9 52 "int16" `1102 
F G "read_ext_eeprom" 9 52 "int8(int16 address)" `1101 
V L "data" 9 53 "int8" `1103 
D G "desvio" 0 18 "0.5"
D G "desvioH" 0 19 "2.0"
D G "aa" 0 20 "-2.4560"
D G "bb" 0 21 "19.801"
D G "cc" 0 22 "-73.195"
D G "dd" 0 23 "122.55;"
D G "Tmax" 0 25 "70.0"
D G "Tmin" 0 26 "0.0"
D G "Hmax" 0 27 "90.0"
D G "Hmin" 0 28 "10.0"
D G "tmuestreo" 0 30 "300.0"
D G "tiempoLlenado" 0 32 "300"
D G "DOOR" 0 34 "!input(PIN_E0)"
D G "TERM" 0 35 "!input(PIN_A4)"
D G "SSR1_on" 0 37 "output_bit(PIN_C1,1)"
D G "SSR1_off" 0 38 "output_bit(PIN_C1,0)"
D G "SSR2_on" 0 40 "output_bit(PIN_C2,1)"
D G "SSR2_off" 0 41 "output_bit(PIN_C2,0)"
D G "AC2_on" 0 43 "output_bit(PIN_D1,0)"
D G "AC2_off" 0 44 "output_bit(PIN_D1,1)"
D G "AC3_on" 0 46 "output_bit(PIN_D2,0)"
D G "AC3_off" 0 47 "output_bit(PIN_D2,1)"
D G "AC4_on" 0 49 "output_bit(PIN_D3,1)"
D G "AC4_off" 0 50 "output_bit(PIN_D3,0)"
D G "DC1_on" 0 52 "output_bit(PIN_B2,1)" "Deshumidificador"
D G "DC1_off" 0 53 "output_bit(PIN_B2,0)"
D G "DC2_on" 0 55 "output_bit(PIN_B3,1)" "Humidificador"
D G "DC2_off" 0 56 "output_bit(PIN_B3,0)"
D G "DC3_on" 0 58 "output_bit(PIN_B4,1)" "Ventilador Humidificador"
D G "DC3_off" 0 59 "output_bit(PIN_B4,0)"
D G "DC4_on" 0 61 "output_bit(PIN_B5,1)" "Ventilador Interno Peltier"
D G "DC4_off" 0 62 "output_bit(PIN_B5,0)"
D G "DC5_on" 0 64 "output_bit(PIN_B6,1)"
D G "DC5_off" 0 65 "output_bit(PIN_B6,0)"
D G "DC6_on" 0 67 "output_bit(PIN_B7,1)" "Ventilador Externo Peltier"
D G "DC6_off" 0 68 "output_bit(PIN_B7,0)"
D G "Buzzer_on" 0 70 "output_bit(PIN_C0,1)"
D G "Buzzer_off" 0 71 "output_bit(PIN_C0,0)"
D G "Display_on" 0 73 "output_bit(PIN_D4,1)"
D G "Display_off" 0 74 "output_bit(PIN_D4,0)"
D G "AC1_on" 0 76 "output_bit(PIN_D0,0)"
D G "AC1_off" 0 77 "output_bit(PIN_D0,1)"
D G "OFF" 0 80 "0"
D G "ON" 0 81 "1"
D G "anchoGrafica" 0 82 "40.0"
D G "Control_PWM" 0 83 "1"
V G "SlaveB0Tx" 0 86 "int8[32]" `1104 
V G "SlaveC0Tx" 0 87 "int8[32]" `1105 
V G "SlaveB0Rx" 0 88 "int8[32]" `1106 
V G "dato" 0 89 "int8" `1107 
V G "direccion" 0 90 "int8" `1108 
V G "posicion" 0 91 "int8" `1109 
V G "Regular" 0 94 "int8[12]" `1110 
V G "Bisiesto" 0 95 "int8[12]" `1111 
V G "desconectoTemperatura" 0 97 "int1" `1112 
V G "desconectoHumedad" 0 97 "int1" `1113 
V G "graficaa" 0 97 "int1" `1114 
V G "flagMotor" 0 97 "int1" `1115 
V G "Humidificar" 0 97 "int1" `1116 
V G "dehumidificador" 0 97 "int1" `1117 
V G "humidificador" 0 97 "int1" `1118 
V G "flagHumedad" 0 97 "int1" `1119 
V G "flagAlarma" 0 97 "int1" `1120 
V G "flagBuzzer" 0 97 "int1" `1121 
V G "flagSobrepasoHumedad" 0 98 "int1" `1122 
V G "estadoVentilador" 0 98 "int1" `1123 
V G "flagTem" 0 98 "int1" `1124 
V G "flagHum" 0 98 "int1" `1125 
V G "alarmaT" 0 98 "int1" `1126 
V G "alarmaH" 0 98 "int1" `1127 
V G "entroRampa" 0 98 "int1" `1128 
V G "Controlando" 0 98 "int1" `1129 
V G "controlaH" 0 98 "int1" `1130 
V G "calculaMediana" 0 98 "int1" `1131 
V G "estadoLuz" 0 98 "int1" `1132 
V G "T1Humedad" 0 99 "int8" `1133 
V G "T2Humedad" 0 99 "int8" `1134 
V G "T3Humedad" 0 99 "int8" `1135 
V G "tDisplay" 0 99 "int8" `1136 
V G "mediaLuces" 0 99 "int8" `1137 
V G "conteoAlarma" 0 99 "int8" `1138 
V G "ajustaIP" 0 99 "int8" `1139 
V G "tdehumidificador" 0 100 "int16" `1140 
V G "thumidificador" 0 100 "int16" `1141 
V G "data" 0 100 "int16" `1142 
V G "data2" 0 100 "int16" `1143 
V G "datacount" 0 100 "int16" `1144 
V G "pwm2" 0 100 "int16" `1145 
V G "tCongela" 0 100 "int16" `1146 
V G "tllenado" 0 100 "int16" `1147 
V G "tCalentamiento" 0 100 "int16" `1148 
V G "thumidificacion" 0 100 "int16" `1149 
V G "tbuzzer" 0 100 "int16" `1150 
V G "ConteoBuzzer" 0 100 "int16" `1151 
V G "Vel1" 0 102 "int8" `1152 
V G "SetpointH" 0 102 "int8" `1153 
V G "controlL" 0 102 "int8" `1154 
V G "alarma" 0 102 "int8" `1155 
V G "nivelBajo" 0 102 "int8" `1156 
V G "nivelAlto" 0 102 "int8" `1157 
V G "bomba" 0 102 "int8" `1158 
V G "yy" 0 102 "int8" `1159 
V G "Opcion2" 0 103 "int8" `1160 
V G "Derivativo" 0 103 "int8" `1161 
V G "Integral" 0 103 "int8" `1162 
V G "MediaMovil" 0 103 "int8" `1163 
V G "MediaMovil2" 0 103 "int8" `1164 
V G "Tciclo" 0 103 "int8" `1165 
V G "Ajuste" 0 103 "int8" `1166 
V G "Ajusten" 0 103 "int8" `1167 
V G "Ajuste2" 0 103 "int8" `1168 
V G "Ajusten2" 0 103 "int8" `1169 
V G "Modulo" 0 103 "int8" `1170 
V G "Ajusto" 0 103 "int8" `1171 
V G "derivativo_ant" 0 104 "int16" `1172 
V G "T1" 0 104 "int16" `1173 
V G "T3" 0 104 "int16" `1174 
V G "tSobrepaso" 0 104 "int16" `1175 
V G "i" 0 104 "int16" `1176 
V G "n" 0 104 "int16" `1177 
V G "tDisplayHumedad" 0 104 "int16" `1178 
V G "tDefrost2" 0 104 "int16" `1179 
V G "pwm" 0 104 "int16" `1180 
V G "tpwm1" 0 104 "int16" `1181 
V G "tpwm2" 0 104 "int16" `1182 
V G "TcH" 0 104 "int16" `1183 
V G "Tph" 0 104 "int16" `1184 
V G "Setpoint" 0 105 "float" `1185 
V G "SetpointAnt" 0 105 "float" `1186 
V G "minH" 0 105 "float" `1187 
V G "maxH" 0 105 "float" `1188 
V G "alarmaTemperatura" 0 105 "float" `1189 
V G "alarmaHumedad" 0 105 "float" `1190 
V G "d6" 0 105 "float" `1191 
V G "Factor" 0 105 "float" `1192 
V G "tmp3" 0 105 "float" `1193 
V G "PotenciaH" 0 105 "float" `1194 
V G "tGrafica" 0 106 "int32" `1195 
V G "dibujo" 0 107 "int1" `1196 
V G "pulsoAumentar" 0 107 "int1" `1197 
V G "pulsoDisminuir" 0 107 "int1" `1198 
V G "flagBorrado" 0 107 "int1" `1199 
V G "alarmaSobreT" 0 107 "int1" `1200 
V G "inicioControlT" 0 108 "int1" `1201 
V G "inicioControlH" 0 108 "int1" `1202 
V G "inicioControlL" 0 108 "int1" `1203 
V G "Ganancia" 0 109 "float" `1204 
V G "errorH" 0 109 "float" `1205 
V G "TpulsoH" 0 109 "float" `1206 
V G "TcicloH" 0 109 "float" `1207 
V G "GananciaH" 0 109 "float" `1208 
V G "GananciaRH" 0 109 "float" `1209 
V G "Temperature2" 0 110 "int32" `1210 
D G "RX_BUFFER_SIZE" 0 112 "10"
V G "Rx_Buffer" 0 113 "int8[11]" `1211 
V G "Rx_Buffer2" 0 114 "int8[11]" `1212 
V G "RX_Wr_Index" 0 115 "int8" `1213 
V G "pwm1" 0 117 "int16" `1214 
V G "pwm3" 0 117 "int16" `1215 
V G "Dato2" 0 118 "int8" `1216 
V G "Dato_Exitoso" 0 118 "int8" `1217 
V G "Menu" 0 118 "int8" `1218 
V G "MenuAntt" 0 118 "int8" `1219 
V G "z" 0 118 "int8" `1220 
V G "TipoClave" 0 118 "int8" `1221 
V G "Segmentos" 0 118 "int8" `1222 
V G "Opcion" 0 118 "int8" `1223 
V G "h" 0 118 "int8" `1224 
V G "l" 0 118 "int8" `1225 
V G "Dia" 0 119 "int8" `1226 
V G "Mes" 0 119 "int8" `1227 
V G "year" 0 119 "int8" `1228 
V G "Hora" 0 119 "int8" `1229 
V G "Minuto" 0 119 "int8" `1230 
V G "Segundo" 0 119 "int8" `1231 
V G "dow" 0 119 "int8" `1232 
V G "Inicio" 0 120 "int1" `1233 
V G "entro" 0 120 "int1" `1234 
V G "GuardaEEPROM" 0 120 "int1" `1235 
V G "rampa" 0 120 "int1" `1236 
V G "Minutos" 0 120 "int1" `1237 
V G "Horas" 0 120 "int1" `1238 
V G "flagTemperatura" 0 120 "int1" `1239 
V G "x1" 0 120 "int1" `1240 
V G "x10" 0 120 "int1" `1241 
V G "x100" 0 120 "int1" `1242 
V G "Enfria" 0 120 "int1" `1243 
V G "envioUSB" 0 120 "int1" `1244 
V G "flagRed" 0 120 "int1" `1245 
V G "flagControlL" 0 120 "int1" `1246 
V G "flagFinalizo" 0 120 "int1" `1247 
V G "Password" 0 121 "int8[4]" `1248 
V G "tiempo_esterilizacion" 0 122 "int8" `1249 
V G "y" 0 122 "int8" `1250 
V G "hEst" 0 122 "int8" `1251 
V G "mEst" 0 122 "int8" `1252 
V G "hEstp" 0 122 "int8" `1253 
V G "mEstp" 0 122 "int8" `1254 
V G "hEstpAnt" 0 122 "int8" `1255 
V G "mEstpAnt" 0 122 "int8" `1256 
V G "Segmento" 0 122 "int8" `1257 
V G "conteo" 0 122 "int8" `1258 
V G "SetpointHAnt" 0 122 "int8" `1259 
V G "tiemporeset" 0 123 "int16" `1260 
V G "TiempoControl" 0 123 "int16" `1261 
V G "tiemporecta" 0 123 "int16" `1262 
V G "tiemposetpoint" 0 123 "int16" `1263 
V G "tinicio" 0 123 "int16" `1264 
V G "tiempocalentamiento" 0 123 "int16" `1265 
V G "tiempoup" 0 123 "int16" `1266 
V G "tiempodn" 0 123 "int16" `1267 
V G "CicloLibre" 0 123 "int16" `1268 
V G "mensaje" 0 124 "int1" `1269 
V G "Lectura2" 0 124 "int1" `1270 
V G "flag_setpoint" 0 124 "int1" `1271 
V G "flag_tiempocalentamiento" 0 124 "int1" `1272 
V G "Lectura" 0 124 "int1" `1273 
V G "flagup" 0 124 "int1" `1274 
V G "flagdn" 0 124 "int1" `1275 
V G "flagRampa" 0 124 "int1" `1276 
V G "flag_calcula" 0 124 "int1" `1277 
V G "flag_ajuste" 0 124 "int1" `1278 
V G "flag_ajuste2" 0 124 "int1" `1279 
V G "Finalizo" 0 125 "int1" `1280 
V G "conteoPregunta" 0 125 "int1" `1281 
V G "imprime" 0 125 "int1" `1282 
V G "Infinito" 0 125 "int1" `1283 
V G "flagControlT" 0 125 "int1" `1284 
V G "flagControlH" 0 125 "int1" `1285 
V G "flag_clear2" 0 125 "int1" `1286 
V G "flag_ganancia" 0 125 "int1" `1287 
V G "flag_clear" 0 125 "int1" `1288 
V G "x" 0 126 "float[2]" `1289 
V G "medianaHumedad" 0 127 "float[2]" `1290 
V G "Temperatura" 0 128 "float" `1291 
V G "Temperatura2" 0 128 "float" `1292 
V G "Aumento" 0 128 "float" `1293 
V G "PendienteActual" 0 128 "float" `1294 
V G "DifPendiente" 0 128 "float" `1295 
V G "TempeInicial" 0 128 "float" `1296 
V G "Pendiente" 0 128 "float" `1297 
V G "TemperaturaIdeal" 0 128 "float" `1298 
V G "PotenciaEntregada" 0 128 "float" `1299 
V G "Tpulso" 0 128 "float" `1300 
V G "penInicial" 0 128 "float" `1301 
V G "penMufla" 0 128 "float" `1302 
V G "error" 0 129 "float" `1303 
V G "Potencia" 0 129 "float" `1304 
V G "TpulsoMax" 0 129 "float" `1305 
V G "Tpulsomin" 0 129 "float" `1306 
V G "humedadDisplay" 0 129 "float" `1307 
V G "TiempoActual" 0 130 "int16" `1308 
V G "MinutosActual" 0 130 "int16" `1309 
V G "HorasActual" 0 130 "int16" `1310 
V G "Tiempo" 0 130 "int16" `1311 
V G "tPregunta" 0 130 "int16" `1312 
V G "tControlH" 0 130 "int16" `1313 
V G "tLuz" 0 130 "int16" `1314 
V G "tLuzProgramada" 0 130 "int16" `1315 
V G "GananciaR" 0 131 "int8" `1316 
V G "Pausa" 0 131 "int8" `1317 
V G "contH" 0 131 "int8" `1318 
V G "Prom" 0 132 "float" `1319 
V G "Prom2" 0 132 "float" `1320 
V G "V0" 0 132 "float" `1321 
V G "V1" 0 132 "float" `1322 
V G "Temperature" 0 132 "float" `1323 
V G "TemperaturaPt1002" 0 132 "float" `1324 
V G "Pt" 0 132 "float" `1325 
V G "Pt2" 0 132 "float" `1326 
V G "TiempoRampa" 0 132 "float" `1327 
V G "Tam" 0 132 "float" `1328 
V G "RH2" 0 132 "float" `1329 
V G "Histeresis" 0 132 "float" `1330 
V G "medianaH" 0 132 "float" `1331 
V G "YearTx" 0 133 "int8" `1332 
V G "MesTx" 0 133 "int8" `1333 
V G "DiaTx" 0 133 "int8" `1334 
V G "HoraTx" 0 133 "int8" `1335 
V G "MinutoTx" 0 133 "int8" `1336 
V G "dowTx" 0 133 "int8" `1337 
V G "f" 0 133 "int8" `1338 
V G "filt" 0 135 "int16" `1339 
V G "Programa" 0 135 "int16" `1340 
V G "entero" 0 136 "int8" `1341 
V G "ll" 0 137 "int8" `1342 
V G "hh" 0 137 "int8" `1343 
V G "tmp" 0 138 "int16" `1344 
V G "Temporal" 0 139 "float" `1345 
V G "Humedad" 0 139 "float" `1346 
V G "k" 0 140 "int8" `1347 
V G "kk" 0 140 "int8" `1348 
V G "tEnvioUSB" 0 140 "int8" `1349 
V G "tmuestreoUSB" 0 140 "int8" `1350 
V G "tmuestreoUSB_ant" 0 140 "int8" `1351 
V G "controlH" 0 140 "int8" `1352 
V G "controlT" 0 140 "int8" `1353 
V G "controlR" 0 140 "int8" `1354 
V G "VelMotor" 0 140 "int8" `1355 
V G "promedioT1" 0 142 "int16[80]" `1356 
V G "promedioT2" 0 143 "int16[80]" `1357 
V G "promediolm35" 0 144 "int16[20]" `1358 
V G "promedioTa" 0 145 "float[80]" `1359 
V G "promedioH" 0 146 "float[80]" `1360 
V G "tiempos" 0 148 "int16" `1361 
V G "tiempos3" 0 148 "int16" `1362 
V G "tiempoctrl" 0 148 "int16" `1363 
V G "tTermostato" 0 148 "int16" `1364 
V G "Control" 0 149 "int1" `1365 
V G "Test" 0 149 "int1" `1366 
V G "ip1" 0 150 "int1" `1367 
V G "ip2" 0 150 "int1" `1368 
V G "ip3" 0 150 "int1" `1369 
V G "ip4" 0 150 "int1" `1370 
V G "s1" 0 150 "int1" `1371 
V G "s2" 0 150 "int1" `1372 
V G "s3" 0 150 "int1" `1373 
V G "s4" 0 150 "int1" `1374 
V G "g1" 0 150 "int1" `1375 
V G "g2" 0 150 "int1" `1376 
V G "g3" 0 150 "int1" `1377 
V G "g4" 0 150 "int1" `1378 
V G "m1" 0 150 "int1" `1379 
V G "m2" 0 150 "int1" `1380 
V G "m3" 0 150 "int1" `1381 
V G "m4" 0 150 "int1" `1382 
V G "m5" 0 150 "int1" `1383 
V G "m6" 0 150 "int1" `1384 
V G "entroGrafica" 0 150 "int1" `1385 
V G "actualizaNumeracion" 0 150 "int1" `1386 
V G "config" 0 150 "int1" `1387 
V G "horaGrafica" 0 151 "int8[15]" `1388 
V G "minutoGrafica" 0 151 "int8[15]" `1389 
V G "a" 0 152 "float" `1390 
V G "b" 0 152 "float" `1391 
V G "c" 0 152 "float" `1392 
V G "IP" 0 154 "int8[4]" `1393 
V G "Gateway" 0 155 "int8[4]" `1394 
V G "Subnet" 0 156 "int8[4]" `1395 
V G "MAC" 0 157 "int8[6]" `1396 
T G "Personalizado" 0 167 "{int8 TemperaturaDec,int8 TemperaturaInt,int8 Horas,int8 Minutos,float Temperatura,int8 Humedad}" `1404 
V G "rampas" 0 168 "Personalizado[24]" `1405 
T G "Grafica" 0 175 "{int8 Temperatura,int8 Hora,int8 Minuto,int8 Humedad}" `1411 
V G "graph" 0 176 "Grafica[330]" `1412  "typedef struct{"
C L "controlaHumedad3" 0 85 3 "FUNCTION"
F G "controlaHumedad3" 10 1 "void()" `1413 
C L "controlaHumedad3" 10 5 1 "FUNCTION"
C L "controlaHumedad3" 10 5 1 "FUNCTION"
C L "controlaHumedad3" 10 5 2 "FUNCTION"
C L "controlaHumedad3" 10 5 1 "FUNCTION"
C L "controlaHumedad3" 10 5 1 "FUNCTION"
C L "controlaHumedad3" 10 5 1 "FUNCTION"
F G "AC1_Read" 10 36 "int8()" `1414 
F G "CR1_Read" 10 40 "int8()" `1415 
F G "CR2_Read" 10 44 "int8()" `1416 
F G "CR3_Read" 10 48 "int8()" `1417 
F G "CR4_Read" 10 52 "int8()" `1418 
F G "CR5_Read" 10 56 "int8()" `1419 
F G "CR6_Read" 10 60 "int8()" `1420 
F G "BUZZER_Read" 10 63 "int8()" `1421 
F G "SSR_1_Read" 10 67 "int8()" `1422 
V L "estado" 10 71 "int8" `1424 
F G "SSR_1_Write" 10 71 "void(int8 estado)" `1423 
V L "estado" 10 79 "int8" `1426 
F G "AC1_Write" 10 79 "void(int8 estado)" `1425 
V L "estado" 10 87 "int8" `1428 
F G "CR1_Write" 10 87 "void(int8 estado)" `1427 
V L "estado" 10 95 "int8" `1430 
F G "CR2_Write" 10 95 "void(int8 estado)" `1429 
V L "estado" 10 103 "int8" `1432 
F G "CR3_Write" 10 103 "void(int8 estado)" `1431 
V L "estado" 10 111 "int8" `1434 
F G "CR4_Write" 10 111 "void(int8 estado)" `1433 
V L "estado" 10 119 "int8" `1436 
F G "CR5_Write" 10 119 "void(int8 estado)" `1435 
V L "estado" 10 127 "int8" `1438 
F G "CR6_Write" 10 127 "void(int8 estado)" `1437 
V L "data" 10 135 "int16" `1440 
F G "PWM_WriteCompare1" 10 135 "void(int16 data)" `1439 
V L "data" 10 141 "int16" `1442 
F G "PWM_WriteCompare2" 10 141 "void(int16 data)" `1441 
F G "SendDataDisplay" 10 147 "void()" `1443 
V L "estado" 10 157 "int8" `1445 
F G "BUZZER_Write" 10 157 "void(int8 estado)" `1444 
C L "sensores" 10 5 1 "FUNCTION"
V L "x" 10 162 "int8" `1447 
F G "sensores" 10 162 "float(int8 x)" `1446 
V L "y" 10 163 "float" `1448 
V L "data" 10 166 "int8" `1450 
V L "pos" 10 166 "int8" `1451 
F G "EEPROM_WriteByte" 10 166 "void(int8 data,int8 pos)" `1449 
V L "data" 10 170 "int8" `1453 
F G "EEPROM_ReadByte" 10 170 "int8(int8 data)" `1452 
V L "Buffer" 10 174 "*" `1455 
F G "escribeDisplay1" 10 174 "void(* Buffer)" `1454 
V L "data" 10 185 "float" `1459 
F G "extraeDecimal" 10 185 "int8(float data)" `1458 
V L "entero" 10 186 "float" `1460 
V L "tmp" 10 187 "float" `1461 
V L "data" 10 194 "float" `1463 
F G "extraeDecimal2" 10 194 "float(float data)" `1462 
V L "entero" 10 195 "float" `1464 
V L "tmp" 10 196 "float" `1465 
V L "decimal" 10 203 "int8" `1467 
F G "inttofloat" 10 203 "float(int8 decimal)" `1466 
V L "tmp" 10 204 "float" `1468 
V L "data" 10 209 "int16" `1470 
V L "nible" 10 209 "int8" `1471 
F G "convert8" 10 209 "int8(int16 data,int8 nible)" `1469 
V L "dato" 10 210 "int8" `1472 
V L "nibleh" 10 219 "int8" `1474 
V L "niblel" 10 219 "int8" `1475 
F G "convert16" 10 219 "int16(int8 nibleh,int8 niblel)" `1473 
V L "temp" 10 220 "int16" `1476 
V L "var" 10 220 "int16" `1477 
F G "LeeEEPROM" 10 226 "void()" `1478 
C L "LeeEEPROM" 10 5 6 "FUNCTION"
C L "LeeEEPROM" 10 5 13 "FUNCTION"
F G "LimitaValores" 10 326 "void()" `1479 
F G "ActualizaRecta" 10 440 "void()" `1480 
F G "Controla" 10 455 "void()" `1481  "-------------------------------Control de Calentamiento------------------------------------------------------------//"
V L "tmp" 10 457 "float" `1482 
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 5 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 2 "FUNCTION"
C L "Controla" 10 5 2 "FUNCTION"
C L "Controla" 10 5 5 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 2 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
C L "Controla" 10 5 2 "FUNCTION"
C L "Controla" 10 5 1 "FUNCTION"
F G "CuentaTiempo" 10 722 "void()" `1483 
F G "iniciaConteo" 10 733 "void()" `1484 
F G "LeeDisplay" 10 775 "void()" `1485 
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 1 "FUNCTION"
C L "LeeDisplay" 10 5 2 "FUNCTION"
C L "LeeDisplay" 10 5 2 "FUNCTION"
F G "controlaRampa" 10 898 "void()" `1486 
C L "controlaRampa" 10 5 1 "FUNCTION"
V L "media" 10 982 "int8" `1498 
F G "leePt100" 10 982 "float(int8 media)" `1497 
V L "ad1" 10 983 "int16" `1499 
V L "ajp" 10 984 "float" `1500 
V L "ajn" 10 984 "float" `1501 
V L "Tref" 10 984 "float" `1502 
C L "leePt100" 10 5 1 "FUNCTION"
C L "leePt100" 10 5 1 "FUNCTION"
C L "leePt100" 10 5 2 "FUNCTION"
C L "leePt100" 10 5 1 "FUNCTION"
C L "leePt100" 10 5 1 "FUNCTION"
C L "leePt100" 10 5 1 "FUNCTION"
C L "leePt100" 10 5 5 "FUNCTION"
V L "media2" 10 1024 "int8" `1504 
F G "leePt1002" 10 1024 "float(int8 media2)" `1503 
V L "ad2" 10 1025 "int16" `1505 
V L "tmp3" 10 1026 "float" `1506 
V L "ajp2" 10 1026 "float" `1507 
V L "ajn2" 10 1026 "float" `1508 
V L "Tref2" 10 1027 "float" `1509 
C L "leePt1002" 10 5 1 "FUNCTION"
C L "leePt1002" 10 5 2 "FUNCTION"
C L "leePt1002" 10 5 1 "FUNCTION"
C L "leePt1002" 10 5 1 "FUNCTION"
C L "leePt1002" 10 5 5 "FUNCTION"
V L "media3" 10 1066 "int8" `1511 
F G "leeHumedad" 10 1066 "float(int8 media3)" `1510 
V L "VH" 10 1067 "float" `1512 
V L "RH" 10 1067 "float" `1513 
V L "Ta" 10 1067 "float" `1514 
V L "VT" 10 1067 "float" `1515 
V L "PromH" 10 1068 "float" `1516 
V L "PromTa" 10 1068 "float" `1517 
V L "Href" 10 1069 "float" `1518 
C L "leeHumedad" 10 5 1 "FUNCTION"
C L "leeHumedad" 10 5 1 "FUNCTION"
C L "leeHumedad" 10 5 3 "FUNCTION"
C L "leeHumedad" 10 5 1 "FUNCTION"
C L "leeHumedad" 10 5 5 "FUNCTION"
C L "leeHumedad" 10 5 1 "FUNCTION"
V L "input" 10 1131 "int32" `1523 
F G "LowPassFilter" 10 1131 "int32(int32 input)" `1522 
V L "k" 10 1132 "int32" `1524 
V L "media" 10 1139 "int8" `1526 
F G "leeLM35" 10 1139 "float(int8 media)" `1525  "Falta hacerle promedio"
V L "ad" 10 1140 "int16" `1527 
V L "Promlm35" 10 1141 "float" `1528 
V L "ADC" 10 1143 "float" `1529 
V L "V" 10 1143 "float" `1530 
V L "t" 10 1143 "float" `1531 
V L "year" 10 1160 "int8" `1533 
F G "esBisiesto" 10 1160 "int8(int8 year)" `1532 
F G "LimitaDia" 10 1164 "void()" `1534 
C L "LimitaDia" 10 5 1 "FUNCTION"
C L "LimitaDia" 10 5 1 "FUNCTION"
C L "LimitaDia" 10 5 1 "FUNCTION"
C L "LimitaDia" 10 5 1 "FUNCTION"
F G "ApagaSalidas" 10 1207 "void()" `1535 
F G "controlaTemperatura" 10 1220 "void()" `1536 
C L "controlaTemperatura" 10 5 1 "FUNCTION"
C L "controlaTemperatura" 10 5 1 "FUNCTION"
C L "controlaTemperatura" 10 5 1 "FUNCTION"
C L "controlaTemperatura" 10 5 1 "FUNCTION"
C L "controlaTemperatura" 10 5 1 "FUNCTION"
C L "controlaTemperatura" 10 5 1 "FUNCTION"
C L "controlaTemperatura" 10 5 1 "FUNCTION"
F G "actualizaEjeX" 10 1330 "void()" `1550 
C L "actualizaEjeX" 10 5 1 "FUNCTION"
F G "borraVector" 10 1345 "void()" `1559 
F G "dataUSB" 10 1358 "void()" `1560  "USB----------------------------------------------------------------"
C L "dataUSB" 10 5 1 "FUNCTION"
C L "dataUSB" 10 5 1 "FUNCTION"
F G "controlaHumedad2" 10 1403 "void()" `1561 
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
C L "controlaHumedad2" 10 5 1 "FUNCTION"
V L "direccion" 10 1533 "int8" `1571 
V L "posicion" 10 1533 "int8" `1572 
V L "dato" 10 1533 "int8" `1573 
F G "Envio_I2C" 10 1533 "void(int8 direccion,int8 posicion,int8 dato)" `1570 
C L "Envio_I2C" 10 5 1 "FUNCTION"
C L "Envio_I2C" 10 5 1 "FUNCTION"
C L "Envio_I2C" 10 5 1 "FUNCTION"
C L "Envio_I2C" 10 5 1 "FUNCTION"
C L "Envio_I2C" 10 5 1 "FUNCTION"
V L "direccion" 10 1541 "int8" `1575 
V L "posicion" 10 1541 "int8" `1576 
V L "dato" 10 1541 "int8" `1577 
F G "Lectura_I2C" 10 1541 "void(int8 direccion,int8 posicion,int8 dato)" `1574 
C L "Lectura_I2C" 10 5 1 "FUNCTION"
C L "Lectura_I2C" 10 5 1 "FUNCTION"
C L "Lectura_I2C" 10 5 1 "FUNCTION"
C L "Lectura_I2C" 10 5 1 "FUNCTION"
C L "Lectura_I2C" 10 5 1 "FUNCTION"
C L "Lectura_I2C" 10 5 1 "FUNCTION"
C L "Lectura_I2C" 10 5 1 "FUNCTION"
F G "Carga_Vector" 10 1551 "void()" `1578 
F G "Lee_Vector" 10 1579 "void()" `1579 
F G "Envio_Esclavos" 10 1586 "void()" `1580 
F G "Lectura_Esclavos" 10 1593 "void()" `1581  "if(txbuf[0]==10 && txbuf[49]==128){"
C L "Lectura_Esclavos" 10 5 1 "FUNCTION"
C L "Lectura_Esclavos" 10 5 1 "FUNCTION"
C L "Lectura_Esclavos" 10 5 1 "FUNCTION"
V L "Tipo" 10 1605 "int8" `1583 
F G "ActivaAlarma" 10 1605 "void(int8 Tipo)" `1582 
C L "ActivaAlarma" 10 5 1 "FUNCTION"
F G "leeMenus" 11 1 "void()" `1584  "_--------------------------------------------------------------------------------------------------------------------------------------------------------"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 2 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 30 "FUNCTION"
C L "leeMenus" 11 4 6 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 18 "FUNCTION"
C L "leeMenus" 11 4 5 "FUNCTION"
C L "leeMenus" 11 4 12 "FUNCTION"
C L "leeMenus" 11 4 162 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 3 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 1 "FUNCTION"
C L "leeMenus" 11 4 2 "FUNCTION"
F G "serial_rx_isr" 0 187 "void()" `1732 
C L "serial_rx_isr" 0 190 1 "FUNCTION"
C L "serial_rx_isr" 0 190 1 "FUNCTION"
C L "serial_rx_isr" 0 190 1 "FUNCTION"
F G "temp1s" 0 214 "void()" `1733 
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
C L "temp1s" 0 190 1 "FUNCTION"
F G "temp2s" 0 313 "void()" `1734 
C L "temp2s" 0 190 1 "FUNCTION"
C L "temp2s" 0 190 1 "FUNCTION"
C L "temp2s" 0 190 1 "FUNCTION"
C L "temp2s" 0 190 1 "FUNCTION"
C L "temp2s" 0 190 1 "FUNCTION"
F G "MAIN" 0 337 "void()" `1735 
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 3 "FUNCTION"
C L "MAIN" 0 190 2 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 2 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 2 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 2 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 3 "FUNCTION"
C L "MAIN" 0 190 2 "FUNCTION"
C L "MAIN" 0 190 12 "FUNCTION"
C L "MAIN" 0 190 3 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 3 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 3 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 2 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 3 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
C L "MAIN" 0 190 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
