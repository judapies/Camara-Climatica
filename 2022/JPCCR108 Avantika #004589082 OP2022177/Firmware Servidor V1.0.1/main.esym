D G "__PCH__" 0 198 ""5.015""
D G "__DEVICE__" 0 198 "4685"
D G "__DATE__" 0 198 ""27-jul.-22""
D G "__TIME__" 0 198 ""09:57:55"" "Standard Header file for the PIC18F4685 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
v L "value" 2 46 "int8" `60 
f B "set_tris_d" 2 46 "void(int8 value)" `59 
v L "value" 2 47 "int8" `62 
f B "set_tris_e" 2 47 "void(int8 value)" `61 
f B "get_tris_a" 2 48 "int8()" `63 
f B "get_tris_b" 2 49 "int8()" `64 
f B "get_tris_c" 2 50 "int8()" `65 
f B "get_tris_d" 2 51 "int8()" `66 
f B "get_tris_e" 2 52 "int8()" `67 
v L "value" 2 53 "int8" `69 
f B "output_a" 2 53 "void(int8 value)" `68 
v L "value" 2 54 "int8" `71 
f B "output_b" 2 54 "void(int8 value)" `70 
v L "value" 2 55 "int8" `73 
f B "output_c" 2 55 "void(int8 value)" `72 
v L "value" 2 56 "int8" `75 
f B "output_d" 2 56 "void(int8 value)" `74 
v L "value" 2 57 "int8" `77 
f B "output_e" 2 57 "void(int8 value)" `76 
f B "input_a" 2 58 "int8()" `78 
f B "input_b" 2 59 "int8()" `79 
f B "input_c" 2 60 "int8()" `80 
f B "input_d" 2 61 "int8()" `81 
f B "input_e" 2 62 "int8()" `82 
f B "input_change_a" 2 63 "int8()" `83 
f B "input_change_b" 2 64 "int8()" `84 
f B "input_change_c" 2 65 "int8()" `85 
f B "input_change_d" 2 66 "int8()" `86 
f B "input_change_e" 2 67 "int8()" `87 
v L "pin" 2 68 "int16" `89 
f B "input" 2 68 "int8(int16 pin)" `88 
v L "pin" 2 69 "int16" `91 
f B "input_state" 2 69 "int8(int16 pin)" `90 
v L "pin" 2 70 "int16" `93 
f B "output_low" 2 70 "void(int16 pin)" `92 
v L "pin" 2 71 "int16" `95 
f B "output_high" 2 71 "void(int16 pin)" `94 
v L "pin" 2 72 "int16" `97 
f B "output_toggle" 2 72 "void(int16 pin)" `96 
v L "pin" 2 73 "int16" `99 
v L "level" 2 73 "int8" `100 
f B "output_bit" 2 73 "void(int16 pin,int8 level)" `98 
v L "pin" 2 74 "int16" `102 
f B "output_float" 2 74 "void(int16 pin)" `101 
v L "pin" 2 75 "int16" `104 
f B "output_drive" 2 75 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 79 "31744"
d G "PIN_A1" 2 80 "31745"
d G "PIN_A2" 2 81 "31746"
d G "PIN_A3" 2 82 "31747"
d G "PIN_A4" 2 83 "31748"
d G "PIN_A5" 2 84 "31749"
d G "PIN_A6" 2 85 "31750"
d G "PIN_A7" 2 86 "31751"
d G "PIN_B0" 2 88 "31752"
d G "PIN_B1" 2 89 "31753"
d G "PIN_B2" 2 90 "31754"
d G "PIN_B3" 2 91 "31755"
d G "PIN_B4" 2 92 "31756"
d G "PIN_B5" 2 93 "31757"
d G "PIN_B6" 2 94 "31758"
d G "PIN_B7" 2 95 "31759"
d G "PIN_C0" 2 97 "31760"
d G "PIN_C1" 2 98 "31761"
d G "PIN_C2" 2 99 "31762"
d G "PIN_C3" 2 100 "31763"
d G "PIN_C4" 2 101 "31764"
d G "PIN_C5" 2 102 "31765"
d G "PIN_C6" 2 103 "31766"
d G "PIN_C7" 2 104 "31767"
d G "PIN_D0" 2 106 "31768"
d G "PIN_D1" 2 107 "31769"
d G "PIN_D2" 2 108 "31770"
d G "PIN_D3" 2 109 "31771"
d G "PIN_D4" 2 110 "31772"
d G "PIN_D5" 2 111 "31773"
d G "PIN_D6" 2 112 "31774"
d G "PIN_D7" 2 113 "31775"
d G "PIN_E0" 2 115 "31776"
d G "PIN_E1" 2 116 "31777"
d G "PIN_E2" 2 117 "31778"
d G "PIN_E3" 2 118 "31779"
d G "FALSE" 2 121 "0"
d G "TRUE" 2 122 "1"
d G "BYTE" 2 124 "int8"
d G "BOOLEAN" 2 125 "int1"
d G "getc" 2 127 "getch"
d G "fgetc" 2 128 "getch"
d G "getchar" 2 129 "getch"
d G "putc" 2 130 "putchar"
d G "fputc" 2 131 "putchar"
d G "fgets" 2 132 "gets"
d G "fputs" 2 133 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 138 "int8()" `105 
f B "reset_cpu" 2 139 "void()" `106 
f B "sleep" 2 140 "void()" `107 
v L "type" 2 141 "int8" `109 
f G "sleep" 2 141 "void(int8 type)" `108  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 143 "7"
d G "MCLR_FROM_SLEEP" 2 144 "11"
d G "MCLR_FROM_RUN" 2 145 "15"
d G "NORMAL_POWER_UP" 2 146 "12"
d G "BROWNOUT_RESTART" 2 147 "14"
d G "WDT_FROM_SLEEP" 2 148 "3"
d G "RESET_INSTRUCTION" 2 149 "0"
d G "SLEEP_FULL" 2 152 "0" "Default"
d G "SLEEP_IDLE" 2 153 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 160 "int8" `111 
f B "setup_timer_0" 2 160 "void(int8 mode)" `110 
v L "value" 2 161 "int16" `113 
f B "set_timer0" 2 161 "void(int16 value)" `112 
f B "get_timer0" 2 162 "int16()" `114 
v L "mode" 2 163 "int8" `116 
v L "prescaler" 2 163 "int8" `117 
f B "setup_counters" 2 163 "void(int8 mode,int8 prescaler)" `115 
v L "value" 2 164 "int16" `119 
f B "set_rtcc" 2 164 "void(int16 value)" `118 
f B "get_rtcc" 2 165 "int16()" `120  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 167 "0"
d G "T0_EXT_L_TO_H" 2 168 "32"
d G "T0_EXT_H_TO_L" 2 169 "48"
d G "T0_DIV_1" 2 171 "8"
d G "T0_DIV_2" 2 172 "0"
d G "T0_DIV_4" 2 173 "1"
d G "T0_DIV_8" 2 174 "2"
d G "T0_DIV_16" 2 175 "3"
d G "T0_DIV_32" 2 176 "4"
d G "T0_DIV_64" 2 177 "5"
d G "T0_DIV_128" 2 178 "6"
d G "T0_DIV_256" 2 179 "7"
d G "T0_OFF" 2 181 "0x80"
d G "T0_8_BIT" 2 183 "0x40"
d G "RTCC_INTERNAL" 2 185 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 186 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 187 "48"
d G "RTCC_DIV_1" 2 188 "8"
d G "RTCC_DIV_2" 2 189 "0"
d G "RTCC_DIV_4" 2 190 "1"
d G "RTCC_DIV_8" 2 191 "2"
d G "RTCC_DIV_16" 2 192 "3"
d G "RTCC_DIV_32" 2 193 "4"
d G "RTCC_DIV_64" 2 194 "5"
d G "RTCC_DIV_128" 2 195 "6"
d G "RTCC_DIV_256" 2 196 "7"
d G "RTCC_OFF" 2 197 "0x80"
d G "RTCC_8_BIT" 2 198 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 209 "int16" `122 
f B "setup_wdt" 2 209 "void(int16 mode)" `121 
f B "restart_wdt" 2 210 "void()" `123  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 212 "0x100"
d G "WDT_OFF" 2 213 "0"
d G "WDT_4MS" 2 215 "0x300"
d G "WDT_8MS" 2 216 "0x500"
d G "WDT_16MS" 2 217 "0x700"
d G "WDT_32MS" 2 218 "0x900"
d G "WDT_64MS" 2 219 "0xB00"
d G "WDT_128MS" 2 220 "0xD00"
d G "WDT_256MS" 2 221 "0xF00"
d G "WDT_512MS" 2 222 "0x1100"
d G "WDT_1S" 2 223 "0x1300"
d G "WDT_2S" 2 224 "0x1500"
d G "WDT_4S" 2 225 "0x1700"
d G "WDT_8S" 2 226 "0x1900"
d G "WDT_16" 2 227 "0x1B00"
d G "WDT_32S" 2 228 "0x1D00"
d G "WDT_64S" 2 229 "0x1F00"
d G "WDT_128S" 2 230 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 236 "int16" `125 
f B "setup_timer_1" 2 236 "void(int16 mode)" `124 
f B "get_timer1" 2 237 "int16()" `126 
v L "value" 2 238 "int16" `128 
f B "set_timer1" 2 238 "void(int16 value)" `127  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 241 "0"
d G "T1_INTERNAL" 2 242 "0x85"
d G "T1_EXTERNAL" 2 243 "0x87"
d G "T1_EXTERNAL_SYNC" 2 244 "0x83"
d G "T1_CLK_OUT" 2 246 "8"
d G "T1_DIV_BY_1" 2 248 "0"
d G "T1_DIV_BY_2" 2 249 "0x10"
d G "T1_DIV_BY_4" 2 250 "0x20"
d G "T1_DIV_BY_8" 2 251 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 256 "int8" `130 
v L "period" 2 256 "int8" `131 
v L "postscale" 2 256 "int8" `132 
f B "setup_timer_2" 2 256 "void(int8 mode,int8 period,int8 postscale)" `129 
f B "get_timer2" 2 257 "int8()" `133 
v L "value" 2 258 "int8" `135 
f B "set_timer2" 2 258 "void(int8 value)" `134  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 260 "0"
d G "T2_DIV_BY_1" 2 261 "4"
d G "T2_DIV_BY_4" 2 262 "5"
d G "T2_DIV_BY_16" 2 263 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 268 "int16" `137 
f B "setup_timer_3" 2 268 "void(int16 mode)" `136 
f B "get_timer3" 2 269 "int16()" `138 
v L "value" 2 270 "int16" `140 
f B "set_timer3" 2 270 "void(int16 value)" `139  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 273 "0"
d G "T3_INTERNAL" 2 274 "0x85"
d G "T3_EXTERNAL" 2 275 "0x87"
d G "T3_EXTERNAL_SYNC" 2 276 "0x83"
d G "T3_DIV_BY_1" 2 278 "0"
d G "T3_DIV_BY_2" 2 279 "0x10"
d G "T3_DIV_BY_4" 2 280 "0x20"
d G "T3_DIV_BY_8" 2 281 "0x30"
c L "set_timer3" 2 3 4 "FUNCTION"
v L "mode" 2 287 "int32" `142 
f B "setup_ccp1" 2 287 "void(int32 mode)" `141 
v L "mode" 2 288 "int32" `144 
v L "pwm" 2 288 "int8" `145 
f G "setup_ccp1" 2 288 "void(int32 mode,int8 pwm)" `143 
v L "value" 2 289 "int16" `147 
f B "set_pwm1_duty" 2 289 "void(int16 value)" `146  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 291 "0"
d G "CCP_CAPTURE_FE" 2 292 "4"
d G "CCP_CAPTURE_RE" 2 293 "5"
d G "CCP_CAPTURE_DIV_4" 2 294 "6"
d G "CCP_CAPTURE_DIV_16" 2 295 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 296 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 297 "9"
d G "CCP_COMPARE_INT" 2 298 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 299 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 300 "0xB"
d G "CCP_PWM" 2 301 "0xC"
d G "CCP_PWM_PLUS_1" 2 302 "0x1c"
d G "CCP_PWM_PLUS_2" 2 303 "0x2c"
d G "CCP_PWM_PLUS_3" 2 304 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 310 "0x48"
d G "T3_CCP2" 2 311 "0x8"
d G "CCP_PWM_H_H" 2 314 "0x0c"
d G "CCP_PWM_H_L" 2 315 "0x0d"
d G "CCP_PWM_L_H" 2 316 "0x0e"
d G "CCP_PWM_L_L" 2 317 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 319 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 320 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 321 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 323 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 324 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 325 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 326 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 327 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 328 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 329 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 331 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 332 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 333 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 335 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 336 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 337 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 339 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 343 "int32" `152 
f B "setup_ccp2" 2 343 "void(int32 mode)" `151 
v L "mode" 2 344 "int32" `154 
v L "pwm" 2 344 "int8" `155 
f G "setup_ccp2" 2 344 "void(int32 mode,int8 pwm)" `153 
v L "value" 2 345 "int16" `157 
f B "set_pwm2_duty" 2 345 "void(int16 value)" `156 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
v L "mode" 2 354 "int8" `162 
f B "setup_psp" 2 354 "void(int8 mode)" `161 
f B "psp_output_full" 2 355 "int8()" `163 
f B "psp_input_full" 2 356 "int8()" `164 
f B "psp_overflow" 2 357 "int8()" `165  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 359 "0x10"
d G "PSP_DISABLED" 2 360 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
v L "mode" 2 367 "int32" `168 
f B "setup_spi" 2 367 "void(int32 mode)" `167 
v L "value" 2 368 "int8" `170 
f B "spi_write" 2 368 "void(int8 value)" `169 
f B "spi_read" 2 369 "int8()" `171 
v L "value" 2 370 "int8" `173 
f G "spi_read" 2 370 "int8(int8 value)" `172 
f B "spi_data_in" 2 371 "int8()" `174 
v L "mode" 2 372 "int32" `176 
f B "setup_spi2" 2 372 "void(int32 mode)" `175 
v L "value" 2 373 "int8" `178 
f B "spi_write2" 2 373 "void(int8 value)" `177 
f B "spi_read2" 2 374 "int8()" `179 
v L "value" 2 375 "int8" `181 
f G "spi_read2" 2 375 "int8(int8 value)" `180 
f B "spi_data_in2" 2 376 "int8()" `182  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 378 "0x00"
d G "SPI_MASTER" 2 379 "0x20"
d G "SPI_SLAVE" 2 380 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 381 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 382 "0x00"
d G "SPI_CLK_DIV_4" 2 383 "0x00"
d G "SPI_CLK_DIV_16" 2 384 "0x01"
d G "SPI_CLK_DIV_64" 2 385 "0x02"
d G "SPI_CLK_T2" 2 386 "0x03"
d G "SPI_SS_DISABLED" 2 387 "0x01"
d G "SPI_XMIT_L_TO_H" 2 389 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 390 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 392 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 393 "0x8000"
d G "SPI_L_TO_H" 2 396 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 397 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 401 "int32" `184 
f B "setup_uart" 2 401 "void(int32 baud)" `183 
v L "baud" 2 402 "int32" `186 
v L "stream" 2 402 "int8" `187 
f G "setup_uart" 2 402 "void(int32 baud,int8 stream)" `185 
v L "baud" 2 403 "int32" `189 
v L "stream" 2 403 "int8" `190 
v L "clock" 2 403 "int32" `191 
f G "setup_uart" 2 403 "void(int32 baud,int8 stream,int32 clock)" `188 
v L "baud" 2 404 "int32" `193 
f B "set_uart_speed" 2 404 "void(int32 baud)" `192 
v L "baud" 2 405 "int32" `195 
v L "stream" 2 405 "int8" `196 
f G "set_uart_speed" 2 405 "void(int32 baud,int8 stream)" `194 
v L "baud" 2 406 "int32" `198 
v L "stream" 2 406 "int8" `199 
v L "clock" 2 406 "int32" `200 
f G "set_uart_speed" 2 406 "void(int32 baud,int8 stream,int32 clock)" `197  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 410 "2"
d G "UART_DATA" 2 411 "4"
d G "UART_AUTODETECT" 2 412 "8"
d G "UART_AUTODETECT_NOWAIT" 2 413 "9"
d G "UART_WAKEUP_ON_RDA" 2 414 "10"
d G "UART_SEND_BREAK" 2 415 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 419 "int32" `202 
f B "setup_comparator" 2 419 "void(int32 mode)" `201  "Constants used in setup_comparator() are:"
d G "D1_D0_D3_D0" 2 421 "0x0Bff04"
d G "D1_D0_D3_D2_OUT_ON_E1_E2" 2 422 "0x0FF903"
d G "D1_D0_D3_D0_OUT_ON_E1_E2" 2 423 "0x0BF905"
d G "NC_NC_NC_NC" 2 424 "0x00ff07"
d G "D1_D0_D3_D2" 2 425 "0x0Fff02"
d G "D1_D0_NC_NC_OUT_ON_E1" 2 426 "0x03FD01"
d G "D1_VR_D3_VR" 2 427 "0x0Aff06"
d G "D0_VR_D2_VR" 2 428 "0x05ff0e"
d G "CP1_INVERT" 2 429 "0x0000010"
d G "CP2_INVERT" 2 430 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 437 "int8" `206 
f B "setup_vref" 2 437 "void(int8 mode)" `205  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 439 "0xa0"
d G "VREF_HIGH" 2 440 "0x80"
d G "VREF_F5" 2 442 "0x40"
d G "VREF_COMP" 2 443 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
v L "mode" 2 447 "int8" `208 
f B "setup_low_volt_detect" 2 447 "void(int8 mode)" `207  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 449 "0x1F"
d G "LVD_45" 2 450 "0x1E"
d G "LVD_42" 2 451 "0x1D"
d G "LVD_40" 2 452 "0x1C"
d G "LVD_38" 2 453 "0x1B"
d G "LVD_36" 2 454 "0x1A"
d G "LVD_35" 2 455 "0x19"
d G "LVD_33" 2 456 "0x18"
d G "LVD_30" 2 457 "0x17"
d G "LVD_28" 2 458 "0x16"
d G "LVD_27" 2 459 "0x15"
d G "LVD_25" 2 460 "0x14"
d G "LVD_24" 2 461 "0x13"
d G "LVD_23" 2 462 "0x12"
d G "LVD_22" 2 463 "0x11"
d G "LVD_21" 2 464 "0x10"
d G "LVD_TRIGGER_BELOW" 2 466 "0"
d G "LVD_TRIGGER_ABOVE" 2 467 "0x80"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
v L "mode" 2 472 "int8" `210 
f B "setup_oscillator" 2 472 "int8(int8 mode)" `209 
v L "mode" 2 473 "int8" `212 
v L "tune" 2 473 "sint8" `213 
f G "setup_oscillator" 2 473 "int8(int8 mode,sint8 tune)" `211  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 476 "0"
d G "OSC_125KHZ" 2 477 "0x10"
d G "OSC_250KHZ" 2 478 "0x20"
d G "OSC_500KHZ" 2 479 "0x30"
d G "OSC_1MHZ" 2 480 "0x40"
d G "OSC_2MHZ" 2 481 "0x50"
d G "OSC_4MHZ" 2 482 "0x60"
d G "OSC_8MHZ" 2 483 "0x70"
d G "OSC_16MHZ" 2 484 "0x4060"
d G "OSC_32MHZ" 2 485 "0x4070"
d G "OSC_TIMER1" 2 487 "1"
d G "OSC_INTRC" 2 488 "2"
d G "OSC_NORMAL" 2 489 "0"
d G "OSC_IDLE_MODE" 2 491 "0x80"
d G "OSC_31250" 2 492 "0x8000"
d G "OSC_PLL_ON" 2 493 "0x4000"
d G "OSC_PLL_OFF" 2 494 "0"
d G "OSC_STATE_STABLE" 2 498 "4"
d G "OSC_STATE_EXT_RUNNING" 2 499 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 506 "int16" `215 
f B "setup_adc" 2 506 "void(int16 mode)" `214 
f B "read_adc" 2 507 "int8()" `216 
v L "mode" 2 508 "int8" `218 
f G "read_adc" 2 508 "int8(int8 mode)" `217 
f G "read_adc" 2 509 "int16()" `219 
v L "mode" 2 510 "int8" `221 
f G "read_adc" 2 510 "int16(int8 mode)" `220 
f B "adc_done" 2 511 "int8()" `222  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 513 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 514 "0x100"
d G "ADC_CLOCK_DIV_4" 2 515 "0x04"
d G "ADC_CLOCK_DIV_8" 2 516 "0x01"
d G "ADC_CLOCK_DIV_16" 2 517 "0x05"
d G "ADC_CLOCK_DIV_32" 2 518 "0x02"
d G "ADC_CLOCK_DIV_64" 2 519 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 520 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 522 "0x00"
d G "ADC_TAD_MUL_2" 2 523 "0x08"
d G "ADC_TAD_MUL_4" 2 524 "0x10"
d G "ADC_TAD_MUL_6" 2 525 "0x18"
d G "ADC_TAD_MUL_8" 2 526 "0x20"
d G "ADC_TAD_MUL_12" 2 527 "0x28"
d G "ADC_TAD_MUL_16" 2 528 "0x30"
d G "ADC_TAD_MUL_20" 2 529 "0x38"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 532 "int8" `224 
f B "setup_adc_ports" 2 532 "void(int8 pins)" `223 
v L "pins" 2 533 "int8" `226 
v L "reference" 2 533 "int8" `227 
f G "setup_adc_ports" 2 533 "void(int8 pins,int8 reference)" `225 
v L "channel" 2 534 "int8" `229 
f B "set_adc_channel" 2 534 "void(int8 channel)" `228  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 537 "0x0F" "None"
d G "ALL_ANALOG" 2 538 "0x00" "A0 A1 A2 A3 A5 E0 E1 E2 B1 B4 B0"
d G "AN0_TO_AN9" 2 539 "0x05" "A0 A1 A2 A3 A5 E0 E1 E2 B1 B4"
d G "AN0_TO_AN8" 2 540 "0x06" "A0 A1 A2 A3 A5 E0 E1 E2 B1"
d G "AN0_TO_AN7" 2 541 "0x07" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_TO_AN6" 2 542 "0x08" "A0 A1 A2 A3 A5 E0 E1"
d G "AN0_TO_AN5" 2 543 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_TO_AN4" 2 544 "0x0A" "A0 A1 A2 A3 A5"
d G "AN0_TO_AN3" 2 545 "0x0B" "A0 A1 A2 A3"
d G "AN0_TO_AN2" 2 546 "0x0C" "A0 A1 A2"
d G "AN0_TO_AN1" 2 547 "0x0D" "A0 A1"
d G "AN0" 2 548 "0x0E" "A0"
d G "AN0_TO_AN12_ANALOG" 2 549 "0x02" "!old only provided for compatibility"
d G "AN0_TO_AN11_ANALOG" 2 550 "0x03" "!old only provided for compatibility"
d G "AN0_TO_AN10_ANALOG" 2 551 "0x04" "!old only provided for compatibility"
d G "AN0_TO_AN9_ANALOG" 2 552 "0x05" "!old only provided for compatibility"
d G "AN0_TO_AN8_ANALOG" 2 553 "0x06" "!old only provided for compatibility"
d G "AN0_TO_AN4_ANALOG" 2 554 "0x0A" "!old only provided for compatibility"
d G "AN0_TO_AN3_ANALOG" 2 555 "0x0B" "!old only provided for compatibility"
d G "AN0_TO_AN2_ANALOG" 2 556 "0x0C" "!old only provided for compatibility"
d G "AN0_TO_AN1_ANALOG" 2 557 "0x0D" "!old only provided for compatibility"
d G "AN0_ANALOG" 2 558 "0x0E" "!old only provided for compatibility"
d G "VSS_VDD" 2 561 "0x00" "Range 0-Vdd"
d G "VREF_VREF" 2 562 "0x30" "Range VrefL-VrefH"
d G "VREF_VDD" 2 563 "0x20" "Range VrefL-Vdd"
d G "VSS_VREF" 2 564 "0x10" "Range 0-VrefH"
d G "ADC_START_AND_READ" 2 567 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 568 "1"
d G "ADC_READ_ONLY" 2 569 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 575 "sint8" `231 
f B "abs" 2 575 "sint8(sint8 x)" `230 
v L "x" 2 576 "sint16" `233 
f G "abs" 2 576 "sint16(sint16 x)" `232 
v L "x" 2 577 "sint32" `235 
f G "abs" 2 577 "sint32(sint32 x)" `234 
v L "x" 2 578 "float" `237 
f G "abs" 2 578 "float(float x)" `236 
v L "??65535" 2 579 "int8" `239 
v L "??65535" 2 579 "int8" `240 
f B "_mul" 2 579 "int16(int8 ,int8 )" `238 
v L "??65535" 2 580 "sint8" `239 
v L "??65535" 2 580 "sint8" `243 
f G "_mul" 2 580 "sint16(sint8 ,sint8 )" `241 
v L "??65535" 2 581 "int16" `239 
v L "??65535" 2 581 "int16" `246 
f G "_mul" 2 581 "int32(int16 ,int16 )" `244 
v L "??65535" 2 582 "sint16" `239 
v L "??65535" 2 582 "sint16" `249 
f G "_mul" 2 582 "sint32(sint16 ,sint16 )" `247  "Memory Manipulation Prototypes:"
v L "bank" 2 585 "int8" `251 
v L "offset" 2 585 "int8" `252 
f B "read_bank" 2 585 "int8(int8 bank,int8 offset)" `250 
v L "bank" 2 586 "int8" `254 
v L "offset" 2 586 "int8" `255 
v L "value" 2 586 "int8" `256 
f B "write_bank" 2 586 "void(int8 bank,int8 offset,int8 value)" `253 
v L "dest" 2 587 "*int8" `258 
v L "src" 2 587 "*int8" `259 
f B "strcpy" 2 587 "void(*int8 dest,*int8 src)" `257 
v L "dest" 2 588 "*int8" `261 
v L "src" 2 588 "*int8" `262 
f B "strcopy" 2 588 "void(*int8 dest,*int8 src)" `260 
v L "destination" 2 589 "*int8" `264 
v L "value" 2 589 "int8" `265 
v L "num" 2 589 "int16" `266 
f B "memset" 2 589 "void(*int8 destination,int8 value,int16 num)" `263 
v L "destination" 2 590 "*int8" `268 
v L "source" 2 590 "*int8" `269 
v L "num" 2 590 "int16" `270 
f B "memcpy" 2 590 "void(*int8 destination,*int8 source,int16 num)" `267  "String Prototypes:"
v L "cvalue" 2 593 "int8" `272 
f B "toupper" 2 593 "int8(int8 cvalue)" `271 
v L "cvalue" 2 594 "int8" `274 
f B "tolower" 2 594 "int8(int8 cvalue)" `273 
v L "string" 2 595 "*int8" `276 
v L "cstring" 2 595 "*int8" `277 
f B "sprintf" 2 595 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `275  "Data Manipulators Prototypes:"
v L "address" 2 598 "*int8" `280 
v L "bytes" 2 598 "int8" `281 
v L "value" 2 598 "int8" `282 
f B "shift_left" 2 598 "int8(*int8 address,int8 bytes,int8 value)" `279 
v L "address" 2 599 "*int8" `284 
v L "bytes" 2 599 "int8" `285 
v L "value" 2 599 "int8" `286 
f B "shift_right" 2 599 "int8(*int8 address,int8 bytes,int8 value)" `283 
v L "address" 2 600 "*int8" `288 
v L "bytes" 2 600 "int8" `289 
f B "rotate_left" 2 600 "void(*int8 address,int8 bytes)" `287 
v L "address" 2 601 "*int8" `291 
v L "bytes" 2 601 "int8" `292 
f B "rotate_right" 2 601 "void(*int8 address,int8 bytes)" `290 
v L "value" 2 602 "int8" `294 
f B "swap" 2 602 "void(int8 value)" `293 
v L "var" 2 603 "int16" `296 
v L "offset" 2 603 "int8" `297 
f B "make8" 2 603 "int8(int16 var,int8 offset)" `295 
v L "var" 2 604 "int32" `296 
v L "offset" 2 604 "int8" `300 
f G "make8" 2 604 "int8(int32 var,int8 offset)" `298 
v L "varhigh" 2 605 "int8" `302 
v L "varlow" 2 605 "int8" `303 
f B "make16" 2 605 "int16(int8 varhigh,int8 varlow)" `301 
v L "var1" 2 606 "int16" `305 
f B "make32" 2 606 "int32(int16 var1)" `304 
v L "var1" 2 607 "int16" `307 
v L "var2" 2 607 "int16" `308 
f G "make32" 2 607 "int32(int16 var1,int16 var2)" `306 
v L "var1" 2 608 "int16" `307 
v L "var2" 2 608 "int8" `311 
f G "make32" 2 608 "int32(int16 var1,int8 var2)" `309 
v L "var1" 2 609 "int16" `313 
v L "var2" 2 609 "int8" `314 
v L "var3" 2 609 "int8" `315 
f G "make32" 2 609 "int32(int16 var1,int8 var2,int8 var3)" `312 
v L "var1" 2 610 "int8" `317 
f G "make32" 2 610 "int32(int8 var1)" `316 
v L "var1" 2 611 "int8" `307 
v L "var2" 2 611 "int8" `320 
f G "make32" 2 611 "int32(int8 var1,int8 var2)" `318 
v L "var1" 2 612 "int8" `313 
v L "var2" 2 612 "int8" `314 
v L "var3" 2 612 "int8" `324 
f G "make32" 2 612 "int32(int8 var1,int8 var2,int8 var3)" `321 
v L "var1" 2 613 "int8" `326 
v L "var2" 2 613 "int8" `327 
v L "var3" 2 613 "int8" `328 
v L "var4" 2 613 "int8" `329 
f G "make32" 2 613 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `325 
v L "var1" 2 614 "int8" `307 
v L "var2" 2 614 "int16" `332 
f G "make32" 2 614 "int32(int8 var1,int16 var2)" `330 
v L "var1" 2 615 "int8" `313 
v L "var2" 2 615 "int16" `314 
v L "var3" 2 615 "int8" `336 
f G "make32" 2 615 "int32(int8 var1,int16 var2,int8 var3)" `333 
v L "var1" 2 616 "int8" `313 
v L "var2" 2 616 "int8" `314 
v L "var3" 2 616 "int16" `340 
f G "make32" 2 616 "int32(int8 var1,int8 var2,int16 var3)" `337 
v L "var" 2 617 "int8" `342 
v L "bit" 2 617 "int8" `343 
f B "bit_set" 2 617 "void(int8 var,int8 bit)" `341 
v L "var" 2 618 "int16" `342 
v L "bit" 2 618 "int8" `346 
f G "bit_set" 2 618 "void(int16 var,int8 bit)" `344 
v L "var" 2 619 "int32" `342 
v L "bit" 2 619 "int8" `349 
f G "bit_set" 2 619 "void(int32 var,int8 bit)" `347 
v L "var" 2 620 "int8" `351 
v L "bit" 2 620 "int8" `352 
f B "bit_clear" 2 620 "void(int8 var,int8 bit)" `350 
v L "var" 2 621 "int16" `351 
v L "bit" 2 621 "int8" `355 
f G "bit_clear" 2 621 "void(int16 var,int8 bit)" `353 
v L "var" 2 622 "int32" `351 
v L "bit" 2 622 "int8" `358 
f G "bit_clear" 2 622 "void(int32 var,int8 bit)" `356 
v L "var" 2 623 "int8" `360 
v L "bit" 2 623 "int8" `361 
f B "bit_test" 2 623 "int8(int8 var,int8 bit)" `359 
v L "var" 2 624 "int16" `360 
v L "bit" 2 624 "int8" `364 
f G "bit_test" 2 624 "int8(int16 var,int8 bit)" `362 
v L "var" 2 625 "int32" `360 
v L "bit" 2 625 "int8" `367 
f G "bit_test" 2 625 "int8(int32 var,int8 bit)" `365  "#use delay() Prototypes:"
v L "count" 2 628 "int8" `369 
f B "delay_cycles" 2 628 "void(int8 count)" `368 
v L "time" 2 629 "int16" `371 
f B "delay_ms" 2 629 "void(int16 time)" `370 
v L "time" 2 630 "int16" `373 
f B "delay_us" 2 630 "void(int16 time)" `372  "#use rs232() Prototypes:"
v L "cdata" 2 633 "int8" `375 
f B "putchar" 2 633 "void(int8 cdata)" `374 
v L "cdata" 2 634 "int8" `377 
v L "stream" 2 634 "int8" `378 
f G "putchar" 2 634 "void(int8 cdata,int8 stream)" `376 
v L "string" 2 635 "*int8" `380 
f B "puts" 2 635 "void(*int8 string)" `379 
v L "string" 2 636 "*int8" `382 
v L "stream" 2 636 "int8" `383 
f G "puts" 2 636 "void(*int8 string,int8 stream)" `381 
f B "getch" 2 637 "int8()" `384 
v L "stream" 2 638 "int8" `386 
f G "getch" 2 638 "int8(int8 stream)" `385 
v L "string" 2 639 "*int8" `388 
f B "gets" 2 639 "void(*int8 string)" `387 
v L "string" 2 640 "*int8" `390 
v L "stream" 2 640 "int8" `391 
f G "gets" 2 640 "void(*int8 string,int8 stream)" `389 
f B "kbhit" 2 641 "int8()" `392 
v L "stream" 2 642 "int8" `394 
f G "kbhit" 2 642 "int8(int8 stream)" `393 
v L "string" 2 643 "*int8" `396 
f B "printf" 2 643 "void(*int8 string,*int8 _VA_LIST)" `395 
v L "stream" 2 644 "int8" `399 
v L "string" 2 644 "*int8" `400 
f B "fprintf" 2 644 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `398 
f B "putc_send" 2 645 "void()" `402 
v L "stream" 2 646 "int8" `404 
f B "fputc_send" 2 646 "void(int8 stream)" `403 
f B "rcv_buffer_full" 2 647 "int8()" `405 
v L "stream" 2 648 "int8" `407 
f G "rcv_buffer_full" 2 648 "int8(int8 stream)" `406 
f B "rcv_buffer_bytes" 2 649 "int16()" `408 
v L "stream" 2 650 "int8" `410 
f G "rcv_buffer_bytes" 2 650 "int16(int8 stream)" `409 
f B "tx_buffer_full" 2 651 "int8()" `411 
v L "stream" 2 652 "int8" `413 
f G "tx_buffer_full" 2 652 "int8(int8 stream)" `412 
f B "tx_buffer_bytes" 2 653 "int16()" `414 
v L "stream" 2 654 "int8" `416 
f G "tx_buffer_bytes" 2 654 "int16(int8 stream)" `415  "#use i2c() Prototypes:"
f B "i2c_read" 2 657 "int8()" `417 
v L "stream" 2 658 "int8" `419 
f G "i2c_read" 2 658 "int8(int8 stream)" `418 
v L "stream" 2 659 "int8" `421 
v L "ack" 2 659 "int8" `422 
f G "i2c_read" 2 659 "int8(int8 stream,int8 ack)" `420 
v L "data" 2 660 "int8" `424 
f B "i2c_write" 2 660 "int8(int8 data)" `423 
v L "stream" 2 661 "int8" `426 
v L "data" 2 661 "int8" `427 
f G "i2c_write" 2 661 "int8(int8 stream,int8 data)" `425 
f B "i2c_start" 2 662 "void()" `428 
v L "stream" 2 663 "int8" `430 
f G "i2c_start" 2 663 "void(int8 stream)" `429 
v L "stream" 2 664 "int8" `432 
v L "restart" 2 664 "int8" `433 
f G "i2c_start" 2 664 "void(int8 stream,int8 restart)" `431 
f B "i2c_stop" 2 665 "void()" `434 
v L "stream" 2 666 "int8" `436 
f G "i2c_stop" 2 666 "void(int8 stream)" `435 
f B "i2c_isr_state" 2 667 "int8()" `437 
v L "addr" 2 668 "int8" `439 
f B "i2c_slaveaddr" 2 668 "void(int8 addr)" `438 
v L "stream" 2 669 "int8" `441 
v L "addr" 2 669 "int8" `442 
f G "i2c_slaveaddr" 2 669 "void(int8 stream,int8 addr)" `440 
f B "i2c_poll" 2 670 "int8()" `443 
v L "stream" 2 671 "int8" `445 
f G "i2c_poll" 2 671 "int8(int8 stream)" `444 
v L "baud" 2 672 "int32" `447 
f B "i2c_init" 2 672 "void(int32 baud)" `446 
v L "stream" 2 673 "int8" `449 
v L "baud" 2 673 "int32" `450 
f G "i2c_init" 2 673 "void(int8 stream,int32 baud)" `448  "#use spi() Prototypes:"
f B "spi_xfer" 2 676 "int8()" `451 
f G "spi_xfer" 2 677 "int16()" `452 
f G "spi_xfer" 2 678 "int32()" `453 
v L "data" 2 679 "int8" `455 
f G "spi_xfer" 2 679 "int8(int8 data)" `454 
v L "data" 2 680 "int16" `457 
f G "spi_xfer" 2 680 "int16(int16 data)" `456 
v L "data" 2 681 "int32" `459 
f G "spi_xfer" 2 681 "int32(int32 data)" `458 
v L "stream" 2 682 "int8" `461 
v L "data" 2 682 "int8" `462 
f G "spi_xfer" 2 682 "int8(int8 stream,int8 data)" `460 
v L "stream" 2 683 "int8" `461 
v L "data" 2 683 "int16" `465 
f G "spi_xfer" 2 683 "int16(int8 stream,int16 data)" `463 
v L "stream" 2 684 "int8" `461 
v L "data" 2 684 "int32" `468 
f G "spi_xfer" 2 684 "int32(int8 stream,int32 data)" `466 
v L "stream" 2 685 "int8" `470 
v L "data" 2 685 "int8" `471 
v L "bits" 2 685 "int8" `472 
f G "spi_xfer" 2 685 "int8(int8 stream,int8 data,int8 bits)" `469 
v L "stream" 2 686 "int8" `470 
v L "data" 2 686 "int16" `471 
v L "bits" 2 686 "int8" `476 
f G "spi_xfer" 2 686 "int16(int8 stream,int16 data,int8 bits)" `473 
v L "stream" 2 687 "int8" `470 
v L "data" 2 687 "int32" `471 
v L "bits" 2 687 "int8" `480 
f G "spi_xfer" 2 687 "int32(int8 stream,int32 data,int8 bits)" `477 
v L "baud" 2 688 "int32" `482 
f B "spi_init" 2 688 "void(int32 baud)" `481 
v L "stream" 2 689 "int8" `484 
v L "baud" 2 689 "int32" `485 
f G "spi_init" 2 689 "void(int8 stream,int32 baud)" `483 
v L "baud" 2 690 "int32" `487 
f B "spi_speed" 2 690 "void(int32 baud)" `486 
v L "stream" 2 691 "int8" `489 
v L "baud" 2 691 "int32" `490 
f G "spi_speed" 2 691 "void(int8 stream,int32 baud)" `488 
v L "stream" 2 692 "int8" `492 
v L "baud" 2 692 "int32" `493 
v L "clock" 2 692 "int32" `494 
f G "spi_speed" 2 692 "void(int8 stream,int32 baud,int32 clock)" `491 
v L "data" 2 693 "int8" `496 
f B "spi_prewrite" 2 693 "void(int8 data)" `495 
v L "data" 2 694 "int16" `498 
f G "spi_prewrite" 2 694 "void(int16 data)" `497 
v L "data" 2 695 "int32" `500 
f G "spi_prewrite" 2 695 "void(int32 data)" `499 
v L "??65535" 2 696 "int8" `502 
v L "data" 2 696 "int8" `503 
f G "spi_prewrite" 2 696 "void(int8 ,int8 data)" `501 
v L "??65535" 2 697 "int8" `502 
v L "data" 2 697 "int16" `506 
f G "spi_prewrite" 2 697 "void(int8 ,int16 data)" `504 
v L "??65535" 2 698 "int8" `502 
v L "data" 2 698 "int32" `509 
f G "spi_prewrite" 2 698 "void(int8 ,int32 data)" `507 
f B "spi_xfer_in" 2 699 "int8()" `510 
f G "spi_xfer_in" 2 700 "int16()" `511 
f G "spi_xfer_in" 2 701 "int32()" `512 
v L "bits" 2 702 "int8" `514 
f G "spi_xfer_in" 2 702 "int8(int8 bits)" `513 
v L "bits" 2 703 "int8" `516 
f G "spi_xfer_in" 2 703 "int16(int8 bits)" `515 
v L "bits" 2 704 "int8" `518 
f G "spi_xfer_in" 2 704 "int32(int8 bits)" `517 
v L "stream" 2 705 "int8" `520 
v L "bits" 2 705 "int8" `521 
f G "spi_xfer_in" 2 705 "int8(int8 stream,int8 bits)" `519 
v L "stream" 2 706 "int8" `520 
v L "bits" 2 706 "int8" `524 
f G "spi_xfer_in" 2 706 "int16(int8 stream,int8 bits)" `522 
v L "stream" 2 707 "int8" `520 
v L "bits" 2 707 "int8" `527 
f G "spi_xfer_in" 2 707 "int32(int8 stream,int8 bits)" `525  "#use rtos() Prototypes:"
f B "rtos_run" 2 710 "void()" `528 
f B "rtos_yield" 2 711 "void()" `529 
v L "task" 2 712 "int8" `531 
f B "rtos_enable" 2 712 "void(int8 task)" `530 
v L "task" 2 713 "int8" `533 
f B "rtos_disable" 2 713 "void(int8 task)" `532 
f B "rtos_terminate" 2 714 "void()" `534 
v L "flag" 2 715 "int8" `536 
f B "rtos_await" 2 715 "void(int8 flag)" `535 
v L "sem" 2 716 "int8" `538 
f B "rtos_wait" 2 716 "void(int8 sem)" `537 
v L "sem" 2 717 "int8" `540 
f B "rtos_signal" 2 717 "void(int8 sem)" `539 
v L "task" 2 718 "int8" `542 
v L "msg" 2 718 "int8" `543 
f B "rtos_msg_send" 2 718 "void(int8 task,int8 msg)" `541 
f B "rtos_msg_read" 2 719 "int8()" `544 
f B "rtos_msg_poll" 2 720 "int8()" `545 
v L "task" 2 721 "int8" `547 
f B "rtos_overrun" 2 721 "int8(int8 task)" `546 
v L "task" 2 722 "int8" `549 
v L "stat" 2 722 "*int8" `550 
f B "rtos_stats" 2 722 "void(int8 task,*int8 stat)" `548  "#use timer() Prototypes:"
f B "get_ticks" 2 725 "int8()" `551 
f G "get_ticks" 2 726 "int16()" `552 
f G "get_ticks" 2 727 "int32()" `553 
v L "stream" 2 728 "int8" `555 
f G "get_ticks" 2 728 "int8(int8 stream)" `554 
v L "stream" 2 729 "int8" `557 
f G "get_ticks" 2 729 "int16(int8 stream)" `556 
v L "stream" 2 730 "int8" `559 
f G "get_ticks" 2 730 "int32(int8 stream)" `558 
v L "value" 2 731 "int8" `561 
f B "set_ticks" 2 731 "void(int8 value)" `560 
v L "value" 2 732 "int16" `563 
f G "set_ticks" 2 732 "void(int16 value)" `562 
v L "value" 2 733 "int32" `565 
f G "set_ticks" 2 733 "void(int32 value)" `564 
v L "stream" 2 734 "int8" `567 
v L "value" 2 734 "int8" `568 
f G "set_ticks" 2 734 "void(int8 stream,int8 value)" `566 
v L "stream" 2 735 "int8" `567 
v L "value" 2 735 "int16" `571 
f G "set_ticks" 2 735 "void(int8 stream,int16 value)" `569 
v L "stream" 2 736 "int8" `567 
v L "value" 2 736 "int32" `574 
f G "set_ticks" 2 736 "void(int8 stream,int32 value)" `572  "#use pwm() Prototypes:"
f B "pwm_on" 2 739 "void()" `575 
v L "stream" 2 740 "int8" `577 
f G "pwm_on" 2 740 "void(int8 stream)" `576 
f B "pwm_off" 2 741 "void()" `578 
v L "stream" 2 742 "int8" `580 
f G "pwm_off" 2 742 "void(int8 stream)" `579 
v L "duty" 2 743 "int16" `582 
f B "pwm_set_duty" 2 743 "void(int16 duty)" `581 
v L "stream" 2 744 "int8" `584 
v L "duty" 2 744 "int16" `585 
f G "pwm_set_duty" 2 744 "void(int8 stream,int16 duty)" `583 
v L "percent" 2 745 "int16" `587 
f B "pwm_set_duty_percent" 2 745 "void(int16 percent)" `586 
v L "stream" 2 746 "int8" `589 
v L "percent" 2 746 "int16" `590 
f G "pwm_set_duty_percent" 2 746 "void(int8 stream,int16 percent)" `588 
v L "frequency" 2 747 "int32" `592 
f B "pwm_set_frequency" 2 747 "void(int32 frequency)" `591 
v L "stream" 2 748 "int8" `594 
v L "frequency" 2 748 "int32" `595 
f G "pwm_set_frequency" 2 748 "void(int8 stream,int32 frequency)" `593  "#use capture() Prototypes:"
f B "get_capture_time" 2 751 "int16()" `596 
v L "stream" 2 752 "int8" `598 
f G "get_capture_time" 2 752 "int16(int8 stream)" `597 
f B "get_capture_event" 2 753 "int8()" `599 
v L "stream" 2 754 "int8" `601 
f G "get_capture_event" 2 754 "int8(int8 stream)" `600  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 767 "int32" `603 
f B "goto_address" 2 767 "void(int32 address)" `602 
v L "label" 2 768 "int32" `605 
f B "label_address" 2 768 "int32(int32 label)" `604  "Program Memory Prototypes:"
v L "address" 2 771 "int32" `607 
v L "dataptr" 2 771 "*int8" `608 
v L "count" 2 771 "int16" `609 
f B "read_program_memory" 2 771 "void(int32 address,*int8 dataptr,int16 count)" `606 
v L "address" 2 772 "int32" `611 
f B "read_program_eeprom" 2 772 "int16(int32 address)" `610 
v L "address" 2 773 "int32" `613 
f B "erase_program_eeprom" 2 773 "void(int32 address)" `612 
v L "address" 2 774 "int32" `615 
v L "dataptr" 2 774 "*int8" `616 
v L "count" 2 774 "int16" `617 
f B "write_program_memory" 2 774 "void(int32 address,*int8 dataptr,int16 count)" `614 
v L "address" 2 775 "int32" `619 
v L "data" 2 775 "int16" `620 
f B "write_program_eeprom" 2 775 "void(int32 address,int16 data)" `618  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 780 "int16" `621 
v L "address" 2 785 "__EEADDRESS__" `623 
f B "read_eeprom" 2 785 "int8(__EEADDRESS__ address)" `622 
v L "address" 2 786 "__EEADDRESS__" `625 
v L "value" 2 786 "int8" `626 
f B "write_eeprom" 2 786 "void(__EEADDRESS__ address,int8 value)" `624  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 793 "int32" `628 
f B "enable_interrupts" 2 793 "void(int32 interrupt)" `627 
v L "interrupt" 2 794 "int32" `630 
f B "disable_interrupts" 2 794 "void(int32 interrupt)" `629 
v L "interrupt" 2 795 "int32" `632 
f B "clear_interrupt" 2 795 "void(int32 interrupt)" `631 
v L "interrupt" 2 796 "int32" `634 
f B "interrupt_active" 2 796 "int8(int32 interrupt)" `633 
v L "interrupt" 2 797 "int32" `636 
f B "interrupt_enabled" 2 797 "int8(int32 interrupt)" `635 
v L "source" 2 798 "int8" `638 
v L "edge" 2 798 "int8" `639 
f B "ext_int_edge" 2 798 "void(int8 source,int8 edge)" `637 
v L "address" 2 799 "int16" `641 
f B "jump_to_irs" 2 799 "void(int16 address)" `640  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 801 "0x40"
d G "H_TO_L" 2 802 "0"
d G "GLOBAL" 2 804 "0xF2C0"
d G "PERIPH" 2 805 "0xF240"
d G "INT_RTCC" 2 806 "0x00F220"
d G "INT_TIMER0" 2 807 "0x00F220"
d G "INT_TIMER1" 2 808 "0x009D01"
d G "INT_TIMER2" 2 809 "0x009D02"
d G "INT_TIMER3" 2 810 "0x00A002"
d G "INT_EXT_L2H" 2 811 "0x5000F210"
d G "INT_EXT_H2L" 2 812 "0x6000F210"
d G "INT_EXT" 2 813 "0x00F210"
d G "INT_EXT1_L2H" 2 814 "0x5001F008"
d G "INT_EXT1_H2L" 2 815 "0x6001F008"
d G "INT_EXT1" 2 816 "0x00F008"
d G "INT_EXT2_L2H" 2 817 "0x5002F010"
d G "INT_EXT2_H2L" 2 818 "0x6002F010"
d G "INT_EXT2" 2 819 "0x00F010"
d G "INT_RB" 2 820 "0x00FFF208"
d G "INT_PSP" 2 821 "0x009D80"
d G "INT_AD" 2 822 "0x009D40"
d G "INT_RDA" 2 823 "0x009D20"
d G "INT_TBE" 2 824 "0x009D10"
d G "INT_SSP" 2 825 "0x009D08"
d G "INT_CCP1" 2 826 "0x009D04"
d G "INT_CCP2" 2 827 "0x00A001"
d G "INT_BUSCOL" 2 828 "0x00A008"
d G "INT_LOWVOLT" 2 829 "0x00A004"
d G "INT_CANIRX" 2 830 "0x00A380"
d G "INT_CANWAKE" 2 831 "0x00A340"
d G "INT_CANERR" 2 832 "0x00A320"
d G "INT_COMP" 2 833 "0x00A040"
d G "INT_EEPROM" 2 834 "0x00A010"
d G "INT_CANTX2" 2 835 "0x00A310"
d G "INT_CANTX1" 2 836 "0x00A308"
d G "INT_CANTX0" 2 837 "0x00A304"
d G "INT_CANRX1" 2 838 "0x00A302"
d G "INT_CANRX0" 2 839 "0x00A301"
d G "INT_OSCF" 2 840 "0x00A080"
C L "jump_to_irs" 1 4 5 "FUNCTION"
D G "__P18CXXXX_H__" 3 4 ""
D G "__18CXX" 3 7 ""
D G "_asm" 3 21 "#asm"
D G "_endasm" 3 22 "#endasm"
T G "STKPTRBITS" 4 25 "{}" `682 
V G "STKPTRbits" 4 26 "STKPTRBITS" `683 
T G "TBLPTRUBITS" 4 45 "{}" `694 
V G "TBLPTRUbits" 4 46 "TBLPTRUBITS" `695 
T G "INTCONBITS" 4 93 "{}" `729 
V G "INTCONbits" 4 94 "INTCONBITS" `730 
T G "INTCON2BITS" 4 117 "{}" `748 
V G "INTCON2bits" 4 118 "INTCON2BITS" `749 
T G "INTCON3BITS" 4 147 "{}" `771 
V G "INTCON3bits" 4 148 "INTCON3BITS" `772 
T G "STATUSBITS" 4 205 "{int1 C,int1 DC,int1 Z,int1 OV,int1 N}" `806 
V G "STATUSbits" 4 206 "STATUSBITS" `807 
T G "T0CONBITS" 4 234 "{}" `826 
V G "T0CONbits" 4 235 "T0CONBITS" `827 
T G "OSCCONBITS" 4 254 "{}" `841 
V G "OSCCONbits" 4 255 "OSCCONBITS" `842 
T G "HLVDCONBITS" 4 293 "{}" `867 
V G "HLVDCONbits" 4 294 "HLVDCONBITS" `868 
T G "WDTCONBITS" 4 309 "{}" `876 
V G "WDTCONbits" 4 310 "WDTCONBITS" `877 
T G "RCONBITS" 4 324 "{int1 BOR,int1 POR,int1 PD,int1 TO,int1 RI,int1 ,int1 SBOREN,int1 IPEN}" `888 
V G "RCONbits" 4 325 "RCONBITS" `889 
T G "T1CONBITS" 4 351 "{}" `909 
V G "T1CONbits" 4 352 "T1CONBITS" `910 
T G "T2CONBITS" 4 383 "{}" `930 
V G "T2CONbits" 4 384 "T2CONBITS" `931 
T G "SSPSTATBITS" 4 431 "{}" `963 
V G "SSPSTATbits" 4 432 "SSPSTATBITS" `964 
T G "SSPCON1BITS" 4 448 "{}" `975 
V G "SSPCON1bits" 4 449 "SSPCON1BITS" `976 
T G "SSPCON2BITS" 4 463 "{int1 SEN,int1 RSEN,int1 PEN,int1 RCEN,int1 ACKEN,int1 ACKDT,int1 ACKSTAT,int1 GCEN}" `987 
V G "SSPCON2bits" 4 464 "SSPCON2BITS" `988 
T G "ADCON0BITS" 4 498 "{}" `1010 
V G "ADCON0bits" 4 499 "ADCON0BITS" `1011 
T G "ADCON1BITS" 4 513 "{}" `1020 
V G "ADCON1bits" 4 514 "ADCON1BITS" `1021 
T G "ADCON2BITS" 4 530 "{}" `1032 
V G "ADCON2bits" 4 531 "ADCON2BITS" `1033 
T G "CCP1CONBITS" 4 559 "{}" `1052 
V G "CCP1CONbits" 4 560 "CCP1CONBITS" `1053 
T G "CCP2CONBITS" 4 586 "{}" `1070 
V G "CCP2CONbits" 4 587 "CCP2CONBITS" `1071 
T G "BAUDCONBITS" 4 612 "{}" `1089 
V G "BAUDCONbits" 4 613 "BAUDCONBITS" `1090 
T G "PWM1CONBITS" 4 626 "{}" `1098 
V G "PWM1CONbits" 4 627 "PWM1CONBITS" `1099 
T G "ECCP1ASBITS" 4 644 "{}" `1111 
V G "ECCP1ASbits" 4 645 "ECCP1ASBITS" `1112 
T G "CVRCONBITS" 4 661 "{}" `1123 
V G "CVRCONbits" 4 662 "CVRCONBITS" `1124 
T G "CMCONBITS" 4 679 "{}" `1136 
V G "CMCONbits" 4 680 "CMCONBITS" `1137 
T G "T3CONBITS" 4 706 "{}" `1157 
V G "T3CONbits" 4 707 "T3CONBITS" `1158 
T G "TXSTABITS" 4 729 "{int1 TX9D,int1 TRMT,int1 BRGH,int1 SENDB,int1 SYNC,int1 TXEN,int1 TX9,int1 CSRC}" `1173 
V G "TXSTAbits" 4 730 "TXSTABITS" `1174 
T G "RCSTABITS" 4 753 "{}" `1190 
V G "RCSTAbits" 4 754 "RCSTABITS" `1191 
T G "EECON1BITS" 4 776 "{int1 RD,int1 WR,int1 WREN,int1 WRERR,int1 FREE,int1 ,int1 CFGS,int1 EEPGD}" `1206 
V G "EECON1bits" 4 777 "EECON1BITS" `1207 
T G "IPR2BITS" 4 800 "{}" `1223 
V G "IPR2bits" 4 801 "IPR2BITS" `1224 
T G "PIR2BITS" 4 824 "{}" `1240 
V G "PIR2bits" 4 825 "PIR2BITS" `1241 
T G "PIE2BITS" 4 848 "{}" `1257 
V G "PIE2bits" 4 849 "PIE2BITS" `1258 
T G "IPR1BITS" 4 863 "{int1 TMR1IP,int1 TMR2IP,int1 CCP1IP,int1 SSPIP,int1 TXIP,int1 RCIP,int1 ADIP,int1 PSPIP}" `1269 
V G "IPR1bits" 4 864 "IPR1BITS" `1270 
T G "PIR1BITS" 4 878 "{int1 TMR1IF,int1 TMR2IF,int1 CCP1IF,int1 SSPIF,int1 TXIF,int1 RCIF,int1 ADIF,int1 PSPIF}" `1281 
V G "PIR1bits" 4 879 "PIR1BITS" `1282 
T G "PIE1BITS" 4 893 "{int1 TMR1IE,int1 TMR2IE,int1 CCP1IE,int1 SSPIE,int1 TXIE,int1 RCIE,int1 ADIE,int1 PSPIE}" `1293 
V G "PIE1bits" 4 894 "PIE1BITS" `1294 
T G "OSCTUNEBITS" 4 909 "{}" `1304 
V G "OSCTUNEbits" 4 910 "OSCTUNEBITS" `1305 
T G "TRISEBITS" 4 924 "{int1 TRISE0,int1 TRISE1,int1 TRISE2,int1 TRISE3,int1 TRISE4,int1 TRISE5,int1 TRISE6,int1 TRISE7}" `1316 
V G "TRISEbits" 4 925 "TRISEBITS" `1317 
T G "TRISDBITS" 4 939 "{int1 TRISD0,int1 TRISD1,int1 TRISD2,int1 TRISD3,int1 TRISD4,int1 TRISD5,int1 TRISD6,int1 TRISD7}" `1328 
V G "TRISDbits" 4 940 "TRISDBITS" `1329 
T G "TRISCBITS" 4 954 "{int1 TRISC0,int1 TRISC1,int1 TRISC2,int1 TRISC3,int1 TRISC4,int1 TRISC5,int1 TRISC6,int1 TRISC7}" `1340 
V G "TRISCbits" 4 955 "TRISCBITS" `1341 
T G "TRISBBITS" 4 969 "{int1 TRISB0,int1 TRISB1,int1 TRISB2,int1 TRISB3,int1 TRISB4,int1 TRISB5,int1 TRISB6,int1 TRISB7}" `1352 
V G "TRISBbits" 4 970 "TRISBBITS" `1353 
T G "TRISABITS" 4 984 "{int1 TRISA0,int1 TRISA1,int1 TRISA2,int1 TRISA3,int1 TRISA4,int1 TRISA5,int1 TRISA6,int1 TRISA7}" `1364 
V G "TRISAbits" 4 985 "TRISABITS" `1365 
T G "LATEBITS" 4 999 "{int1 LATE0,int1 LATE1,int1 LATE2,int1 LATE3,int1 LATE4,int1 LATE5,int1 LATE6,int1 LATE7}" `1376 
V G "LATEbits" 4 1000 "LATEBITS" `1377 
T G "LATDBITS" 4 1014 "{int1 LATD0,int1 LATD1,int1 LATD2,int1 LATD3,int1 LATD4,int1 LATD5,int1 LATD6,int1 LATD7}" `1388 
V G "LATDbits" 4 1015 "LATDBITS" `1389 
T G "LATCBITS" 4 1029 "{int1 LATC0,int1 LATC1,int1 LATC2,int1 LATC3,int1 LATC4,int1 LATC5,int1 LATC6,int1 LATC7}" `1400 
V G "LATCbits" 4 1030 "LATCBITS" `1401 
T G "LATBBITS" 4 1044 "{int1 LATB0,int1 LATB1,int1 LATB2,int1 LATB3,int1 LATB4,int1 LATB5,int1 LATB6,int1 LATB7}" `1412 
V G "LATBbits" 4 1045 "LATBBITS" `1413 
T G "LATABITS" 4 1059 "{int1 LATA0,int1 LATA1,int1 LATA2,int1 LATA3,int1 LATA4,int1 LATA5,int1 LATA6,int1 LATA7}" `1424 
V G "LATAbits" 4 1060 "LATABITS" `1425 
T G "PORTEBITS" 4 1074 "{int1 RE0,int1 RE1,int1 RE2,int1 RE3,int1 RE4,int1 RE5,int1 RE6,int1 RE7}" `1436 
V G "PORTEbits" 4 1075 "PORTEBITS" `1437 
T G "PORTDBITS" 4 1089 "{int1 RD0,int1 RD1,int1 RD2,int1 RD3,int1 RD4,int1 RD5,int1 RD6,int1 RD7}" `1448 
V G "PORTDbits" 4 1090 "PORTDBITS" `1449 
T G "PORTCBITS" 4 1104 "{int1 RC0,int1 RC1,int1 RC2,int1 RC3,int1 RC4,int1 RC5,int1 RC6,int1 RC7}" `1460 
V G "PORTCbits" 4 1105 "PORTCBITS" `1461 
T G "PORTBBITS" 4 1119 "{int1 RB0,int1 RB1,int1 RB2,int1 RB3,int1 RB4,int1 RB5,int1 RB6,int1 RB7}" `1472 
V G "PORTBbits" 4 1120 "PORTBBITS" `1473 
T G "PORTABITS" 4 1134 "{int1 RA0,int1 RA1,int1 RA2,int1 RA3,int1 RA4,int1 RA5,int1 RA6,int1 RA7}" `1484 
V G "PORTAbits" 4 1135 "PORTABITS" `1485 
D G "Reset" 3 80 "()            reset_cpu()"
D G "far" 3 81 ""
D G "ClrWdt" 3 82 "()         restart_wdt()"
D G "Nop" 3 83 "()            delay_cycles(1)"
D G "__CCS__" 3 85 ""
C L "jump_to_irs" 3 1 1 "FUNCTION"
V L "s1" 3 88 "*sint8" `1488 
V L "s2" 3 88 "int32" `1489 
f G "strcmppgm2ram" 3 88 "sint8(*sint8 s1,int32 s2)" `1487 
V L "s" 3 89 "*" `1491 
V L "c" 3 89 "int8" `1492 
f G "strchrpgm" 3 89 "*sint8(* s,int8 c)" `1490 
V L "s1" 3 90 "*sint8" `1495 
V L "s2" 3 90 "int32" `1496 
f G "strstrrampgm" 3 90 "*sint8(*sint8 s1,int32 s2)" `1494 
V L "s" 3 91 "int32" `1498 
f G "strlenpgm" 3 91 "int8(int32 s)" `1497 
V L "d" 3 92 "*int8" `1500 
V L "s" 3 92 "int32" `1501 
V L "n" 3 92 "int16" `1502 
f G "memcpypgm2ram" 3 92 "void(*int8 d,int32 s,int16 n)" `1499  "char* strupr(char *s);   now in string.h"
V L "d" 3 94 "*sint8" `1504 
V L "s" 3 94 "int32" `1505 
f G "strcpypgm2ram" 3 94 "void(*sint8 d,int32 s)" `1503 
D G "GetSystemClock" 1 20 "()       getenv("CLOCK")"
D G "GetInstructionClock" 1 21 "()  (GetSystemClock()/4)"
D G "GetPeripheralClock" 1 22 "()   (unsigned int32)GetInstructionClock()"
D G "MIN" 1 29 "(a,b)  ((a > b) ? b : a)"
D G "_STDINT" 5 19 ""
C L "strcpypgm2ram" 5 2 1 "FUNCTION"
T G "int8_t" 5 23 "sint8" `1510 
T G "uint8_t" 5 24 "int8" `1511 
T G "int16_t" 5 25 "sint16" `1512 
T G "uint16_t" 5 26 "int16" `1513 
T G "int32_t" 5 27 "sint32" `1514 
T G "uint32_t" 5 28 "int32" `1515 
D G "INT8_MAX" 5 37 " (128)"
D G "INT8_MIN" 5 38 " (-127)"
D G "UINT8_MAX" 5 39 " (255)"
D G "INT16_MAX" 5 41 " (32767)"
D G "INT16_MIN" 5 42 " (-32768)"
D G "UINT16_MAX" 5 43 " (65535)"
D G "INT32_MAX" 5 45 " (2147483647)"
D G "INT32_MIN" 5 46 " (-2147483648)"
D G "UINT32_MAX" 5 47 " (4294967295)"
C L "strcpypgm2ram" 5 2 1 "FUNCTION"
T G "int_least8_t" 5 61 "sint8" `1516 
T G "uint_least8_t" 5 62 "int8" `1517 
T G "int_least16_t" 5 63 "sint16" `1518 
T G "uint_least16_t" 5 64 "int16" `1519 
T G "int_least32_t" 5 65 "sint32" `1520 
T G "uint_least32_t" 5 66 "int32" `1521 
D G "INT_LEAST8_MAX" 5 75 " (128)"
D G "INT_LEAST8_MIN" 5 76 " (-127)"
D G "UINT_LEAST8_MAX" 5 77 " (255)"
D G "INT_LEAST16_MAX" 5 79 " (32767)"
D G "INT_LEAST16_MIN" 5 80 " (-32768)"
D G "UINT_LEAST16_MAX" 5 81 " (65535)"
D G "INT_LEAST32_MAX" 5 83 " (2147483647)"
D G "INT_LEAST32_MIN" 5 84 " (-2147483648)"
D G "UINT_LEAST32_MAX" 5 85 " (4294967295)"
C L "strcpypgm2ram" 5 2 1 "FUNCTION"
T G "int_fast8_t" 5 112 "sint8" `1522 
T G "uint_fast8_t" 5 113 "int8" `1523 
D G "INT_FAST8_MAX" 5 114 " (128)"
D G "INT_FAST8_MIN" 5 115 " (-127)"
D G "UINT_FAST8_MAX" 5 116 " (255)"
T G "int_fast16_t" 5 117 "sint16" `1524 
T G "uint_fast16_t" 5 118 "int16" `1525 
T G "int_fast32_t" 5 121 "sint32" `1526 
T G "uint_fast32_t" 5 122 "int32" `1527 
D G "INT_FAST16_MAX" 5 124 " (32767)"
D G "INT_FAST16_MIN" 5 125 " (-32768)"
D G "UINT_FAST16_MAX" 5 126 " (65535)"
D G "INT_FAST32_MAX" 5 128 " (2147483647)"
D G "INT_FAST32_MIN" 5 129 " (-2147483648)"
D G "UINT_FAST32_MAX" 5 130 " (4294967295)"
C L "strcpypgm2ram" 5 2 9 "FUNCTION"
D G "__CCS_STACKTSK2_H__" 6 8 ""
D G "debug_mpfs2" 6 11 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q)"
D G "SIZEOF_MAC_HEADER" 6 20 "14"
D G "__DELAY_H" 6 23 ""
D G "Delay10us" 6 24 "(x) delay_us((uint16_t)10*(uint16_t)x)"
D G "DelayMs" 6 25 "(x)   delay_ms(x)"
D G "__WF_DEBUG_STRINGS_H" 6 27 "" "don't include this file"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
C L "strcpypgm2ram" 7 1 1 "*"
D G "__TCPIP_HITECH_WORKAROUND_H" 7 50 ""
D G "TCPIP_STACK_VERSION" 7 52 ""v5.42"		" "TCP/IP stack version"
D G "_STRING" 8 12 ""
D G "_STDDEF" 9 13 ""
D G "ptrdiff_t" 9 18 "unsigned int16"
D G "size_t" 9 24 "unsigned int16"
D G "wchar_t" 9 26 "char"
D G "NULL" 9 27 "0"
D G "offsetof" 9 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 10 12 ""
D G "islower" 10 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 10 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 10 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 10 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 10 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 10 19 "(x)  ((x)==' ')"
D G "isxdigit" 10 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 10 21 "(x)  ((x)<' ')"
D G "isprint" 10 22 "(x)  ((x)>=' ')"
D G "isgraph" 10 23 "(x)  ((x)>' ')"
D G "ispunct" 10 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "strcpypgm2ram" 8 19 10 "FUNCTION"
V L "s1" 8 34 "*int8" `1529 
V L "s2" 8 34 "*sint8" `1530 
V L "n" 8 34 "int16" `1531 
F G "memmove" 8 35 "*sint8(*int8 s1,*sint8 s2,int16 n)" `1528 
V L "sc1" 8 36 "*sint8" `1532 
V L "sc2" 8 37 "*sint8" `1533 
D G "strcopy" 8 54 "strcpy"
C L "strncpy" 8 19 4 "FUNCTION"
V L "s1" 8 61 "*sint8" `1535 
V L "s2" 8 61 "*sint8" `1536 
V L "n" 8 61 "int16" `1537 
F G "strncpy" 8 62 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `1534 
V L "s" 8 63 "*sint8" `1538 
C L "strcat" 8 19 3 "FUNCTION"
V L "s1" 8 78 "*sint8" `1540 
V L "s2" 8 78 "*sint8" `1541 
F G "strcat" 8 79 "*sint8(*sint8 s1,*sint8 s2)" `1539 
V L "s" 8 80 "*sint8" `1542 
C L "strncat" 8 19 2 "FUNCTION"
V L "s1" 8 96 "*sint8" `1544 
V L "s2" 8 96 "*sint8" `1545 
V L "n" 8 96 "int16" `1546 
F G "strncat" 8 97 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `1543 
V L "s" 8 98 "*sint8" `1547 
C L "memcmp" 8 19 3 "FUNCTION"
V L "s1" 8 120 "*int8" `1549 
V L "s2" 8 120 "*sint8" `1550 
V L "n" 8 120 "int16" `1551 
F G "memcmp" 8 121 "sint8(*int8 s1,*sint8 s2,int16 n)" `1548 
V L "su1" 8 122 "*sint8" `1552 
V L "su2" 8 122 "*sint8" `1553 
C L "strcmp" 8 19 2 "FUNCTION"
V L "s1" 8 134 "*sint8" `1555 
V L "s2" 8 134 "*sint8" `1556 
F G "strcmp" 8 135 "sint8(*sint8 s1,*sint8 s2)" `1554 
C L "strcoll" 8 19 2 "FUNCTION"
V L "s1" 8 144 "*sint8" `1558 
V L "s2" 8 144 "*sint8" `1559 
F G "strcoll" 8 145 "sint8(*sint8 s1,*sint8 s2)" `1557 
C L "strncmp" 8 19 4 "FUNCTION"
V L "s1" 8 157 "*sint8" `1561 
V L "s2" 8 157 "*sint8" `1562 
V L "n" 8 157 "int16" `1563 
F G "strncmp" 8 158 "sint8(*sint8 s1,*sint8 s2,int16 n)" `1560 
C L "strxfrm" 8 19 3 "FUNCTION"
V L "s1" 8 169 "*sint8" `1565 
V L "s2" 8 169 "*sint8" `1566 
V L "n" 8 169 "int16" `1567 
F G "strxfrm" 8 170 "int16(*sint8 s1,*sint8 s2,int16 n)" `1564 
V L "s" 8 171 "*sint8" `1568 
V L "n1" 8 172 "int8" `1569 
C L "memchr" 8 19 3 "FUNCTION"
V L "s" 8 191 "*int8" `1571 
V L "c" 8 191 "int8" `1572 
V L "n" 8 191 "int16" `1573 
F G "memchr" 8 192 "*sint8(*int8 s,int8 c,int16 n)" `1570 
V L "uc" 8 193 "sint8" `1574 
V L "su" 8 194 "*sint8" `1575 
C L "strchr" 8 19 2 "FUNCTION"
V L "s" 8 205 "*sint8" `1577 
V L "c" 8 205 "int8" `1578 
F G "strchr" 8 206 "*sint8(*sint8 s,int8 c)" `1576 
C L "strcspn" 8 19 4 "FUNCTION"
V L "s1" 8 217 "*sint8" `1580 
V L "s2" 8 217 "*sint8" `1581 
F G "strcspn" 8 218 "int8(*sint8 s1,*sint8 s2)" `1579 
V L "sc1" 8 219 "*sint8" `1582 
V L "sc2" 8 219 "*sint8" `1583 
C L "strpbrk" 8 19 4 "FUNCTION"
V L "s1" 8 232 "*sint8" `1585 
V L "s2" 8 232 "*sint8" `1586 
F G "strpbrk" 8 233 "*sint8(*sint8 s1,*sint8 s2)" `1584 
V L "sc1" 8 234 "*sint8" `1587 
V L "sc2" 8 234 "*sint8" `1588 
C L "strrchr" 8 19 2 "FUNCTION"
V L "s" 8 247 "*sint8" `1590 
V L "c" 8 247 "int8" `1591 
F G "strrchr" 8 248 "*sint8(*sint8 s,int8 c)" `1589 
V L "p" 8 249 "*sint8" `1592 
C L "strspn" 8 19 2 "FUNCTION"
V L "s1" 8 262 "*sint8" `1594 
V L "s2" 8 262 "*sint8" `1595 
F G "strspn" 8 263 "int8(*sint8 s1,*sint8 s2)" `1593 
V L "sc1" 8 264 "*sint8" `1596 
V L "sc2" 8 264 "*sint8" `1597 
C L "strstr" 8 19 6 "FUNCTION"
V L "s1" 8 281 "*sint8" `1599 
V L "s2" 8 281 "*sint8" `1600 
F G "strstr" 8 282 "*sint8(*sint8 s1,*sint8 s2)" `1598 
V L "s" 8 283 "*sint8" `1601 
V L "t" 8 283 "*sint8" `1602 
C L "strtok" 8 19 13 "FUNCTION"
V L "s1" 8 320 "*sint8" `1604 
V L "s2" 8 320 "*sint8" `1605 
F G "strtok" 8 321 "*sint8(*sint8 s1,*sint8 s2)" `1603 
V L "beg" 8 322 "*sint8" `1606 
V L "end" 8 322 "*sint8" `1607 
V L "save" 8 323 "*sint8" `1608 
C L "strlen" 8 19 6 "FUNCTION"
V L "s" 8 369 "*sint8" `1610 
F G "strlen" 8 370 "int8(*sint8 s)" `1609 
V L "sc" 8 371 "*sint8" `1611 
C L "stricmp" 8 19 2 "FUNCTION"
V L "s1" 8 380 "*sint8" `1613 
V L "s2" 8 380 "*sint8" `1614 
F G "stricmp" 8 381 "sint8(*sint8 s1,*sint8 s2)" `1612 
C L "strlwr" 8 19 3 "FUNCTION"
V L "s" 8 394 "*sint8" `1618 
F G "strlwr" 8 395 "*sint8(*sint8 s)" `1617 
V L "p" 8 396 "*sint8" `1619 
C L "strupr" 8 19 3 "FUNCTION"
V L "s" 8 408 "*sint8" `1621 
F G "strupr" 8 409 "*sint8(*sint8 s)" `1620 
V L "p" 8 410 "*sint8" `1622 
D G "_STDLIB" 11 12 ""
D G "RAND_MAX" 11 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 11 25 "1"
T G "div_t" 11 33 "{sint16 quot,sint16 rem}" `1626 
T G "ldiv_t" 11 38 "{sint32 quot,sint32 rem}" `1630  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 9 3 6 "FUNCTION"
C L "atoi" 11 43 2 "FUNCTION"
C L "atoi" 11 46 1 "*"
C L "atoi" 11 46 1 "*"
V L "s" 11 50 "*sint8" `1632 
f G "atoi" 11 50 "sint16(*sint8 s)" `1631  "Syntax: signed int32  atoi32(char * s)"
D G "atoi32" 11 56 "(s) atol(s)"
C L "atoi" 11 46 3 "FUNCTION"
V L "num" 11 79 "sint32" `1634 
V L "base" 11 79 "int16" `1635 
V L "s" 11 79 "*sint8" `1636 
f G "itoa" 11 79 "*sint8(sint32 num,int16 base,*sint8 s)" `1633  "Standard template: signed int16  atol(char * s)"
C L "itoa" 11 81 1 "*"
C L "itoa" 11 81 1 "*"
V L "s" 11 85 "*sint8" `1638 
f G "atol" 11 85 "sint32(*sint8 s)" `1637  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 11 87 1 "*"
C L "atol" 11 87 1 "*"
C L "atol" 11 87 1 "*"
C L "atol" 11 87 1 "*"
V L "s" 11 93 "*sint8" `1640 
V L "endptr" 11 93 "*sint8" `1641 
V L "base" 11 93 "sint16" `1642 
f G "strtol" 11 93 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `1639  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 11 95 1 "*"
C L "strtol" 11 95 1 "*"
C L "strtol" 11 95 1 "*"
C L "strtol" 11 95 1 "*"
V L "s" 11 101 "*sint8" `1644 
V L "endptr" 11 101 "*sint8" `1645 
V L "base" 11 101 "sint16" `1646 
f G "strtoul" 11 101 "int32(*sint8 s,*sint8 endptr,sint16 base)" `1643  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 11 95 2 "FUNCTION"
C L "strtoul" 11 103 1 "*"
C L "strtoul" 11 103 1 "*"
C L "strtoul" 11 103 1 "*"
V L "s" 11 110 "*sint8" `1648 
V L "endptr" 11 110 "*sint8" `1649 
f G "strtof" 11 110 "float(*sint8 s,*sint8 endptr)" `1647  "provided for compatibility"
D G "strtof48" 11 116 "(s, e) strtof(s, e)"
D G "strtod" 11 117 "(s, e) strtof(s, e)"
C L "strtof" 11 103 1 "FUNCTION"
C L "strtof" 11 120 1 "*"
D G "atof" 11 124 "(s)   strtof(s, 0)"
C L "strtof" 11 120 1 "FUNCTION"
C L "strtof" 11 143 1 "*"
C L "strtof" 11 143 1 "*"
C L "strtof" 11 143 1 "*"
V L "s" 11 149 "*sint8" `1651 
f G "atoe" 11 149 "float(*sint8 s)" `1650  "Pseudo-random sequence generation functions"
C L "atoe" 11 143 1 "FUNCTION"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
C L "atoe" 11 160 1 "*"
f G "rand" 11 169 "int16()" `1652  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
C L "rand" 11 171 1 "*"
V L "seed" 11 191 "int32" `1654 
f G "srand" 11 191 "void(int32 seed)" `1653  "Memory management functions"
C L "srand" 11 171 3 "FUNCTION"
V L "string" 11 205 "*sint8" `1656 
f G "system" 11 205 "sint8(*sint8 string)" `1655  "Searching and sorting utilities"
C L "system" 11 171 1 "FUNCTION"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 1 "*"
C L "system" 11 211 4 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
C L "system" 11 229 1 "*"
D G "labs" 11 249 "abs"
V L "numer" 11 251 "sint16" `1658 
V L "denom" 11 251 "sint16" `1659 
f G "div" 11 251 "div_t(sint16 numer,sint16 denom)" `1657 
V L "numer" 11 252 "sint32" `1661 
V L "denom" 11 252 "sint32" `1662 
f G "ldiv" 11 252 "ldiv_t(sint32 numer,sint32 denom)" `1660  "Multibyte character functions"
C L "ldiv" 11 229 4 "FUNCTION"
C L "ldiv" 9 2 7 "FUNCTION"
C L "ldiv" 8 2 7 "FUNCTION"
V L "numer" 11 274 "sint16" `1658 
V L "denom" 11 274 "sint16" `1665 
F G "div" 11 275 "div_t(sint16 numer,sint16 denom)" `1657 
V L "val" 11 276 "div_t" `1663 
V L "numer" 11 282 "sint32" `1661 
V L "denom" 11 282 "sint32" `1672 
F G "ldiv" 11 283 "ldiv_t(sint32 numer,sint32 denom)" `1660 
V L "val" 11 284 "ldiv_t" `1670 
V L "s" 11 361 "*sint8" `1678 
F G "atoe" 11 362 "float(*sint8 s)" `1650 
V L "pow10" 11 363 "float" `1677 
V L "result" 11 364 "float" `1678 
V L "sign" 11 365 "int8" `1679 
V L "expsign" 11 366 "int8" `1680 
V L "c" 11 367 "sint8" `1681 
V L "ptr" 11 368 "int8" `1682 
V L "i" 11 369 "int8" `1683 
V L "exp" 11 370 "float" `1684 
V L "expcnt" 11 371 "int8" `1685 
C L "atoe" 11 397 1 "FUNCTION"
V L "s" 11 429 "*sint8" `1698 
F G "atoi" 11 430 "sint16(*sint8 s)" `1631 
V L "result" 11 431 "sint16" `1697 
V L "sign" 11 432 "int16" `1698 
V L "base" 11 432 "int16" `1699 
V L "index" 11 432 "int16" `1700 
V L "c" 11 433 "sint8" `1701 
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
C L "atoi" 11 397 1 "FUNCTION"
V L "s" 11 498 "*sint8" `1703 
F G "atol" 11 499 "sint32(*sint8 s)" `1637 
V L "result" 11 500 "sint32" `1702 
V L "sign" 11 501 "int16" `1703 
V L "base" 11 501 "int16" `1704 
V L "index" 11 501 "int16" `1705 
V L "c" 11 502 "sint8" `1706 
C L "atol" 11 397 1 "FUNCTION"
C L "atol" 11 397 1 "FUNCTION"
C L "atol" 11 397 1 "FUNCTION"
C L "atol" 11 397 1 "FUNCTION"
C L "mult_with10" 11 397 1 "FUNCTION"
V L "num" 11 565 "sint32" `1708 
F G "mult_with10" 11 566 "sint32(sint32 num)" `1707 
V L "num" 11 770 "sint32" `1634 
V L "base" 11 770 "int16" `1635 
V L "s" 11 770 "*sint8" `1712 
F G "itoa" 11 771 "*sint8(sint32 num,int16 base,*sint8 s)" `1633 
V L "temp" 11 772 "int32" `1709 
V L "i" 11 773 "int8" `1710 
V L "sign" 11 773 "int8" `1711 
V L "cnt" 11 773 "int8" `1712 
V L "c" 11 774 "sint8" `1713 
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
C L "itoa" 11 397 1 "FUNCTION"
V L "s" 11 885 "*sint8" `1648 
V L "endptr" 11 885 "*sint8" `1716 
F G "strtof" 11 886 "float(*sint8 s,*sint8 endptr)" `1647 
V L "pow10" 11 887 "float" `1714 
V L "result" 11 888 "float" `1715 
V L "skip" 11 889 "int1" `1716 
V L "sign" 11 889 "int1" `1717 
V L "point" 11 889 "int1" `1718 
V L "c" 11 890 "sint8" `1719 
V L "ptr" 11 891 "int8" `1720 
V L "s" 11 1103 "*sint8" `1644 
V L "endptr" 11 1103 "*sint8" `1645 
V L "base" 11 1103 "sint16" `1725 
F G "strtoul" 11 1104 "int32(*sint8 s,*sint8 endptr,sint16 base)" `1643 
V L "sc" 11 1105 "*sint8" `1722 
V L "s1" 11 1105 "*sint8" `1723 
V L "sd" 11 1105 "*sint8" `1724 
V L "x" 11 1106 "int32" `1725 
V L "sign" 11 1107 "sint8" `1726 
V L "digits" 11 1108 "sint8[1]" `1727 
C L "strtoul" 11 397 1 "FUNCTION"
C L "strtoul" 11 397 1 "FUNCTION"
C L "strtoul" 11 397 1 "FUNCTION"
V L "s" 11 1165 "*sint8" `1640 
V L "endptr" 11 1165 "*sint8" `1641 
V L "base" 11 1165 "sint16" `1732 
F G "strtol" 11 1166 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `1639 
V L "sc" 11 1167 "*sint8" `1729 
V L "s1" 11 1167 "*sint8" `1730 
V L "sd" 11 1167 "*sint8" `1731 
V L "x" 11 1168 "sint32" `1732 
V L "sign" 11 1169 "sint8" `1733 
V L "digits" 11 1170 "sint8[1]" `1734 
C L "strtol" 11 397 1 "FUNCTION"
C L "strtol" 11 397 1 "FUNCTION"
C L "strtol" 11 397 1 "FUNCTION"
V L "string" 11 1228 "*sint8" `1737 
F G "system" 11 1229 "sint8(*sint8 string)" `1655 
V L "s" 11 1233 "*sint8" `1737 
V L "n" 11 1233 "int16" `1738 
F G "mblen" 11 1234 "sint8(*sint8 s,int16 n)" `1736 
V L "pwc" 11 1238 "*sint8" `1740 
V L "s" 11 1238 "*sint8" `1741 
V L "n" 11 1238 "int16" `1742 
F G "mbtowc" 11 1239 "sint8(*sint8 pwc,*sint8 s,int16 n)" `1739 
V L "s" 11 1244 "*sint8" `1744 
V L "wchar" 11 1244 "sint8" `1745 
F G "wctomb" 11 1245 "sint8(*sint8 s,sint8 wchar)" `1743 
V L "pwcs" 11 1250 "*sint8" `1747 
V L "s" 11 1250 "*sint8" `1748 
V L "n" 11 1250 "int16" `1749 
F G "mbstowcs" 11 1251 "int16(*sint8 pwcs,*sint8 s,int16 n)" `1746 
V L "s" 11 1256 "*sint8" `1751 
V L "pwcs" 11 1256 "*sint8" `1752 
V L "n" 11 1256 "int16" `1753 
F G "wcstombs" 11 1257 "int16(*sint8 s,*sint8 pwcs,int16 n)" `1750 
V G "_Randseed" 11 1266 "int32" `1754 
F G "rand" 11 1269 "int16()" `1652 
V L "seed" 11 1274 "int32" `1759 
F G "srand" 11 1275 "void(int32 seed)" `1653 
V L "p1" 11 1284 "*sint8" `1759 
V L "p2" 11 1284 "*sint8" `1760 
T G "*_Cmpfun" 11 1284 "sint8(*sint8 p1,*sint8 p2)" `1758 
V L "qdata" 11 1291 "*sint8" `1763 
V L "qitems" 11 1291 "int16" `1764 
V L "qsize" 11 1291 "int16" `1765 
V L "cmp" 11 1291 "_Cmpfun" `1766 
F G "qsort" 11 1291 "void(*sint8 qdata,int16 qitems,int16 qsize,_Cmpfun cmp)" `1762 
V L "m" 11 1292 "int16" `1767 
V L "j" 11 1292 "int16" `1768 
V L "i" 11 1292 "int16" `1769 
V L "l" 11 1292 "int16" `1770 
V L "done" 11 1293 "int1" `1771 
V L "t" 11 1294 "int8[16]" `1772 
V L "key" 11 1319 "*sint8" `1778 
V L "base" 11 1319 "*sint8" `1779 
V L "num" 11 1319 "int16" `1780 
V L "width" 11 1319 "int16" `1781 
V L "cmp" 11 1319 "_Cmpfun" `1782 
F G "bsearch" 11 1320 "*sint8(*sint8 key,*sint8 base,int16 num,int16 width,_Cmpfun cmp)" `1777 
V L "p" 11 1321 "*sint8" `1783 
V L "q" 11 1321 "*sint8" `1784 
V L "n" 11 1322 "int16" `1785 
V L "pivot" 11 1323 "int16" `1786 
V L "val" 11 1324 "sint16" `1787 
C L "bsearch" 11 397 1 "FUNCTION"
D G "__GENERIC_TYPE_DEFS_H_" 12 48 ""
D G "__EXTENSION" 12 54 ""
D G "__PACKED" 12 58 ""
E G "FALSE" 12 64 "0" `1789 
E G "TRUE" 12 64 "1" `1790 
T G "BOOL" 12 64 "_BOOL" `1791  "Undefined size *"
E G "CLEAR" 12 65 "0" `1793 
E G "SET" 12 65 "1" `1794 
T G "BIT" 12 65 "_BIT" `1795 
D G "PUBLIC" 12 67 "" "Function attributes"
D G "PROTECTED" 12 68 ""
D G "PRIVATE" 12 69 "static"
T G "INT" 12 72 "sint16" `1796 
T G "INT8" 12 73 "sint8" `1797 
T G "INT16" 12 74 "sint16" `1798 
T G "INT32" 12 75 "sint32" `1799  "MPLAB C Compiler for PIC18 does not support 64-bit integers *"
T G "UINT" 12 83 "int16" `1800 
T G "UINT8" 12 84 "int8" `1801 
T G "UINT16" 12 85 "int16" `1802  "24-bit type only available on C18 *"
T G "UINT32" 12 90 "int32" `1803  "other name for 32-bit integer *"
T G "UINT8_VAL" 12 110 "{UINT8 Val}" `1816 
T G "UINT8_BITS" 12 110 "{UINT8 Val}" `1817 
T G "UINT16_VAL" 12 140 "{UINT16 Val,UINT8[2] v}" `1843 
T G "UINT16_BITS" 12 140 "{UINT16 Val,UINT8[2] v}" `1844  "24-bit type only available on C18 *"
T G "UINT32_VAL" 12 241 "{UINT32 Val,UINT16[2] w,UINT8[4] v}" `1897  "MPLAB C Compiler for PIC18 does not support 64-bit integers *"
T G "VOID" 12 336 "void" `1898 
T G "CHAR8" 12 338 "sint8" `1899 
T G "UCHAR8" 12 339 "int8" `1900 
T G "BYTE" 12 344 "int8" `1901  "8-bit unsigned  *"
T G "WORD" 12 345 "int16" `1902  "16-bit unsigned *"
T G "DWORD" 12 346 "int32" `1903  "32-bit unsigned *"
T G "QWORD" 12 349 "?" `1904  "64-bit unsigned *"
T G "CHAR" 12 350 "sint8" `1905  "8-bit signed    *"
T G "SHORT" 12 351 "sint16" `1906  "16-bit signed   *"
T G "LONG" 12 352 "sint32" `1907  "32-bit signed   *"
T G "LONGLONG" 12 355 "?" `1908  "64-bit signed   *"
T G "BYTE_VAL" 12 370 "{BYTE Val}" `1921 
T G "BYTE_BITS" 12 370 "{BYTE Val}" `1922 
T G "WORD_VAL" 12 400 "{WORD Val,BYTE[2] v}" `1948 
T G "WORD_BITS" 12 400 "{WORD Val,BYTE[2] v}" `1949 
T G "DWORD_VAL" 12 459 "{DWORD Val,WORD[2] w,BYTE[4] v}" `2002  "MPLAB C Compiler for PIC18 does not support 64-bit integers *"
T G "QWORD_VAL" 12 547 "{QWORD Val,DWORD[2] d,WORD[4] w,BYTE[8] v}" `2084  "__GENERIC_TYPE_DEFS_H_ *"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
D G "__COMPILER_H" 13 56 ""
D G "COMPILER_MPLAB_C18" 13 61 ""
D G "_STDIO" 14 12 ""
D G "PTR_BASE" 13 123 "unsigned int16"
D G "ROM_PTR_BASE" 13 124 "unsigned int32"
D G "__attribute__" 13 162 "(a)"
D G "FAR" 13 164 "far"
D G "ROM" 13 168 "rom"
D G "__HARDWAREPROFILE_H__" 15 2 ""
D G "ENC_CS_IO" 15 4 "LATCbits.LATC1"
D G "ENC_CS_TRIS" 15 5 "TRISCbits.TRISC1"
D G "ENC_SCK_TRIS" 15 6 "TRISCbits.TRISC3"
D G "ENC_SDI_TRIS" 15 7 "TRISCbits.TRISC4"
D G "ENC_SDO_TRIS" 15 8 "TRISCbits.TRISC5"
D G "ENC_RST_IO" 15 9 "LATCbits.LATC0"
D G "ENC_RST_TRIS" 15 10 "TRISCbits.TRISC0"
D G "ENC_SSPBUF" 15 11 "SSPBUF"
D G "ENC_SPISTAT" 15 12 "SSPSTAT"
D G "ENC_SPISTATbits" 15 13 "SSPSTATbits"
D G "ENC_SPICON1" 15 14 "SSPCON1"
D G "ENC_SPICON1bits" 15 15 "SSPCON1bits"
D G "ENC_SPICON2" 15 16 "SSPCON2"
D G "ENC_SPICON2bits" 15 17 "SSPCON2bits"
D G "ENC_SPI_IF" 15 18 "PIR1bits.SSPIF"
D G "NETWORK_INTERFACES" 7 64 " (1u)	"
C G "" 7 66 1 "*"
C G "" 7 66 1 "*"
D G "TCP_ETH_RAM" 7 72 "0u"
D G "TCP_ETH_RAM_BASE_ADDRESS" 7 74 " (BASE_TCB_ADDR)"
D G "TCP_PIC_RAM" 7 76 "1u"
D G "TCP_PIC_RAM_BASE_ADDRESS" 7 78 " ((PTR_BASE)&TCPBufferInPIC[0])"
D G "TCP_SPI_RAM" 7 80 "2u"
C G "" 7 82 1 "*"
D G "__TCPIPCONFIG_H" 16 2 ""
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
C G "" 13 1 1 "*"
D G "STACK_USE_ICMP_SERVER" 16 7 "1"
D G "STACK_USE_TCP" 16 8 "1"
D G "STACK_USE_DHCP_CLIENT" 16 9 "1"
D G "STACK_CCS_SMTP_TX_SIZE" 16 11 "0"
D G "STACK_CCS_SMTP_RX_SIZE" 16 12 "0"
D G "STACK_USE_CCS_HTTP2_SERVER" 16 14 ""
D G "STACK_CCS_HTTP2_SERVER_TX_SIZE" 16 15 "1500"
D G "STACK_CCS_HTTP2_SERVER_RX_SIZE" 16 16 "500"
D G "HTTP_NUM_SOCKETS" 16 17 "1"
D G "HTTP_PORT" 16 18 " (80u)"
D G "HTTP_USE_DOUBLE_ESCAPE" 16 19 "1"
D G "STACK_MY_TELNET_SERVER_TX_SIZE" 16 22 "0"
D G "STACK_MY_TELNET_SERVER_RX_SIZE" 16 23 "0"
D G "MY_DEFAULT_HOST_NAME" 16 25 ""CCS_EXAMPLES""
D G "MY_DEFAULT_MAC_BYTE1" 16 27 " (0x0)"
D G "MY_DEFAULT_MAC_BYTE2" 16 28 " (0x20)"
D G "MY_DEFAULT_MAC_BYTE3" 16 29 " (0x30)"
D G "MY_DEFAULT_MAC_BYTE4" 16 30 " (0x40)"
D G "MY_DEFAULT_MAC_BYTE5" 16 31 " (0x50)"
D G "MY_DEFAULT_MAC_BYTE6" 16 32 " (0x60)"
D G "MY_DEFAULT_IP_ADDR_BYTE1" 16 34 " (192ul)"
D G "MY_DEFAULT_IP_ADDR_BYTE2" 16 35 " (168ul)"
D G "MY_DEFAULT_IP_ADDR_BYTE3" 16 36 " (1ul)"
D G "MY_DEFAULT_IP_ADDR_BYTE4" 16 37 " (118ul)"
D G "MY_DEFAULT_GATE_BYTE1" 16 39 " (192ul)"
D G "MY_DEFAULT_GATE_BYTE2" 16 40 " (168ul)"
D G "MY_DEFAULT_GATE_BYTE3" 16 41 " (1ul)"
D G "MY_DEFAULT_GATE_BYTE4" 16 42 " (1ul)"
D G "MY_DEFAULT_MASK_BYTE1" 16 44 " (255ul)"
D G "MY_DEFAULT_MASK_BYTE2" 16 45 " (255ul)"
D G "MY_DEFAULT_MASK_BYTE3" 16 46 " (255ul)"
D G "MY_DEFAULT_MASK_BYTE4" 16 47 " (0ul)"
D G "TCP_CONFIGURATION" 16 49 "1"
D G "TCP_ETH_RAM_SIZE" 16 51 " (STACK_CCS_SMTP_TX_SIZE +                            STACK_CCS_SMTP_RX_SIZE +                            STACK_CCS_HTTP2_SERVER_TX_SIZE +                            STACK_CCS_HTTP2_SERVER_RX_SIZE +                            STACK_MY_TELNET_SERVER_TX_SIZE +                            STACK_MY_TELNET_SERVER_RX_SIZE +                            100*TCP_CONFIGURATION)"
D G "TCP_PURPOSE_GENERIC_TCP_CLIENT" 16 60 "0"
D G "TCP_PURPOSE_GENERIC_TCP_SERVER" 16 61 "1"
D G "TCP_PURPOSE_TELNET" 16 62 "2"
D G "TCP_PURPOSE_FTP_COMMAND" 16 63 "3"
D G "TCP_PURPOSE_FTP_DATA" 16 64 "4"
D G "TCP_PURPOSE_TCP_PERFORMANCE_TX" 16 65 "5"
D G "TCP_PURPOSE_TCP_PERFORMANCE_RX" 16 66 "6"
D G "TCP_PURPOSE_UART_2_TCP_BRIDGE" 16 67 "7"
D G "TCP_PURPOSE_HTTP_SERVER" 16 68 "8"
D G "TCP_PURPOSE_DEFAULT" 16 69 "9"
D G "TCP_PURPOSE_BERKELEY_SERVER" 16 70 "10"
D G "TCP_PURPOSE_BERKELEY_CLIENT" 16 71 "11"
D G "TCP_PURPOSE_CCS_SMTP" 16 72 "0x40"
T G "TCPSocketInitializer_t" 16 80 "{BYTE vSocketPurpose,BYTE vMemoryMedium,WORD wTXBufferSize,WORD wRXBufferSize}" `2091 
V G "TCPSocketInitializer" 16 83 "TCPSocketInitializer_t[1]" `2092 
D G "MAX_HTTP_CONNECTIONS" 16 105 "1"
D G "MAX_UDP_SOCKETS" 16 108 "7"
C G "" 7 88 1 "*"
C G "" 7 88 1 "*"
D G "STACK_USE_UDP" 7 239 ""
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 2 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
C G "" 17 1 1 "*"
D G "__STACK_TSK_H" 17 62 ""
T G "MAC_ADDR" 17 82 "{BYTE[6] v}" `2095  "Definition to represent an IP address"
D G "IP_ADDR" 17 85 "DWORD_VAL"
T G "NODE_INFO" 17 92 "{DWORD_VAL IPAddr,MAC_ADDR MACAddr}" `2099  "Application-dependent structure used to contain address information"
T G "APP_CONFIG" 17 141 "{DWORD_VAL MyIPAddr,DWORD_VAL MyMask,DWORD_VAL MyGateway,DWORD_VAL PrimaryDNSServer,DWORD_VAL SecondaryDNSServer,DWORD_VAL DefaultIPAddr,DWORD_VAL DefaultMask,BYTE[16] NetBIOSName}" `2115 
V G "AppConfig" 17 144 "APP_CONFIG" `2116 
f G "StackInit" 17 148 "void()" `2117 
f G "StackTask" 17 149 "void()" `2118 
f G "StackApplications" 17 150 "void()" `2119  "Header file for Helpers.c"
D G "__HELPERS_H" 18 52 ""
C L "StackApplications" 18 1 1 "FUNCTION"
D G "DebugPrint" 18 78 "(a)"
V L "dwSeed" 18 81 "DWORD" `2121 
f G "LFSRSeedRand" 18 81 "DWORD(DWORD dwSeed)" `2120 
f G "LFSRRand" 18 82 "WORD()" `2122 
f G "GenerateRandomDWORD" 18 83 "DWORD()" `2123 
V L "Value" 18 84 "WORD" `2125 
V L "Buffer" 18 84 "*BYTE" `2126 
f G "uitoa" 18 84 "void(WORD Value,*BYTE Buffer)" `2124 
V L "URL" 18 85 "*BYTE" `2128 
f G "UnencodeURL" 18 85 "void(*BYTE URL)" `2127 
V L "cSourceData" 18 86 "*BYTE" `2130 
V L "wSourceLen" 18 86 "WORD" `2131 
V L "cDestData" 18 86 "*BYTE" `2132 
V L "wDestLen" 18 86 "WORD" `2133 
f G "Base64Decode" 18 86 "WORD(*BYTE cSourceData,WORD wSourceLen,*BYTE cDestData,WORD wDestLen)" `2129 
V L "cSourceData" 18 87 "*BYTE" `2135 
V L "wSourceLen" 18 87 "WORD" `2136 
V L "cDestData" 18 87 "*BYTE" `2137 
V L "wDestLen" 18 87 "WORD" `2138 
f G "Base64Encode" 18 87 "WORD(*BYTE cSourceData,WORD wSourceLen,*BYTE cDestData,WORD wDestLen)" `2134 
V L "str" 18 88 "*BYTE" `2140 
V L "IPAddress" 18 88 "*DWORD_VAL" `2141 
f G "StringToIPAddress" 18 88 "int8(*BYTE str,*DWORD_VAL IPAddress)" `2139 
V L "Dest" 18 89 "*BYTE" `2143 
V L "BufferLen" 18 89 "BYTE" `2144 
f G "ReadStringUART" 18 89 "BYTE(*BYTE Dest,BYTE BufferLen)" `2142 
V L "AsciiChars" 18 90 "WORD_VAL" `2146 
f G "hexatob" 18 90 "BYTE(WORD_VAL AsciiChars)" `2145 
V L "b" 18 91 "BYTE" `2148 
f G "btohexa_high" 18 91 "BYTE(BYTE b)" `2147 
V L "b" 18 92 "BYTE" `2150 
f G "btohexa_low" 18 92 "BYTE(BYTE b)" `2149 
V L "a" 18 93 "*BYTE" `2152 
V L "b" 18 93 "*" `2153 
f G "stricmppgm2ram" 18 93 "sint8(*BYTE a,* b)" `2151 
V L "searchString" 18 94 "*sint8" `2156 
V L "count" 18 94 "int16" `2157 
V L "c" 18 94 "sint8" `2158 
f G "strnchr" 18 94 "*sint8(*sint8 searchString,int16 count,sint8 c)" `2155 
V L "destStr" 18 95 "*sint8" `2160 
V L "destSize" 18 95 "int16" `2161 
V L "nStrings" 18 95 "sint16" `2162 
f G "strncpy_m" 18 95 "int16(*sint8 destStr,int16 destSize,sint16 nStrings,*int8 _VA_LIST)" `2159 
V L "str" 18 98 "*" `2165 
V L "IPAddress" 18 98 "*DWORD_VAL" `2166 
f G "ROMStringToIPAddress" 18 98 "int8(* str,*DWORD_VAL IPAddress)" `2164 
V L "v" 18 105 "WORD" `2168 
f G "swaps" 18 105 "WORD(WORD v)" `2167 
V L "v" 18 110 "DWORD" `2170 
f G "swapl" 18 110 "DWORD(DWORD v)" `2169 
V L "buffer" 18 113 "*BYTE" `2172 
V L "len" 18 113 "WORD" `2173 
f G "CalcIPChecksum" 18 113 "WORD(*BYTE buffer,WORD len)" `2171 
V L "val" 18 117 "DWORD" `2175 
V L "bits" 18 117 "BYTE" `2176 
f G "leftRotateDWORD" 18 117 "DWORD(DWORD val,BYTE bits)" `2174 
V L "Name" 18 123 "*" `2178 
f G "FormatNetBIOSName" 18 123 "void(* Name)" `2177  "Protocols understood by the ExtractURLFields() function.  IMPORTANT: If you"
C L "FormatNetBIOSName" 18 127 2 "FUNCTION"
E G "PROTOCOL_HTTP" 18 132 "0" `2181 
E G "PROTOCOL_HTTPS" 18 133 "1" `2182 
E G "PROTOCOL_MMS" 18 134 "2" `2183 
E G "PROTOCOL_RTSP" 18 135 "3" `2184 
T G "PROTOCOLS" 18 135 "" `2185 
V L "vURL" 18 137 "*BYTE" `2187 
V L "protocol" 18 137 "*PROTOCOLS" `2188 
V L "vUsername" 18 137 "*BYTE" `2189 
V L "wUsernameLen" 18 137 "*WORD" `2190 
V L "vPassword" 18 137 "*BYTE" `2191 
V L "wPasswordLen" 18 137 "*WORD" `2192 
V L "vHostname" 18 137 "*BYTE" `2193 
V L "wHostnameLen" 18 137 "*WORD" `2194 
V L "wPort" 18 137 "*WORD" `2195 
V L "vFilePath" 18 137 "*BYTE" `2196 
V L "wFilePathLen" 18 137 "*WORD" `2197 
f G "ExtractURLFields" 18 137 "BYTE(*BYTE vURL,*PROTOCOLS protocol,*BYTE vUsername,*WORD wUsernameLen,*BYTE vPassword,*WORD wPasswordLen,*BYTE vHostname,*WORD wHostnameLen,*WORD wPort,*BYTE vFilePath,*WORD wFilePathLen)" `2186 
V L "vExpression" 18 138 "*BYTE" `2199 
V L "vFind" 18 138 "*" `2200 
V L "vReplacement" 18 138 "*" `2201 
V L "wMaxLen" 18 138 "WORD" `2202 
V L "bSearchCaseInsensitive" 18 138 "int8" `2203 
f G "Replace" 18 138 "SHORT(*BYTE vExpression,* vFind,* vReplacement,WORD wMaxLen,int8 bSearchCaseInsensitive)" `2198  "*                  General Delay rouines"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 19 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
C L "Replace" 20 1 1 "*"
D G "__TICK_H" 20 54 ""
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 7 1 1 "*"
C L "Replace" 20 58 5 "FUNCTION"
T G "TICK" 20 63 "DWORD" `2204  "This value is used by TCP and other modules to implement timeout actions."
D G "TICKS_PER_SECOND" 20 69 " ((GetPeripheralClock()+128ull)/256ull)	" "Internal core clock drives timer with 1:256 prescaler"
D G "TICK_SECOND" 20 73 " ((QWORD)TICKS_PER_SECOND)"
D G "TICK_MINUTE" 20 75 " ((QWORD)TICKS_PER_SECOND*60ull)"
D G "TICK_HOUR" 20 77 " ((QWORD)TICKS_PER_SECOND*3600ull)"
f G "TickInit" 20 80 "void()" `2205 
f G "TickGet" 20 81 "DWORD()" `2206 
f G "TickGetDiv256" 20 82 "DWORD()" `2207 
f G "TickGetDiv64K" 20 83 "DWORD()" `2208 
V L "dwTickValue" 20 84 "DWORD" `2210 
f G "TickConvertToMilliseconds" 20 84 "DWORD(DWORD dwTickValue)" `2209 
f G "TickUpdate" 20 85 "void()" `2211  "*                  MAC Module Defs for Microchip Stack"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
C L "TickUpdate" 21 1 1 "*"
D G "__MAC_H" 21 57 ""
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
C L "TickUpdate" 22 1 1 "*"
D G "__ENC28J60_H" 22 61 ""
C L "TickUpdate" 12 1 34 "FUNCTION"
T G "TXSTATUS" 22 88 "{BYTE[7] v}" `2236 
T G "RXSTATUS" 22 111 "{BYTE[4] v}" `2258  "* Register locations"
D G "ERDPTL" 22 117 "0x00"
D G "ERDPTH" 22 118 "0x01"
D G "EWRPTL" 22 119 "0x02"
D G "EWRPTH" 22 120 "0x03"
D G "ETXSTL" 22 121 "0x04"
D G "ETXSTH" 22 122 "0x05"
D G "ETXNDL" 22 123 "0x06"
D G "ETXNDH" 22 124 "0x07"
D G "ERXSTL" 22 125 "0x08"
D G "ERXSTH" 22 126 "0x09"
D G "ERXNDL" 22 127 "0x0A"
D G "ERXNDH" 22 128 "0x0B"
D G "ERXRDPTL" 22 129 "0x0C"
D G "ERXRDPTH" 22 130 "0x0D"
D G "ERXWRPTL" 22 131 "0x0E"
D G "ERXWRPTH" 22 132 "0x0F"
D G "EDMASTL" 22 133 "0x10"
D G "EDMASTH" 22 134 "0x11"
D G "EDMANDL" 22 135 "0x12"
D G "EDMANDH" 22 136 "0x13"
D G "EDMADSTL" 22 137 "0x14"
D G "EDMADSTH" 22 138 "0x15"
D G "EDMACSL" 22 139 "0x16"
D G "EDMACSH" 22 140 "0x17"
D G "EIE" 22 144 "0x1B"
D G "EIR" 22 145 "0x1C"
D G "ESTAT" 22 146 "0x1D"
D G "ECON2" 22 147 "0x1E"
D G "ECON1" 22 148 "0x1F"
D G "EHT0" 22 151 "0x100"
D G "EHT1" 22 152 "0x101"
D G "EHT2" 22 153 "0x102"
D G "EHT3" 22 154 "0x103"
D G "EHT4" 22 155 "0x104"
D G "EHT5" 22 156 "0x105"
D G "EHT6" 22 157 "0x106"
D G "EHT7" 22 158 "0x107"
D G "EPMM0" 22 159 "0x108"
D G "EPMM1" 22 160 "0x109"
D G "EPMM2" 22 161 "0x10A"
D G "EPMM3" 22 162 "0x10B"
D G "EPMM4" 22 163 "0x10C"
D G "EPMM5" 22 164 "0x10D"
D G "EPMM6" 22 165 "0x10E"
D G "EPMM7" 22 166 "0x10F"
D G "EPMCSL" 22 167 "0x110"
D G "EPMCSH" 22 168 "0x111"
D G "EPMOL" 22 171 "0x114"
D G "EPMOH" 22 172 "0x115"
D G "ERXFCON" 22 175 "0x118"
D G "EPKTCNT" 22 176 "0x119"
D G "MACON1" 22 185 "0x200"
D G "MACON3" 22 187 "0x202"
D G "MACON4" 22 188 "0x203"
D G "MABBIPG" 22 189 "0x204"
D G "MAIPGL" 22 191 "0x206"
D G "MAIPGH" 22 192 "0x207"
D G "MACLCON1" 22 193 "0x208"
D G "MACLCON2" 22 194 "0x209"
D G "MAMXFLL" 22 195 "0x20A"
D G "MAMXFLH" 22 196 "0x20B"
D G "MICMD" 22 203 "0x212"
D G "MIREGADR" 22 205 "0x214"
D G "MIWRL" 22 207 "0x216"
D G "MIWRH" 22 208 "0x217"
D G "MIRDL" 22 209 "0x218"
D G "MIRDH" 22 210 "0x219"
D G "MAADR5" 22 219 "0x300"
D G "MAADR6" 22 220 "0x301"
D G "MAADR3" 22 221 "0x302"
D G "MAADR4" 22 222 "0x303"
D G "MAADR1" 22 223 "0x304"
D G "MAADR2" 22 224 "0x305"
D G "EBSTSD" 22 225 "0x306"
D G "EBSTCON" 22 226 "0x307"
D G "EBSTCSL" 22 227 "0x308"
D G "EBSTCSH" 22 228 "0x309"
D G "MISTAT" 22 229 "0x30A"
D G "EREVID" 22 237 "0x312"
D G "ECOCON" 22 240 "0x315"
D G "EFLOCON" 22 242 "0x317"
D G "EPAUSL" 22 243 "0x318"
D G "EPAUSH" 22 244 "0x319"
C L "TickUpdate" 22 116 7 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
T G "REG" 22 426 "{BYTE Val}" `2400  "* PH Register Locations"
D G "PHCON1" 22 432 "0x00"
D G "PHSTAT1" 22 433 "0x01"
D G "PHID1" 22 434 "0x02"
D G "PHID2" 22 435 "0x03"
D G "PHCON2" 22 436 "0x10"
D G "PHSTAT2" 22 437 "0x11"
D G "PHIE" 22 438 "0x12"
D G "PHIR" 22 439 "0x13"
D G "PHLCON" 22 440 "0x14"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
C L "TickUpdate" 22 116 1 "FUNCTION"
T G "PHYREG" 22 566 "{WORD Val,WORD_VAL VAL}" `2508  "* Individual Register Bits"
D G "EIE_INTIE" 22 575 " (1<<7)"
D G "EIE_PKTIE" 22 576 " (1<<6)"
D G "EIE_DMAIE" 22 577 " (1<<5)"
D G "EIE_LINKIE" 22 578 " (1<<4)"
D G "EIE_TXIE" 22 579 " (1<<3)"
D G "EIE_TXERIE" 22 580 " (1<<1)"
D G "EIE_RXERIE" 22 581 " (1)"
D G "EIR_PKTIF" 22 584 " (1<<6)"
D G "EIR_DMAIF" 22 585 " (1<<5)"
D G "EIR_LINKIF" 22 586 " (1<<4)"
D G "EIR_TXIF" 22 587 " (1<<3)"
D G "EIR_TXERIF" 22 588 " (1<<1)"
D G "EIR_RXERIF" 22 589 " (1)"
D G "ESTAT_INT" 22 592 " (1<<7)"
D G "ESTAT_BUFER" 22 593 " (1<<6)"
D G "ESTAT_LATECOL" 22 594 " (1<<4)"
D G "ESTAT_RXBUSY" 22 595 " (1<<2)"
D G "ESTAT_TXABRT" 22 596 " (1<<1)"
D G "ESTAT_CLKRDY" 22 597 " (1)"
D G "ECON2_AUTOINC" 22 600 " (1<<7)"
D G "ECON2_PKTDEC" 22 601 " (1<<6)"
D G "ECON2_PWRSV" 22 602 " (1<<5)"
D G "ECON2_VRPS" 22 603 " (1<<3)"
D G "ECON1_TXRST" 22 606 " (1<<7)"
D G "ECON1_RXRST" 22 607 " (1<<6)"
D G "ECON1_DMAST" 22 608 " (1<<5)"
D G "ECON1_CSUMEN" 22 609 " (1<<4)"
D G "ECON1_TXRTS" 22 610 " (1<<3)"
D G "ECON1_RXEN" 22 611 " (1<<2)"
D G "ECON1_BSEL1" 22 612 " (1<<1)"
D G "ECON1_BSEL0" 22 613 " (1)"
D G "ERXFCON_UCEN" 22 616 " (1<<7)"
D G "ERXFCON_ANDOR" 22 617 " (1<<6)"
D G "ERXFCON_CRCEN" 22 618 " (1<<5)"
D G "ERXFCON_PMEN" 22 619 " (1<<4)"
D G "ERXFCON_MPEN" 22 620 " (1<<3)"
D G "ERXFCON_HTEN" 22 621 " (1<<2)"
D G "ERXFCON_MCEN" 22 622 " (1<<1)"
D G "ERXFCON_BCEN" 22 623 " (1)"
D G "MACON1_TXPAUS" 22 626 " (1<<3)"
D G "MACON1_RXPAUS" 22 627 " (1<<2)"
D G "MACON1_PASSALL" 22 628 " (1<<1)"
D G "MACON1_MARXEN" 22 629 " (1)"
D G "MACON3_PADCFG2" 22 632 " (1<<7)"
D G "MACON3_PADCFG1" 22 633 " (1<<6)"
D G "MACON3_PADCFG0" 22 634 " (1<<5)"
D G "MACON3_TXCRCEN" 22 635 " (1<<4)"
D G "MACON3_PHDREN" 22 636 " (1<<3)"
D G "MACON3_HFRMEN" 22 637 " (1<<2)"
D G "MACON3_FRMLNEN" 22 638 " (1<<1)"
D G "MACON3_FULDPX" 22 639 " (1)"
D G "MACON4_DEFER" 22 642 " (1<<6)"
D G "MACON4_BPEN" 22 643 " (1<<5)"
D G "MACON4_NOBKOFF" 22 644 " (1<<4)"
D G "MICMD_MIISCAN" 22 647 " (1<<1)"
D G "MICMD_MIIRD" 22 648 " (1)"
D G "EBSTCON_PSV2" 22 651 " (1<<7)"
D G "EBSTCON_PSV1" 22 652 " (1<<6)"
D G "EBSTCON_PSV0" 22 653 " (1<<5)"
D G "EBSTCON_PSEL" 22 654 " (1<<4)"
D G "EBSTCON_TMSEL1" 22 655 " (1<<3)"
D G "EBSTCON_TMSEL0" 22 656 " (1<<2)"
D G "EBSTCON_TME" 22 657 " (1<<1)"
D G "EBSTCON_BISTST" 22 658 " (1)"
D G "MISTAT_NVALID" 22 661 " (1<<2)"
D G "MISTAT_SCAN" 22 662 " (1<<1)"
D G "MISTAT_BUSY" 22 663 " (1)"
D G "ECOCON_COCON2" 22 666 " (1<<2)"
D G "ECOCON_COCON1" 22 667 " (1<<1)"
D G "ECOCON_COCON0" 22 668 " (1)"
D G "EFLOCON_FULDPXS" 22 671 " (1<<2)"
D G "EFLOCON_FCEN1" 22 672 " (1<<1)"
D G "EFLOCON_FCEN0" 22 673 " (1)"
D G "PHCON1_PRST" 22 680 " (1ul<<15)"
D G "PHCON1_PLOOPBK" 22 681 " (1ul<<14)"
D G "PHCON1_PPWRSV" 22 682 " (1ul<<11)"
D G "PHCON1_PDPXMD" 22 683 " (1ul<<8)"
D G "PHSTAT1_PFDPX" 22 686 " (1ul<<12)"
D G "PHSTAT1_PHDPX" 22 687 " (1ul<<11)"
D G "PHSTAT1_LLSTAT" 22 688 " (1ul<<2)"
D G "PHSTAT1_JBSTAT" 22 689 " (1ul<<1)"
D G "PHID2_PID24" 22 692 " (1ul<<15)"
D G "PHID2_PID23" 22 693 " (1ul<<14)"
D G "PHID2_PID22" 22 694 " (1ul<<13)"
D G "PHID2_PID21" 22 695 " (1ul<<12)"
D G "PHID2_PID20" 22 696 " (1ul<<11)"
D G "PHID2_PID19" 22 697 " (1ul<<10)"
D G "PHID2_PPN5" 22 698 " (1ul<<9)"
D G "PHID2_PPN4" 22 699 " (1ul<<8)"
D G "PHID2_PPN3" 22 700 " (1ul<<7)"
D G "PHID2_PPN2" 22 701 " (1ul<<6)"
D G "PHID2_PPN1" 22 702 " (1ul<<5)"
D G "PHID2_PPN0" 22 703 " (1ul<<4)"
D G "PHID2_PREV3" 22 704 " (1ul<<3)"
D G "PHID2_PREV2" 22 705 " (1ul<<2)"
D G "PHID2_PREV1" 22 706 " (1ul<<1)"
D G "PHID2_PREV0" 22 707 " (1ul)"
D G "PHCON2_FRCLNK" 22 710 " (1ul<<14)"
D G "PHCON2_TXDIS" 22 711 " (1ul<<13)"
D G "PHCON2_JABBER" 22 712 " (1ul<<10)"
D G "PHCON2_HDLDIS" 22 713 " (1ul<<8)"
D G "PHSTAT2_TXSTAT" 22 716 " (1ul<<13)"
D G "PHSTAT2_RXSTAT" 22 717 " (1ul<<12)"
D G "PHSTAT2_COLSTAT" 22 718 " (1ul<<11)"
D G "PHSTAT2_LSTAT" 22 719 " (1ul<<10)"
D G "PHSTAT2_DPXSTAT" 22 720 " (1ul<<9)"
D G "PHSTAT2_PLRITY" 22 721 " (1ul<<5)"
D G "PHIE_PLNKIE" 22 724 " (1ul<<4)"
D G "PHIE_PGEIE" 22 725 " (1ul<<1)"
D G "PHIR_PLNKIF" 22 728 " (1ul<<4)"
D G "PHIR_PGIF" 22 729 " (1ul<<2)"
D G "PHLCON_LACFG3" 22 732 " (1ul<<11)"
D G "PHLCON_LACFG2" 22 733 " (1ul<<10)"
D G "PHLCON_LACFG1" 22 734 " (1ul<<9)"
D G "PHLCON_LACFG0" 22 735 " (1ul<<8)"
D G "PHLCON_LBCFG3" 22 736 " (1ul<<7)"
D G "PHLCON_LBCFG2" 22 737 " (1ul<<6)"
D G "PHLCON_LBCFG1" 22 738 " (1ul<<5)"
D G "PHLCON_LBCFG0" 22 739 " (1ul<<4)"
D G "PHLCON_LFRQ1" 22 740 " (1ul<<3)"
D G "PHLCON_LFRQ0" 22 741 " (1ul<<2)"
D G "PHLCON_STRCH" 22 742 " (1ul<<1)"
D G "MAC_TX_BUFFER_SIZE" 21 94 " (1500ul)"
C L "TickUpdate" 21 96 2 "FUNCTION"
T G "ETHER_HEADER" 21 108 "{MAC_ADDR DestMACAddr,MAC_ADDR SourceMACAddr,WORD_VAL Type}" `2513 
D G "MAC_IP" 21 111 " (0x00u)"
D G "MAC_ARP" 21 112 " (0x06u)"
D G "MAC_UNKNOWN" 21 113 " (0xFFu)"
D G "RESERVED_HTTP_MEMORY" 21 117 "0ul"
D G "RESERVED_SSL_MEMORY" 21 121 "0ul"
D G "RAMSIZE" 21 159 " (8*1024ul)"
D G "TXSTART" 21 160 " (RAMSIZE - (1ul+1518ul+7ul) - TCP_ETH_RAM_SIZE - RESERVED_HTTP_MEMORY - RESERVED_SSL_MEMORY)"
D G "RXSTART" 21 161 " (0ul)" "Should be an even memory address; must be 0 for errata"
D G "RXSTOP" 21 162 " ((TXSTART-2ul) | 0x0001ul)" "Odd for errata workaround"
D G "RXSIZE" 21 163 " (RXSTOP-RXSTART+1ul)"
D G "BASE_TX_ADDR" 21 164 " (TXSTART + 1ul)"
D G "BASE_TCB_ADDR" 21 165 " (BASE_TX_ADDR + (1514ul+7ul))"
D G "BASE_HTTPB_ADDR" 21 166 " (BASE_TCB_ADDR + TCP_ETH_RAM_SIZE)"
D G "BASE_SSLB_ADDR" 21 167 " (BASE_HTTPB_ADDR + RESERVED_HTTP_MEMORY)"
V L "offset" 21 174 "WORD" `2515 
V L "len" 21 174 "WORD" `2516 
f G "MACCalcRxChecksum" 21 174 "WORD(WORD offset,WORD len)" `2514 
V L "len" 21 175 "WORD" `2518 
f G "CalcIPBufferChecksum" 21 175 "WORD(WORD len)" `2517 
f G "MACPowerDown" 21 177 "void()" `2519 
f G "MACEDPowerDown" 21 178 "void()" `2520 
f G "MACPowerUp" 21 179 "void()" `2521 
V L "Register" 21 183 "BYTE" `2523 
V L "Data" 21 183 "WORD" `2524 
f G "WritePHYReg" 21 183 "void(BYTE Register,WORD Data)" `2522 
V L "Register" 21 184 "BYTE" `2526 
f G "ReadPHYReg" 21 184 "PHYREG(BYTE Register)" `2525 
V L "DestMACAddr" 21 186 "MAC_ADDR" `2528 
f G "SetRXHashTableEntry" 21 186 "void(MAC_ADDR DestMACAddr)" `2527  "ENC28J60 specific"
V L "NewConfig" 21 189 "BYTE" `2530 
f G "SetCLKOUT" 21 189 "void(BYTE NewConfig)" `2529 
f G "GetCLKOUT" 21 190 "BYTE()" `2531  "* Macro:           void SetLEDConfig(WORD NewConfig)"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
C L "GetCLKOUT" 21 192 1 "*"
D G "SetLEDConfig" 21 240 "(NewConfig)      WritePHYReg(PHLCON, NewConfig)"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
C L "GetCLKOUT" 21 243 1 "*"
D G "GetLEDConfig" 21 289 "()      ReadPHYReg(PHLCON).Val"
f G "MACInit" 21 292 "void()" `2532 
f G "MACProcess" 21 293 "void()" `2533 
f G "MACIsLinked" 21 294 "int8()" `2534 
V L "remote" 21 296 "*MAC_ADDR" `2536 
V L "type" 21 296 "*BYTE" `2537 
f G "MACGetHeader" 21 296 "int8(*MAC_ADDR remote,*BYTE type)" `2535 
V L "offset" 21 297 "WORD" `2539 
f G "MACSetReadPtrInRx" 21 297 "void(WORD offset)" `2538 
V L "address" 21 298 "int16" `2541 
f G "MACSetWritePtr" 21 298 "int16(int16 address)" `2540 
V L "address" 21 299 "int16" `2543 
f G "MACSetReadPtr" 21 299 "int16(int16 address)" `2542 
f G "MACGet" 21 300 "BYTE()" `2544 
V L "val" 21 301 "*BYTE" `2546 
V L "len" 21 301 "WORD" `2547 
f G "MACGetArray" 21 301 "WORD(*BYTE val,WORD len)" `2545 
f G "MACDiscardRx" 21 302 "void()" `2548 
f G "MACGetFreeRxSize" 21 303 "WORD()" `2549 
V L "destAddr" 21 304 "int16" `2551 
V L "sourceAddr" 21 304 "int16" `2552 
V L "len" 21 304 "WORD" `2553 
f G "MACMemCopyAsync" 21 304 "void(int16 destAddr,int16 sourceAddr,WORD len)" `2550 
f G "MACIsMemCopyDone" 21 305 "int8()" `2554 
V L "remote" 21 307 "*MAC_ADDR" `2556 
V L "type" 21 307 "BYTE" `2557 
V L "dataLen" 21 307 "WORD" `2558 
f G "MACPutHeader" 21 307 "void(*MAC_ADDR remote,BYTE type,WORD dataLen)" `2555 
f G "MACIsTxReady" 21 308 "int8()" `2559 
V L "val" 21 309 "BYTE" `2561 
f G "MACPut" 21 309 "void(BYTE val)" `2560 
V L "val" 21 310 "*BYTE" `2563 
V L "len" 21 310 "WORD" `2564 
f G "MACPutArray" 21 310 "void(*BYTE val,WORD len)" `2562 
f G "MACFlush" 21 311 "void()" `2565  "ROM function variants for PIC18"
V L "val" 21 316 "*" `2567 
V L "len" 21 316 "WORD" `2568 
f G "MACPutROMArray" 21 316 "void(* val,WORD len)" `2566  "PIC32MX with embedded ETHC functions"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
C L "MACPutROMArray" 23 1 1 "*"
D G "__IP_H" 23 55 ""
D G "IP_PROT_ICMP" 23 58 " (1u)"
D G "IP_PROT_TCP" 23 59 " (6u)"
D G "IP_PROT_UDP" 23 60 " (17u)"
C L "MACPutROMArray" 23 1 1 "FUNCTION"
T G "IP_HEADER" 23 76 "{BYTE VersionIHL,BYTE TypeOfService,WORD TotalLength,WORD Identification,WORD FragmentInfo,BYTE TimeToLive,BYTE Protocol,WORD HeaderChecksum,DWORD_VAL SourceAddress,DWORD_VAL DestAddress}" `2580  "IP Pseudo header as defined by RFC 793 (needed for TCP and UDP"
C L "MACPutROMArray" 23 1 1 "FUNCTION"
T G "PSEUDO_HEADER" 23 87 "{DWORD_VAL SourceAddress,DWORD_VAL DestAddress,BYTE Zero,BYTE Protocol,WORD Length}" `2587 
D G "SwapPseudoHeader" 23 89 "(h)  (h.Length = swaps(h.Length))"
C L "MACPutROMArray" 23 92 1 "*"
C L "MACPutROMArray" 23 92 1 "*"
C L "MACPutROMArray" 23 92 1 "*"
C L "MACPutROMArray" 23 92 1 "*"
C L "MACPutROMArray" 23 92 1 "*"
C L "MACPutROMArray" 23 92 1 "*"
D G "IPIsTxReady" 23 107 "()       MACIsTxReady()"
C L "MACPutROMArray" 23 110 1 "*"
C L "MACPutROMArray" 23 110 1 "*"
C L "MACPutROMArray" 23 110 1 "*"
C L "MACPutROMArray" 23 110 1 "*"
C L "MACPutROMArray" 23 110 1 "*"
C L "MACPutROMArray" 23 110 1 "*"
C L "MACPutROMArray" 23 110 1 "*"
D G "IPSetTxBuffer" 23 126 "(b) MACSetWritePtr(b + BASE_TX_ADDR + sizeof(ETHER_HEADER) + sizeof(IP_HEADER))"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
C L "MACPutROMArray" 23 130 1 "*"
V L "remote" 23 154 "*NODE_INFO" `2589 
V L "protocol" 23 155 "BYTE" `2590 
V L "len" 23 156 "WORD" `2591 
f G "IPPutHeader" 23 156 "WORD(*NODE_INFO remote,BYTE protocol,WORD len)" `2588  "* Function:        BOOL IPGetHeader( IP_ADDR    *localIP,"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
C L "IPPutHeader" 23 159 1 "*"
V L "localIP" 23 185 "*DWORD_VAL" `2593 
V L "remote" 23 186 "*NODE_INFO" `2594 
V L "protocol" 23 187 "*BYTE" `2595 
V L "len" 23 188 "*WORD" `2596 
f G "IPGetHeader" 23 188 "int8(*DWORD_VAL localIP,*NODE_INFO remote,*BYTE protocol,*WORD len)" `2592  "* Macro:           IPDiscard()"
C L "IPGetHeader" 23 191 1 "*"
C L "IPGetHeader" 23 191 1 "*"
C L "IPGetHeader" 23 191 1 "*"
C L "IPGetHeader" 23 191 1 "*"
C L "IPGetHeader" 23 191 1 "*"
D G "IPDiscard" 23 206 "()         MACDiscard()"
C L "IPGetHeader" 23 210 1 "*"
C L "IPGetHeader" 23 210 1 "*"
C L "IPGetHeader" 23 210 1 "*"
C L "IPGetHeader" 23 210 1 "*"
C L "IPGetHeader" 23 210 1 "*"
C L "IPGetHeader" 23 210 1 "*"
D G "IPGetArray" 23 225 "(a, b)    MACGetArray(a, b)"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
C L "IPGetHeader" 23 230 1 "*"
V L "Offset" 23 246 "WORD" `2598 
f G "IPSetRxBuffer" 23 246 "void(WORD Offset)" `2597  "*                  ARP Module Defs for Microchip TCP/IP Stack"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
C L "IPSetRxBuffer" 24 1 1 "*"
D G "__ARP_H" 24 56 ""
D G "ARPInit" 24 61 "()"
D G "ARP_OPERATION_REQ" 24 64 "0x0001u" "Operation code indicating an ARP Request"
D G "ARP_OPERATION_RESP" 24 65 "0x0002u" "Operation code indicating an ARP Response"
D G "HW_ETHERNET" 24 67 " (0x0001u)" "ARP Hardware type as defined by IEEE 802.3"
D G "ARP_IP" 24 68 " (0x0800u)" "ARP IP packet type as defined by IEEE 802.3"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
C L "IPSetRxBuffer" 24 1 1 "FUNCTION"
T G "ARP_PACKET" 24 88 "{WORD HardwareType,WORD Protocol,BYTE MACAddrLen,BYTE ProtocolLen,WORD Operation,MAC_ADDR SenderMACAddr,DWORD_VAL SenderIPAddr,MAC_ADDR TargetMACAddr,DWORD_VAL TargetIPAddr}" `2609 
f G "ARPProcess" 24 90 "int8()" `2610 
V L "IPAddr" 24 91 "*DWORD_VAL" `2612 
f G "ARPResolve" 24 91 "void(*DWORD_VAL IPAddr)" `2611 
V L "IPAddr" 24 92 "*DWORD_VAL" `2614 
V L "MACAddr" 24 92 "*MAC_ADDR" `2615 
f G "ARPIsResolved" 24 92 "int8(*DWORD_VAL IPAddr,*MAC_ADDR MACAddr)" `2613 
V L "p" 24 93 "*ARP_PACKET" `2617 
f G "SwapARPPacket" 24 93 "void(*ARP_PACKET p)" `2616 
V L "SrcIPAddr" 24 108 "DWORD" `2619 
V L "DestIPAddr" 24 108 "DWORD" `2620 
V L "op_req" 24 108 "BYTE" `2621 
f G "ARPSendPkt" 24 108 "int8(DWORD SrcIPAddr,DWORD DestIPAddr,BYTE op_req)" `2618 
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
C L "ARPSendPkt" 25 1 1 "*"
D G "__XEEPROM_H" 25 52 ""
T G "XEE_RESULT" 25 56 "BOOL" `2622 
D G "XEE_SUCCESS" 25 57 "FALSE"
C L "ARPSendPkt" 25 1 10 "FUNCTION"
f G "You_cannot_call_the_XEEInit_function_without_defining_EEPROM_CS_" 25 81 "void()" `2623 
f G "You_cannot_call_the_XEEBeginWrite_function_without_defining_EEPR" 25 82 "int8()" `2624 
f G "You_cannot_call_the_XEEWrite_function_without_defining_EEPROM_CS" 25 83 "int8()" `2625 
f G "You_cannot_call_the_XEEWriteArray_function_without_defining_EEPR" 25 84 "void()" `2626 
f G "You_cannot_call_the_XEEEndWrite_function_without_defining_EEPROM" 25 85 "int8()" `2627 
f G "You_cannot_call_the_XEEBeginRead_function_without_defining_EEPRO" 25 86 "int8()" `2628 
f G "You_cannot_call_the_XEERead_function_without_defining_EEPROM_CS_" 25 87 "BYTE()" `2629 
f G "You_cannot_call_the_XEEReadArray_function_without_defining_EEPRO" 25 88 "int8()" `2630 
f G "You_cannot_call_the_XEEEndRead_function_without_defining_EEPROM_" 25 89 "int8()" `2631 
f G "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 25 90 "int8()" `2632 
D G "XEEInit" 25 91 "()				You_cannot_call_the_XEEInit_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEBeginWrite" 25 92 "(a) 		You_cannot_call_the_XEEBeginWrite_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEWrite" 25 93 "(a)				You_cannot_call_the_XEEWrite_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEWriteArray" 25 94 "(a,b)		You_cannot_call_the_XEEWriteArray_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEEndWrite" 25 95 "()			You_cannot_call_the_XEEEndWrite_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEBeginRead" 25 96 "(a)			You_cannot_call_the_XEEBeginRead_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEERead" 25 97 "(a)				You_cannot_call_the_XEERead_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEReadArray" 25 98 "(a, b, c)	You_cannot_call_the_XEEReadArray_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEEndRead" 25 99 "()			You_cannot_call_the_XEEEndRead_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
D G "XEEIsBusy" 25 100 "()				You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_CS_TRIS_in_HardwareProfile_h_first()"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 1 "*"
D G "__SPIFLASH_H" 26 55 ""
D G "SPI_FLASH_SECTOR_SIZE" 26 59 " (4096ul)"
D G "SPI_FLASH_PAGE_SIZE" 26 60 " (0ul)		" "SST has no page boundary requirements"
D G "SPI_FLASH_SECTOR_MASK" 26 62 " (SPI_FLASH_SECTOR_SIZE - 1)"
C L "You_cannot_call_the_XEEIsBusy_function_without_defining_EEPROM_C" 26 1 10 "FUNCTION"
f G "You_cannot_call_the_SPIFlashInit_function_without_defining_SPIFL" 26 83 "void()" `2633 
f G "You_cannot_call_the_SPIFlashReadArray_function_without_defining_" 26 84 "void()" `2634 
f G "You_cannot_call_the_SPIFlashBeginWrite_function_without_defining" 26 85 "void()" `2635 
f G "You_cannot_call_the_SPIFlashWrite_function_without_defining_SPIF" 26 86 "void()" `2636 
f G "You_cannot_call_the_SPIFlashWriteArray_function_without_defining" 26 87 "void()" `2637 
f G "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 26 88 "void()" `2638 
D G "SPIFlashInit" 26 89 "()				You_cannot_call_the_SPIFlashInit_function_without_defining_SPIFLASH_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIFlashReadArray" 26 90 "(a,b,c)	You_cannot_call_the_SPIFlashReadArray_function_without_defining_SPIFLASH_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIFlashBeginWrite" 26 91 "(a)		You_cannot_call_the_SPIFlashBeginWrite_function_without_defining_SPIFLASH_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIFlashWrite" 26 92 "(a)			You_cannot_call_the_SPIFlashWrite_function_without_defining_SPIFLASH_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIFlashWriteArray" 26 93 "(a,b)		You_cannot_call_the_SPIFlashWriteArray_function_without_defining_SPIFLASH_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIFlashEraseSector" 26 94 "(a)		You_cannot_call_the_SPIFlashEraseSector_function_without_defining_SPIFLASH_CS_TRIS_in_HardwareProfile_h_first()"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 1 "*"
D G "__SPIRAM_H" 27 52 ""
C L "You_cannot_call_the_SPIFlashEraseSector_function_without_definin" 27 1 10 "FUNCTION"
f G "You_cannot_call_the_SPIRAMInit_function_without_defining_SPIRAM_" 27 81 "void()" `2639 
f G "You_cannot_call_the_SPIRAMGetArray_function_without_defining_SPI" 27 82 "void()" `2640 
f G "You_cannot_call_the_SPIRAMPutArray_function_without_defining_SPI" 27 83 "void()" `2641 
f G "You_cannot_call_the_SPIRAMPutString_function_without_defining_SP" 27 84 "void()" `2642 
f G "You_cannot_call_the_SPIRAMPutROMArray_function_without_defining_" 27 85 "void()" `2643 
f G "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 27 86 "void()" `2644 
D G "SPIRAMInit" 27 87 "()				You_cannot_call_the_SPIRAMInit_function_without_defining_SPIRAM_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIRAMGetArray" 27 88 "(a,b,c)		You_cannot_call_the_SPIRAMGetArray_function_without_defining_SPIRAM_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIRAMPutArray" 27 89 "(a,b,c)		You_cannot_call_the_SPIRAMPutArray_function_without_defining_SPIRAM_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIRAMPutString" 27 90 "(a,b)		You_cannot_call_the_SPIRAMPutString_function_without_defining_SPIRAM_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIRAMPutROMArray" 27 91 "(a,b,c)	You_cannot_call_the_SPIRAMPutROMArray_function_without_defining_SPIRAM_CS_TRIS_in_HardwareProfile_h_first()"
D G "SPIRAMPutROMString" 27 92 "(a,b)		You_cannot_call_the_SPIRAMPutROMString_function_without_defining_SPIRAM_CS_TRIS_in_HardwareProfile_h_first()"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "*"
D G "__UDP_H" 28 53 ""
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
T G "UDP_PORT" 28 56 "WORD" `2645  "Provides a handle to a UDP Socket"
T G "UDP_SOCKET" 28 59 "BYTE" `2646  "UDP States"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
E G "UDP_DNS_IS_RESOLVED" 28 65 "0" `2648  "Special state for UDP client mode sockets"
E G "UDP_DNS_RESOLVE" 28 66 "1" `2649  "Special state for UDP client mode sockets"
E G "UDP_GATEWAY_SEND_ARP" 28 67 "2" `2650  "Special state for UDP client mode sockets"
E G "UDP_GATEWAY_GET_ARP" 28 68 "3" `2651  "Socket is idle and unallocated"
E G "UDP_CLOSED" 28 69 "4" `2652 
E G "UDP_OPENED" 28 70 "5" `2653 
T G "UDP_STATE" 28 70 "" `2654  "Stores information about a current UDP socket"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
T G "UDP_SOCKET_INFO" 28 92 "{}" `2669 
D G "INVALID_UDP_SOCKET" 28 95 " (0xffu)		" "Indicates a UDP socket that is not valid"
D G "INVALID_UDP_PORT" 28 96 " (0ul)		" "Indicates a UDP port that is not valid"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 2 "FUNCTION"
V G "activeUDPSocket" 28 103 "UDP_SOCKET" `2670 
V G "UDPSocketInfo" 28 104 "UDP_SOCKET_INFO[7]" `2671 
V G "UDPTxCount" 28 105 "WORD" `2672 
V G "UDPRxCount" 28 106 "WORD" `2673  "Stores the header of a UDP packet"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 1 "FUNCTION"
T G "UDP_HEADER" 28 116 "{UDP_PORT SourcePort,UDP_PORT DestinationPort,WORD Length,WORD Checksum}" `2679  "Create a server socket and ignore dwRemoteHost."
D G "UDP_OPEN_SERVER" 28 120 "0u"
D G "UDP_OPEN_NODE_INFO" 28 138 "4u"
C L "You_cannot_call_the_SPIRAMPutROMString_function_without_defining" 28 1 2 "FUNCTION"
f G "UDPInit" 28 145 "void()" `2680 
f G "UDPTask" 28 146 "void()" `2681 
V L "remoteHost" 28 147 "DWORD" `2683 
V L "remoteHostType" 28 147 "BYTE" `2684 
V L "localPort" 28 147 "UDP_PORT" `2685 
V L "remotePort" 28 147 "UDP_PORT" `2686 
f G "UDPOpenEx" 28 147 "UDP_SOCKET(DWORD remoteHost,BYTE remoteHostType,UDP_PORT localPort,UDP_PORT remotePort)" `2682  "UDP_SOCKET UDPOpen(UDP_PORT localPort, NODE_INFO *remoteNode, UDP_PORT remotePort);"
V L "s" 28 150 "UDP_SOCKET" `2688 
f G "UDPClose" 28 150 "void(UDP_SOCKET s)" `2687 
V L "remoteNode" 28 151 "*NODE_INFO" `2690 
V L "localIP" 28 151 "*DWORD_VAL" `2691 
V L "len" 28 151 "WORD" `2692 
f G "UDPProcess" 28 151 "int8(*NODE_INFO remoteNode,*DWORD_VAL localIP,WORD len)" `2689 
V L "wOffset" 28 153 "WORD" `2694 
f G "UDPSetTxBuffer" 28 153 "void(WORD wOffset)" `2693 
V L "wOffset" 28 154 "WORD" `2696 
f G "UDPSetRxBuffer" 28 154 "void(WORD wOffset)" `2695 
V L "s" 28 155 "UDP_SOCKET" `2698 
f G "UDPIsPutReady" 28 155 "WORD(UDP_SOCKET s)" `2697 
V L "v" 28 156 "BYTE" `2700 
f G "UDPPut" 28 156 "int8(BYTE v)" `2699 
V L "cData" 28 157 "*BYTE" `2702 
V L "wDataLen" 28 157 "WORD" `2703 
f G "UDPPutArray" 28 157 "WORD(*BYTE cData,WORD wDataLen)" `2701 
V L "strData" 28 158 "*BYTE" `2705 
f G "UDPPutString" 28 158 "*BYTE(*BYTE strData)" `2704 
f G "UDPFlush" 28 159 "void()" `2706  "ROM function variants for PIC18"
V L "cData" 28 163 "*" `2708 
V L "wDataLen" 28 163 "WORD" `2709 
f G "UDPPutROMArray" 28 163 "WORD(* cData,WORD wDataLen)" `2707 
V L "strData" 28 164 "*" `2711 
f G "UDPPutROMString" 28 164 "*BYTE(* strData)" `2710 
V L "s" 28 170 "UDP_SOCKET" `2713 
f G "UDPIsGetReady" 28 170 "WORD(UDP_SOCKET s)" `2712 
V L "v" 28 171 "*BYTE" `2715 
f G "UDPGet" 28 171 "int8(*BYTE v)" `2714 
V L "cData" 28 172 "*BYTE" `2717 
V L "wDataLen" 28 172 "WORD" `2718 
f G "UDPGetArray" 28 172 "WORD(*BYTE cData,WORD wDataLen)" `2716 
f G "UDPDiscard" 28 173 "void()" `2719 
V L "socket" 28 174 "UDP_SOCKET" `2721 
f G "UDPIsOpened" 28 174 "int8(UDP_SOCKET socket)" `2720  "Function:"
D G "UDPOpen" 28 213 "(localPort,remoteNode,remotePort)  UDPOpenEx((DWORD)remoteNode,UDP_OPEN_NODE_INFO,localPort,remotePort)"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
C L "UDPIsOpened" 29 1 1 "*"
D G "__TCP_HITECH_WORKAROUND_H" 29 53 ""
C L "UDPIsOpened" 29 1 3 "FUNCTION"
T G "TCP_SOCKET" 29 61 "BYTE" `2722 
D G "INVALID_SOCKET" 29 63 " (0xFE)	" "The socket is invalid or could not be opened"
D G "UNKNOWN_SOCKET" 29 64 " (0xFF)	" "The socket is not known"
C L "UDPIsOpened" 29 1 3 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
E G "TCP_GET_DNS_MODULE" 29 75 "0" `2724  "Special state for TCP client mode sockets"
E G "TCP_DNS_RESOLVE" 29 76 "1" `2725  "Special state for TCP client mode sockets"
E G "TCP_GATEWAY_SEND_ARP" 29 77 "2" `2726  "Special state for TCP client mode sockets"
E G "TCP_GATEWAY_GET_ARP" 29 79 "3" `2727  "Socket is listening for connections"
E G "TCP_LISTEN" 29 80 "4" `2728  "A SYN has been sent, awaiting an SYN+ACK"
E G "TCP_SYN_SENT" 29 81 "5" `2729  "A SYN has been received, awaiting an ACK"
E G "TCP_SYN_RECEIVED" 29 82 "6" `2730  "Socket is connected and connection is established"
E G "TCP_ESTABLISHED" 29 83 "7" `2731  "FIN WAIT state 1"
E G "TCP_FIN_WAIT_1" 29 84 "8" `2732  "FIN WAIT state 2"
E G "TCP_FIN_WAIT_2" 29 85 "9" `2733  "Socket is closing"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
E G "TCP_CLOSING" 29 87 "10" `2734  "Waiting to close the socket"
E G "TCP_CLOSE_WAIT" 29 88 "11" `2735  "The final ACK has been sent"
E G "TCP_LAST_ACK" 29 89 "12" `2736  "Socket is idle and unallocated"
E G "TCP_CLOSED" 29 91 "13" `2737  "Special state for TCP client mode sockets.  Socket is idle, but still allocated pending application closure of the handle."
E G "TCP_CLOSED_BUT_RESERVED" 29 92 "14" `2738 
T G "TCP_STATE" 29 92 "" `2739 
C L "UDPIsOpened" 29 1 1 "FUNCTION"
E G "SSL_NONE" 29 97 "0" `2741  "Handshake is progressing (no application data allowed)"
E G "SSL_HANDSHAKING" 29 98 "1" `2742  "Connection is established and secured"
E G "SSL_ESTABLISHED" 29 99 "2" `2743  "Connection has been closed (no applicaiton data is allowed)"
E G "SSL_CLOSED" 29 100 "3" `2744 
T G "SSL_STATE" 29 100 "" `2745  "Section:"
C L "UDPIsOpened" 29 1 3 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
T G "TCB_STUB" 29 154 "{int16 bufferTxStart,int16 bufferRxStart,int16 bufferEnd,int16 txHead,int16 txTail,int16 rxHead,int16 rxTail,DWORD eventTime,WORD eventTime2}" `2778  "Remainder of TCP Control Block data."
C L "UDPIsOpened" 29 1 2 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
T G "TCB" 29 190 "{DWORD retryInterval,DWORD MySEQ,DWORD RemoteSEQ,int16 txUnackedTail,WORD_VAL remotePort,WORD_VAL localPort,WORD remoteWindow,WORD wFutureDataSize}" `2804  "Information about a socket"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
T G "SOCKET_INFO" 29 197 "{NODE_INFO remote,WORD_VAL remotePort}" `2808  "Section:"
C L "UDPIsOpened" 29 1 1 "FUNCTION"
f G "TCPInit" 29 204 "void()" `2809 
V L "hTCP" 29 205 "TCP_SOCKET" `2811 
f G "TCPGetRemoteInfo" 29 205 "*SOCKET_INFO(TCP_SOCKET hTCP)" `2810 
V L "hTCP" 29 206 "TCP_SOCKET" `2813 
f G "TCPWasReset" 29 206 "int8(TCP_SOCKET hTCP)" `2812 
V L "hTCP" 29 207 "TCP_SOCKET" `2815 
f G "TCPIsConnected" 29 207 "int8(TCP_SOCKET hTCP)" `2814 
V L "hTCP" 29 208 "TCP_SOCKET" `2817 
f G "TCPDisconnect" 29 208 "void(TCP_SOCKET hTCP)" `2816 
V L "hTCP" 29 209 "TCP_SOCKET" `2819 
f G "TCPClose" 29 209 "void(TCP_SOCKET hTCP)" `2818 
V L "hTCP" 29 210 "TCP_SOCKET" `2821 
f G "TCPIsPutReady" 29 210 "WORD(TCP_SOCKET hTCP)" `2820 
V L "hTCP" 29 211 "TCP_SOCKET" `2823 
V L "byte" 29 211 "BYTE" `2824 
f G "TCPPut" 29 211 "int8(TCP_SOCKET hTCP,BYTE byte)" `2822 
V L "hTCP" 29 212 "TCP_SOCKET" `2826 
V L "Data" 29 212 "*BYTE" `2827 
V L "Len" 29 212 "WORD" `2828 
f G "TCPPutArray" 29 212 "WORD(TCP_SOCKET hTCP,*BYTE Data,WORD Len)" `2825 
V L "hTCP" 29 213 "TCP_SOCKET" `2830 
V L "Data" 29 213 "*BYTE" `2831 
f G "TCPPutString" 29 213 "*BYTE(TCP_SOCKET hTCP,*BYTE Data)" `2829 
V L "hTCP" 29 214 "TCP_SOCKET" `2833 
f G "TCPIsGetReady" 29 214 "WORD(TCP_SOCKET hTCP)" `2832 
V L "hTCP" 29 215 "TCP_SOCKET" `2835 
f G "TCPGetRxFIFOFree" 29 215 "WORD(TCP_SOCKET hTCP)" `2834 
V L "hTCP" 29 216 "TCP_SOCKET" `2837 
V L "byte" 29 216 "*BYTE" `2838 
f G "TCPGet" 29 216 "int8(TCP_SOCKET hTCP,*BYTE byte)" `2836 
V L "hTCP" 29 217 "TCP_SOCKET" `2840 
V L "buffer" 29 217 "*BYTE" `2841 
V L "count" 29 217 "WORD" `2842 
f G "TCPGetArray" 29 217 "WORD(TCP_SOCKET hTCP,*BYTE buffer,WORD count)" `2839 
V L "hTCP" 29 218 "TCP_SOCKET" `2844 
V L "wStart" 29 218 "WORD" `2845 
f G "TCPPeek" 29 218 "BYTE(TCP_SOCKET hTCP,WORD wStart)" `2843 
V L "hTCP" 29 219 "TCP_SOCKET" `2847 
V L "vBuffer" 29 219 "*BYTE" `2848 
V L "wLen" 29 219 "WORD" `2849 
V L "wStart" 29 219 "WORD" `2850 
f G "TCPPeekArray" 29 219 "WORD(TCP_SOCKET hTCP,*BYTE vBuffer,WORD wLen,WORD wStart)" `2846 
V L "hTCP" 29 220 "TCP_SOCKET" `2852 
V L "cFind" 29 220 "BYTE" `2853 
V L "wStart" 29 220 "WORD" `2854 
V L "wSearchLen" 29 220 "WORD" `2855 
V L "bTextCompare" 29 220 "int8" `2856 
f G "TCPFindEx" 29 220 "WORD(TCP_SOCKET hTCP,BYTE cFind,WORD wStart,WORD wSearchLen,int8 bTextCompare)" `2851 
V L "hTCP" 29 221 "TCP_SOCKET" `2858 
V L "cFindArray" 29 221 "*BYTE" `2859 
V L "wLen" 29 221 "WORD" `2860 
V L "wStart" 29 221 "WORD" `2861 
V L "wSearchLen" 29 221 "WORD" `2862 
V L "bTextCompare" 29 221 "int8" `2863 
f G "TCPFindArrayEx" 29 221 "WORD(TCP_SOCKET hTCP,*BYTE cFindArray,WORD wLen,WORD wStart,WORD wSearchLen,int8 bTextCompare)" `2857 
V L "hTCP" 29 222 "TCP_SOCKET" `2865 
f G "TCPDiscard" 29 222 "void(TCP_SOCKET hTCP)" `2864 
V L "remote" 29 223 "*NODE_INFO" `2867 
V L "localIP" 29 223 "*DWORD_VAL" `2868 
V L "len" 29 223 "WORD" `2869 
f G "TCPProcess" 29 223 "int8(*NODE_INFO remote,*DWORD_VAL localIP,WORD len)" `2866 
f G "TCPTick" 29 224 "void()" `2870 
V L "hTCP" 29 225 "TCP_SOCKET" `2872 
f G "TCPFlush" 29 225 "void(TCP_SOCKET hTCP)" `2871  "Create a server socket and ignore dwRemoteHost."
D G "TCP_OPEN_SERVER" 29 228 "0u"
D G "TCP_OPEN_RAM_HOST" 29 247 "You_need_to_enable_STACK_CLIENT_MODE_to_use_TCP_OPEN_RAM_HOST"
D G "TCP_OPEN_ROM_HOST" 29 249 "You_need_to_enable_STACK_CLIENT_MODE_to_use_TCP_OPEN_ROM_HOST"
D G "TCP_OPEN_IP_ADDRESS" 29 251 "You_need_to_enable_STACK_CLIENT_MODE_to_use_TCP_OPEN_IP_ADDRESS"
D G "TCP_OPEN_NODE_INFO" 29 253 "You_need_to_enable_STACK_CLIENT_MODE_to_use_TCP_OPEN_NODE_INFO"
V L "dwRemoteHost" 29 255 "DWORD" `2874 
V L "vRemoteHostType" 29 255 "BYTE" `2875 
V L "wPort" 29 255 "WORD" `2876 
V L "vSocketPurpose" 29 255 "BYTE" `2877 
f G "TCPOpen" 29 255 "TCP_SOCKET(DWORD dwRemoteHost,BYTE vRemoteHostType,WORD wPort,BYTE vSocketPurpose)" `2873 
V L "hTCP" 29 258 "TCP_SOCKET" `2879 
V L "cFindArray" 29 258 "*" `2880 
V L "wLen" 29 258 "WORD" `2881 
V L "wStart" 29 258 "WORD" `2882 
V L "wSearchLen" 29 258 "WORD" `2883 
V L "bTextCompare" 29 258 "int8" `2884 
f G "TCPFindROMArrayEx" 29 258 "WORD(TCP_SOCKET hTCP,* cFindArray,WORD wLen,WORD wStart,WORD wSearchLen,int8 bTextCompare)" `2878  "Summary:"
D G "TCPFindROMArray" 29 268 "(a,b,c,d,e)		TCPFindROMArrayEx(a,b,c,d,0,e)"
V L "hTCP" 29 270 "TCP_SOCKET" `2886 
V L "Data" 29 270 "*" `2887 
V L "Len" 29 270 "WORD" `2888 
f G "TCPPutROMArray" 29 270 "WORD(TCP_SOCKET hTCP,* Data,WORD Len)" `2885 
V L "hTCP" 29 271 "TCP_SOCKET" `2890 
V L "Data" 29 271 "*" `2891 
f G "TCPPutROMString" 29 271 "*BYTE(TCP_SOCKET hTCP,* Data)" `2889 
V L "hTCP" 29 279 "TCP_SOCKET" `2893 
f G "TCPGetTxFIFOFull" 29 279 "WORD(TCP_SOCKET hTCP)" `2892  "Alias to TCPIsGetReady provided for API completeness"
D G "TCPGetRxFIFOFull" 29 281 "(a)					TCPIsGetReady(a)"
D G "TCPGetTxFIFOFree" 29 283 "(a) 				TCPIsPutReady(a)"
D G "TCP_ADJUST_GIVE_REST_TO_RX" 29 285 "0x01u	" "Resize flag: extra bytes go to RX"
D G "TCP_ADJUST_GIVE_REST_TO_TX" 29 286 "0x02u	" "Resize flag: extra bytes go to TX"
D G "TCP_ADJUST_PRESERVE_RX" 29 287 "0x04u	" "Resize flag: attempt to preserve RX buffer"
D G "TCP_ADJUST_PRESERVE_TX" 29 288 "0x08u	" "Resize flag: attempt to preserve TX buffer"
V L "hTCP" 29 289 "TCP_SOCKET" `2895 
V L "wMinRXSize" 29 289 "WORD" `2896 
V L "wMinTXSize" 29 289 "WORD" `2897 
V L "vFlags" 29 289 "BYTE" `2898 
f G "TCPAdjustFIFOSize" 29 289 "int8(TCP_SOCKET hTCP,WORD wMinRXSize,WORD wMinTXSize,BYTE vFlags)" `2894  "Summary:"
D G "TCPFind" 29 315 "(a,b,c,d)					TCPFindEx(a,b,c,0,d)"
D G "TCPFindArray" 29 326 "(a,b,c,d,e)				TCPFindArrayEx(a,b,c,d,0,e)"
D G "TCPListen" 29 337 "(port)			TCPOpen(0, TCP_OPEN_SERVER, port, TCP_PURPOSE_DEFAULT)"
D G "TCPConnect" 29 348 "(remote,port)	TCPOpen((DWORD)remote, TCP_OPEN_NODE_INFO, port, TCP_PURPOSE_DEFAULT)"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
C L "TCPAdjustFIFOSize" 30 1 1 "*"
D G "__DHCP_H" 30 53 ""
D G "DHCP_CLIENT_PORT" 30 56 " (68u)"
D G "DHCP_SERVER_PORT" 30 58 " (67u)"
D G "BOOT_REQUEST" 30 60 " (1u)" "BOOT_REQUEST DHCP type"
D G "BOOT_REPLY" 30 61 " (2u)" "BOOT_REPLY DHCP type"
D G "BOOT_HW_TYPE" 30 62 " (1u)" "BOOT_HW_TYPE DHCP type"
D G "BOOT_LEN_OF_HW_TYPE" 30 63 " (6u)" "BOOT_LEN_OF_HW_TYPE DHCP type"
D G "DHCP_MESSAGE_TYPE" 30 65 " (53u)" "DHCP Message Type constant"
D G "DHCP_MESSAGE_TYPE_LEN" 30 66 " (1u)" "Length of DHCP Message Type"
D G "DHCP_UNKNOWN_MESSAGE" 30 68 " (0u)" "Code for unknown DHCP message"
D G "DHCP_DISCOVER_MESSAGE" 30 70 " (1u)" "DCHP Discover Message"
D G "DHCP_OFFER_MESSAGE" 30 71 " (2u)" "DHCP Offer Message"
D G "DHCP_REQUEST_MESSAGE" 30 72 " (3u)" "DHCP Request message"
D G "DHCP_DECLINE_MESSAGE" 30 73 " (4u)" "DHCP Decline Message"
D G "DHCP_ACK_MESSAGE" 30 74 " (5u)" "DHCP ACK Message"
D G "DHCP_NAK_MESSAGE" 30 75 " (6u)" "DHCP NAK Message"
D G "DHCP_RELEASE_MESSAGE" 30 76 " (7u)" "DCHP Release message"
D G "DHCP_SERVER_IDENTIFIER" 30 78 " (54u)" "DHCP Server Identifier"
D G "DHCP_SERVER_IDENTIFIER_LEN" 30 79 " (4u)" "DHCP Server Identifier length"
D G "DHCP_OPTION_ACK_MESSAGE" 30 81 " (53u)" "DHCP_OPTION_ACK_MESSAGE Type"
D G "DHCP_PARAM_REQUEST_LIST" 30 82 " (55u)" "DHCP_PARAM_REQUEST_LIST Type"
D G "DHCP_PARAM_REQUEST_LIST_LEN" 30 83 " (4u)" "DHCP_PARAM_REQUEST_LIST_LEN Type"
D G "DHCP_PARAM_REQUEST_IP_ADDRESS" 30 84 " (50u)" "DHCP_PARAM_REQUEST_IP_ADDRESS Type"
D G "DHCP_PARAM_REQUEST_IP_ADDRESS_LEN" 30 85 " (4u)" "DHCP_PARAM_REQUEST_IP_ADDRESS_LEN Type"
D G "DHCP_SUBNET_MASK" 30 86 " (1u)" "DHCP_SUBNET_MASK Type"
D G "DHCP_ROUTER" 30 87 " (3u)" "DHCP_ROUTER Type"
D G "DHCP_DNS" 30 88 " (6u)" "DHCP_DNS Type"
D G "DHCP_HOST_NAME" 30 89 " (12u)" "DHCP_HOST_NAME Type"
D G "DHCP_IP_LEASE_TIME" 30 90 " (51u)" "DHCP_IP_LEASE_TIME Type"
D G "DHCP_END_OPTION" 30 91 " (255u)" "DHCP_END_OPTION Type"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
T G "BOOTP_HEADER" 30 112 "{BYTE MessageType,BYTE HardwareType,BYTE HardwareLen,BYTE Hops,DWORD TransactionID,WORD SecondsElapsed,WORD BootpFlags,DWORD_VAL ClientIP,DWORD_VAL YourIP,DWORD_VAL NextServerIP,DWORD_VAL RelayAgentIP,MAC_ADDR ClientMAC}" `2912  "DHCP State Machine"
C L "TCPAdjustFIFOSize" 30 1 1 "FUNCTION"
E G "SM_DHCP_DISABLED" 30 118 "0" `2914  "DHCP is trying to obtain a socket"
E G "SM_DHCP_GET_SOCKET" 30 119 "1" `2915  "DHCP is sending a DHCP Discover message"
E G "SM_DHCP_SEND_DISCOVERY" 30 120 "2" `2916  "DHCP is waiting for a DHCP Offer"
E G "SM_DHCP_GET_OFFER" 30 121 "3" `2917  "DHCP is sending a DHCP Send Reequest message"
E G "SM_DHCP_SEND_REQUEST" 30 122 "4" `2918  "DCHP is waiting for a Request ACK message"
E G "SM_DHCP_GET_REQUEST_ACK" 30 123 "5" `2919  "DHCP is bound"
E G "SM_DHCP_BOUND" 30 124 "6" `2920  "DHCP is sending a DHCP renew message (first try)"
E G "SM_DHCP_SEND_RENEW" 30 125 "7" `2921  "DHCP is waiting for a renew ACK"
E G "SM_DHCP_GET_RENEW_ACK" 30 126 "8" `2922  "DHCP is sending a DHCP renew message (second try)"
E G "SM_DHCP_SEND_RENEW2" 30 127 "9" `2923  "DHCP is waiting for a renew ACK"
E G "SM_DHCP_GET_RENEW_ACK2" 30 128 "10" `2924  "DHCP is sending a DHCP renew message (third try)"
E G "SM_DHCP_SEND_RENEW3" 30 129 "11" `2925  "DHCP is waiting for a renew ACK"
E G "SM_DHCP_GET_RENEW_ACK3" 30 130 "12" `2926 
T G "SM_DHCP" 30 130 "" `2927 
V L "vInterface" 30 133 "BYTE" `2929 
f G "DHCPInit" 30 133 "void(BYTE vInterface)" `2928 
f G "DHCPTask" 30 134 "void()" `2930 
f G "DHCPServerTask" 30 135 "void()" `2931 
V L "vInterface" 30 136 "BYTE" `2933 
f G "DHCPDisable" 30 136 "void(BYTE vInterface)" `2932 
V L "vInterface" 30 137 "BYTE" `2935 
f G "DHCPEnable" 30 137 "void(BYTE vInterface)" `2934 
V L "vInterface" 30 138 "BYTE" `2937 
f G "DHCPIsEnabled" 30 138 "int8(BYTE vInterface)" `2936 
V L "vInterface" 30 139 "BYTE" `2939 
f G "DHCPIsBound" 30 139 "int8(BYTE vInterface)" `2938 
V L "vInterface" 30 140 "BYTE" `2941 
f G "DHCPStateChanged" 30 140 "int8(BYTE vInterface)" `2940 
V L "vInterface" 30 141 "BYTE" `2943 
f G "DHCPIsServerDetected" 30 141 "int8(BYTE vInterface)" `2942 
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
C L "DHCPIsServerDetected" 31 1 1 "*"
D G "__ICMP_H" 31 54 ""
V L "remote" 31 56 "*NODE_INFO" `2945 
V L "len" 31 56 "WORD" `2946 
f G "ICMPProcess" 31 56 "void(*NODE_INFO remote,WORD len)" `2944 
f G "ICMPBeginUsage" 31 58 "int8()" `2947 
V L "dwRemoteIP" 31 59 "DWORD" `2949 
f G "ICMPSendPing" 31 59 "void(DWORD dwRemoteIP)" `2948 
V L "szRemoteHost" 31 60 "*BYTE" `2951 
f G "ICMPSendPingToHost" 31 60 "void(*BYTE szRemoteHost)" `2950 
f G "ICMPGetReply" 31 61 "LONG()" `2952 
f G "ICMPEndUsage" 31 62 "void()" `2953 
V L "szRemoteHost" 31 65 "*" `2955 
f G "ICMPSendPingToHostROM" 31 65 "void(* szRemoteHost)" `2954 
D G "HTTP_USE_CHUNKS" 32 23 "0"
D G "HTTP_USE_TRIPLE_ESCAPE" 32 31 "0"
D G "HTTP_GET_PARAM_MAX_SIZE" 32 43 "254"
D G "HTTP_USE_AUTHENTICATION" 32 47 "FALSE"
D G "HTTP_LAST_MODIFIED_CHECK" 32 51 "FALSE"
f G "HTTPInit" 32 54 "void()" `2956 
f G "HTTPServer" 32 55 "void()" `2957  "**** CALLBACKS START ******///"
C L "HTTPServer" 32 2 3 "FUNCTION"
V L "file" 32 66 "*sint8" `2959 
V L "id" 32 66 "sint8" `2960 
V L "str" 32 66 "*sint8" `2961 
V L "max_ret" 32 66 "int8" `2962 
f G "http_format_char" 32 66 "int8(*sint8 file,sint8 id,*sint8 str,int8 max_ret)" `2958 
V L "file" 32 69 "*sint8" `2964 
V L "key" 32 69 "*sint8" `2965 
V L "val" 32 69 "*sint8" `2966 
f G "http_exec_cgi" 32 69 "void(*sint8 file,*sint8 key,*sint8 val)" `2963  "**** CALLBACKS END ******///"
D G "TickGetDiff" 6 67 "(a, b)  (a-b)"
D G "MY_MAC_BYTE1" 6 69 "AppConfig.MyMACAddr.v[0]"
D G "MY_MAC_BYTE2" 6 70 "AppConfig.MyMACAddr.v[1]"
D G "MY_MAC_BYTE3" 6 71 "AppConfig.MyMACAddr.v[2]"
D G "MY_MAC_BYTE4" 6 72 "AppConfig.MyMACAddr.v[3]"
D G "MY_MAC_BYTE5" 6 73 "AppConfig.MyMACAddr.v[4]"
D G "MY_MAC_BYTE6" 6 74 "AppConfig.MyMACAddr.v[5]"
D G "MY_MASK_BYTE1" 6 76 "AppConfig.MyMask.v[0]"
D G "MY_MASK_BYTE2" 6 77 "AppConfig.MyMask.v[1]"
D G "MY_MASK_BYTE3" 6 78 "AppConfig.MyMask.v[2]"
D G "MY_MASK_BYTE4" 6 79 "AppConfig.MyMask.v[3]"
D G "MY_IP" 6 81 "AppConfig.MyIPAddr"
D G "MY_IP_BYTE1" 6 83 "AppConfig.MyIPAddr.v[0]"
D G "MY_IP_BYTE2" 6 84 "AppConfig.MyIPAddr.v[1]"
D G "MY_IP_BYTE3" 6 85 "AppConfig.MyIPAddr.v[2]"
D G "MY_IP_BYTE4" 6 86 "AppConfig.MyIPAddr.v[3]"
D G "MY_GATE_BYTE1" 6 88 "AppConfig.MyGateway.v[0]"
D G "MY_GATE_BYTE2" 6 89 "AppConfig.MyGateway.v[1]"
D G "MY_GATE_BYTE3" 6 90 "AppConfig.MyGateway.v[2]"
D G "MY_GATE_BYTE4" 6 91 "AppConfig.MyGateway.v[3]"
D G "STACK_USE_MPFS" 6 104 ""
f G "DHCPBoundOrDisabled" 6 155 "int8()" `2967  "A higher level version of MACIsLinked()."
C L "DHCPBoundOrDisabled" 6 158 5 "FUNCTION"
f G "IsLinked" 6 163 "int8()" `2968  "this macro called by stack when new tcp/ip traffic tx/rx."
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
C L "IsLinked" 33 1 1 "*"
D G "__MPFS_H" 33 58 ""
C L "IsLinked" 33 1 9 "FUNCTION"
D G "MPFS_INVALID" 33 76 " (MPFS)(0xffffffffu)"
D G "MPFS" 33 80 "__ADDRESS__"
D G "MPFS_NOT_AVAILABLE" 33 83 " (0x0u)"
f G "MPFSInit" 33 95 "int8()" `2969 
V L "name" 33 96 "*BYTE" `2971 
f G "MPFSOpen" 33 96 "int32(*BYTE name)" `2970 
V L "name" 33 97 "*" `2973 
f G "MPFSOpenROM" 33 97 "int32(* name)" `2972 
f G "MPFSGet" 33 98 "BYTE()" `2974 
f G "MPFSClose" 33 99 "void()" `2975 
f G "MPFSFormat" 33 100 "int32()" `2976 
V L "b" 33 101 "BYTE" `2978 
f G "MPFSPut" 33 101 "int8(BYTE b)" `2977 
f G "MPFSPutEnd" 33 102 "int32()" `2979 
V L "offset" 33 103 "int32" `2981 
f G "MPFSSeek" 33 103 "int32(int32 offset)" `2980 
V L "ul" 33 104 "*DWORD" `2983 
f G "MPFSGetLong" 33 104 "int8(*DWORD ul)" `2982 
V G "mpfsOpenCount" 33 107 "BYTE" `2984 
V G "_currentHandle" 33 108 "int32" `2985  "extern BYTE _currentCount; //ccs bug removing for now because it doesn't match definition in mpfs.c"
C L "MPFSGetLong" 33 113 1 "*"
C L "MPFSGetLong" 33 113 1 "*"
C L "MPFSGetLong" 33 113 1 "*"
C L "MPFSGetLong" 33 113 1 "*"
C L "MPFSGetLong" 33 113 1 "*"
C L "MPFSGetLong" 33 113 1 "*"
C L "MPFSGetLong" 33 113 1 "*"
D G "MPFSGetBegin" 33 132 "(handle)    (_currentHandle = handle)"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
C L "MPFSGetLong" 33 136 1 "*"
D G "MPFSGetEnd" 33 157 "()        _currentHandle"
C L "MPFSGetLong" 33 161 1 "*"
C L "MPFSGetLong" 33 161 1 "*"
C L "MPFSGetLong" 33 161 1 "*"
C L "MPFSGetLong" 33 161 1 "*"
C L "MPFSGetLong" 33 161 1 "*"
C L "MPFSGetLong" 33 161 1 "*"
C L "MPFSGetLong" 33 161 1 "*"
D G "MPFSIsEOF" 33 177 "()     (_currentHandle == MPFS_INVALID)"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
C L "MPFSGetLong" 33 180 1 "*"
D G "MPFSPutBegin" 33 200 "(handle)        (_currentHandle = handle)"
C L "MPFSGetLong" 33 203 1 "*"
C L "MPFSGetLong" 33 203 1 "*"
C L "MPFSGetLong" 33 203 1 "*"
C L "MPFSGetLong" 33 203 1 "*"
C L "MPFSGetLong" 33 203 1 "*"
C L "MPFSGetLong" 33 203 1 "*"
D G "MPFSTell" 33 218 "()      (_currentHandle)"
C L "MPFSGetLong" 33 221 1 "*"
C L "MPFSGetLong" 33 221 1 "*"
C L "MPFSGetLong" 33 221 1 "*"
C L "MPFSGetLong" 33 221 1 "*"
C L "MPFSGetLong" 33 221 1 "*"
C L "MPFSGetLong" 33 221 1 "*"
C L "MPFSGetLong" 33 221 1 "*"
D G "MPFSIsInUse" 33 237 "()       (mpfsOpenCount)"
V G "_MpfsEofLoc" 6 177 "int32" `2986  "returns number of bytes read before EOF."
C L "MPFSGetLong" 6 180 1 "FUNCTION"
V L "pDest" 6 181 "*int8" `2988 
V L "n" 6 181 "int16" `2989 
f G "MPFSGetBytes" 6 181 "int16(*int8 pDest,int16 n)" `2987 
f G "TickGetSafe" 6 185 "TICK()" `2990 
f G "GenerateRandomByteFromTimers" 6 188 "BYTE()" `2991  "'glue' file for using Microchip's TCP/IP stack inside CCS C Compiler without"
D G "__CCS_STACKTSK2_C__" 34 11 ""
V G "AppConfig" 34 17 "APP_CONFIG" `2116 
F G "ISRTimer0" 34 22 "void()" `2992 
D G "wf_debug_printf" 34 44 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o)"
D G "wf_debug_putc" 34 45 "(c)"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
C G "" 35 1 1 "*"
D G "__STACKTSK_C" 35 57 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
E G "SM_STACK_IDLE" 35 75 "0" `2994 
E G "SM_STACK_MAC" 35 76 "1" `2995 
E G "SM_STACK_IP" 35 77 "2" `2996 
E G "SM_STACK_ARP" 35 78 "3" `2997 
E G "SM_STACK_TCP" 35 79 "4" `2998 
E G "SM_STACK_UDP" 35 80 "5" `2999 
T G "SM_STACK" 35 80 "" `3000 
V G "smStack" 35 81 "SM_STACK" `3001 
V G "remoteNode" 35 83 "NODE_INFO" `3002 
C L "StackInit" 35 92 1 "*"
C L "StackInit" 35 92 1 "*"
C L "StackInit" 35 92 1 "*"
C L "StackInit" 35 92 1 "*"
C L "StackInit" 35 92 1 "*"
C L "StackInit" 35 92 1 "*"
C L "StackInit" 35 92 1 "*"
F G "StackInit" 35 108 "void()" `2117 
V L "once" 35 109 "BOOL" `3003 
C L "StackInit" 35 113 1 "*"
C L "StackInit" 35 113 1 "*"
C L "StackInit" 35 113 1 "FUNCTION"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
C L "StackTask" 35 218 1 "*"
F G "StackTask" 35 238 "void()" `2118 
V L "dataCount" 35 239 "WORD" `3004 
V L "tempLocalIP" 35 240 "DWORD_VAL" `3005 
V L "cFrameType" 35 241 "BYTE" `3006 
V L "cIPFrameType" 35 242 "BYTE" `3007  "WF_CS_TRIS"
C L "StackTask" 35 218 4 "FUNCTION"
V L "bLastLinkState" 35 297 "BOOL" `3008 
V L "bCurrentLinkState" 35 298 "BOOL" `3009 
C L "StackTask" 35 218 4 "FUNCTION"
C L "StackTask" 35 218 1 "FUNCTION"
C L "StackTask" 35 218 1 "FUNCTION"
C L "StackTask" 35 218 4 "FUNCTION"
C L "StackTask" 35 218 2 "FUNCTION"
C L "StackTask" 35 218 6 "FUNCTION"
C L "StackTask" 35 218 1 "FUNCTION"
C L "StackTask" 35 218 1 "FUNCTION"
C L "StackApplications" 35 444 1 "*"
C L "StackApplications" 35 444 1 "*"
C L "StackApplications" 35 444 1 "*"
C L "StackApplications" 35 444 1 "*"
C L "StackApplications" 35 444 1 "*"
C L "StackApplications" 35 444 1 "*"
C L "StackApplications" 35 444 1 "*"
F G "StackApplications" 35 460 "void()" `2119 
C L "StackApplications" 35 444 1 "FUNCTION"
D G "__HELPERS_C" 36 58 ""
D G "_STDARG" 37 13 ""
T G "va_list" 37 15 "*sint8" `3010 
D G "va_start" 37 17 "(a,b)  a=_VA_LIST"
D G "va_arg" 37 18 "(a,b)    *(b *)_va_arg(a)"
D G "va_end" 37 19 ""
D G "nargs" 37 20 "_nargs(&_va_list)"
V L "ptr" 37 22 "*sint8" `3012 
F G "_nargs" 37 22 "sint8(*sint8 ptr)" `3011 
V L "n" 37 23 "sint8" `3013 
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
V G "dwLFSRRandSeed" 36 65 "DWORD" `3014 
C L "LFSRSeedRand" 36 64 26 "FUNCTION"
V L "dwSeed" 36 102 "DWORD" `3016 
F G "LFSRSeedRand" 36 103 "DWORD(DWORD dwSeed)" `2120 
V L "dwOldSeed" 36 104 "DWORD" `3015 
V L "i" 36 105 "BYTE" `3016  "Save original seed to be returned later"
C L "LFSRSeedRand" 36 64 2 "FUNCTION"
C L "LFSRSeedRand" 36 64 1 "FUNCTION"
C L "LFSRSeedRand" 36 64 2 "FUNCTION"
C L "LFSRSeedRand" 36 64 1 "FUNCTION"
C L "LFSRRand" 36 64 23 "FUNCTION"
F G "LFSRRand" 36 161 "WORD()" `2122 
V L "i" 36 162 "BYTE" `3017  "Taps: 32 31 29 1"
C L "LFSRRand" 36 64 2 "FUNCTION"
C L "LFSRRand" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 29 "FUNCTION"
F G "GenerateRandomDWORD" 36 215 "DWORD()" `2123 
V L "vBitCount" 36 216 "BYTE" `3018 
V L "w" 36 217 "WORD" `3019 
V L "wTime" 36 217 "WORD" `3020 
V L "wLastValue" 36 217 "WORD" `3021 
V L "dwTotalTime" 36 218 "DWORD" `3022 
V L "randomResult" 36 223 "{DWORD dw,WORD[2] w}" `3026 
V L "ADCON0Save" 36 227 "BYTE" `3027 
V L "ADCON2Save" 36 227 "BYTE" `3028 
V L "T0CONSave" 36 228 "BYTE" `3029 
V L "TMR0HSave" 36 228 "BYTE" `3030 
V L "TMR0LSave" 36 228 "BYTE" `3031  "Save hardware SFRs"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "GenerateRandomDWORD" 36 64 1 "FUNCTION"
C L "StringToIPAddress" 36 64 15 "FUNCTION"
V L "str" 36 446 "*BYTE" `2140 
V L "IPAddress" 36 446 "*DWORD_VAL" `3034 
F G "StringToIPAddress" 36 447 "int8(*BYTE str,*DWORD_VAL IPAddress)" `2139 
V L "dwVal" 36 448 "DWORD_VAL" `3032 
V L "i" 36 449 "BYTE" `3033 
V L "charLen" 36 449 "BYTE" `3034 
V L "currentOctet" 36 449 "BYTE" `3035 
C L "StringToIPAddress" 36 64 1 "FUNCTION"
C L "StringToIPAddress" 36 64 3 "FUNCTION"
C L "StringToIPAddress" 36 64 1 "FUNCTION"
C L "ROMStringToIPAddress" 36 64 17 "FUNCTION"
V L "str" 36 543 "*" `2165 
V L "IPAddress" 36 543 "*DWORD_VAL" `3038 
F G "ROMStringToIPAddress" 36 544 "int8(* str,*DWORD_VAL IPAddress)" `2164 
V L "dwVal" 36 545 "DWORD_VAL" `3036 
V L "i" 36 546 "BYTE" `3037 
V L "charLen" 36 546 "BYTE" `3038 
V L "currentOctet" 36 546 "BYTE" `3039 
C L "ROMStringToIPAddress" 36 64 1 "FUNCTION"
C L "ROMStringToIPAddress" 36 64 3 "FUNCTION"
C L "ROMStringToIPAddress" 36 64 1 "FUNCTION"
C L "uitoa" 36 64 14 "FUNCTION"
V L "Value" 36 830 "WORD" `2125 
V L "Buffer" 36 830 "*BYTE" `3042 
F G "uitoa" 36 831 "void(WORD Value,*BYTE Buffer)" `2124 
V L "i" 36 832 "BYTE" `3040 
V L "Digit" 36 833 "WORD" `3041 
V L "Divisor" 36 834 "WORD" `3042 
V L "Printed" 36 835 "BOOL" `3043 
C L "hexatob" 36 64 14 "FUNCTION"
V L "AsciiChars" 36 934 "WORD_VAL" `3045 
F G "hexatob" 36 935 "BYTE(WORD_VAL AsciiChars)" `2145  "Convert lowercase to uppercase"
C L "hexatob" 36 64 1 "FUNCTION"
C L "hexatob" 36 64 1 "FUNCTION"
C L "btohexa_high" 36 64 13 "FUNCTION"
V L "b" 36 977 "BYTE" `3045 
F G "btohexa_high" 36 978 "BYTE(BYTE b)" `2147 
C L "btohexa_low" 36 64 13 "FUNCTION"
V L "b" 36 1003 "BYTE" `3045 
F G "btohexa_low" 36 1004 "BYTE(BYTE b)" `2149 
C L "stricmppgm2ram" 36 64 17 "FUNCTION"
V L "a" 36 1033 "*BYTE" `2152 
V L "b" 36 1033 "*" `3046 
F G "stricmppgm2ram" 36 1034 "sint8(*BYTE a,* b)" `2151 
V L "cA" 36 1035 "BYTE" `3044 
V L "cB" 36 1035 "BYTE" `3045  "Load first two characters"
C L "stricmppgm2ram" 36 64 1 "FUNCTION"
C L "stricmppgm2ram" 36 64 1 "FUNCTION"
C L "stricmppgm2ram" 36 64 1 "FUNCTION"
C L "stricmppgm2ram" 36 64 1 "FUNCTION"
C L "stricmppgm2ram" 36 64 1 "FUNCTION"
C L "stricmppgm2ram" 36 64 1 "FUNCTION"
C L "swaps" 36 64 10 "FUNCTION"
V L "v" 36 1089 "WORD" `3047 
F G "swaps" 36 1090 "WORD(WORD v)" `2167 
V L "t" 36 1091 "WORD_VAL" `3046 
V L "b" 36 1092 "BYTE" `3047 
C L "swapl" 36 64 10 "FUNCTION"
V L "v" 36 1121 "DWORD" `3049 
F G "swapl" 36 1123 "DWORD(DWORD v)" `2169  "Swap bytes 0 and 3"
C L "swapl" 36 64 1 "FUNCTION"
C L "CalcIPChecksum" 36 64 18 "FUNCTION"
V L "buffer" 36 1164 "*BYTE" `2172 
V L "count" 36 1164 "WORD" `3050 
F G "CalcIPChecksum" 36 1165 "WORD(*BYTE buffer,WORD count)" `2171 
V L "i" 36 1166 "WORD" `3048 
V L "val" 36 1167 "*WORD" `3049 
V L "sum" 36 1172 "{WORD[2] w,DWORD dw}" `3053 
C L "CalcIPChecksum" 36 64 1 "FUNCTION"
C L "CalcIPChecksum" 36 64 1 "FUNCTION"
C L "CalcIPChecksum" 36 64 1 "FUNCTION"
C L "CalcIPChecksum" 36 64 2 "FUNCTION"
C L "CalcIPChecksum" 36 64 1 "FUNCTION"
V G "toRotate" 36 1241 "DWORD_VAL" `3054  "Function:"
C L "FormatNetBIOSName" 36 64 34 "FUNCTION"
V L "Name" 36 1345 "*BYTE" `3056 
F G "FormatNetBIOSName" 36 1346 "void(*BYTE Name)" `3055 
V L "i" 36 1347 "BYTE" `3058 
C L "strnchr" 36 64 22 "FUNCTION"
V L "searchString" 36 1395 "*sint8" `2156 
V L "count" 36 1395 "int16" `2157 
V L "c" 36 1395 "sint8" `3062 
F G "strnchr" 36 1396 "*sint8(*sint8 searchString,int16 count,sint8 c)" `2155 
V L "c2" 36 1397 "sint8" `3059 
C L "strncpy_m" 36 64 20 "FUNCTION"
V L "destStr" 36 1442 "*sint8" `2160 
V L "destSize" 36 1442 "int16" `2161 
V L "nStrings" 36 1442 "sint16" `2162 
F G "strncpy_m" 36 1443 "int16(*sint8 destStr,int16 destSize,sint16 nStrings,*int8 _VA_LIST)" `2159 
V L "args" 36 1444 "va_list" `3060 
V L "str" 36 1445 "*sint8" `3061 
V L "end" 36 1446 "*sint8" `3062 
V L "len" 36 1447 "int16" `3063 
C L "strncpy_m" 36 64 1 "FUNCTION"
C G "" 36 1475 22 "*wUsernameLen"
C G "" 36 1475 26 "*wPasswordLen"
C G "" 36 1475 27 "*wHostnameLen"
C G "" 36 1475 8 "*wFilePathLen"
C G "" 36 1475 63 "*wFilePathLen"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
C G "" 38 1 1 "*"
D G "__TICK_C" 38 56 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
V G "dwInternalTicks" 38 64 "DWORD" `3064 
V G "vTickReading" 38 67 "BYTE[6]" `3065 
f G "GetTickCopy" 38 69 "void()" `3066  "Function:"
C L "GetTickCopy" 38 60 13 "FUNCTION"
F G "TickInit" 38 95 "void()" `2205  "Use Timer0 for 8 bit processors"
C L "TickInit" 38 60 1 "FUNCTION"
C L "TickInit" 38 60 1 "FUNCTION"
C L "TickInit" 38 60 1 "FUNCTION"
C L "TickInit" 38 60 2 "FUNCTION"
C L "GetTickCopy" 38 60 13 "FUNCTION"
F G "GetTickCopy" 38 156 "void()" `3066  "Perform an Interrupt safe and synchronized read of the 48-bit"
C L "GetTickCopy" 38 60 1 "FUNCTION"
C L "GetTickCopy" 38 60 1 "FUNCTION"
C L "GetTickCopy" 38 60 1 "FUNCTION"
C L "GetTickCopy" 38 60 1 "FUNCTION"
C L "TickGet" 38 60 17 "FUNCTION"
F G "TickGet" 38 260 "DWORD()" `2206 
C L "TickGetDiv256" 38 60 17 "FUNCTION"
F G "TickGetDiv256" 38 290 "DWORD()" `2207 
V L "dw" 38 291 "DWORD" `3067 
C L "TickGetDiv256" 38 60 1 "FUNCTION"
C L "TickGetDiv256" 38 60 1 "FUNCTION"
C L "TickGetDiv256" 38 60 1 "FUNCTION"
C L "TickGetDiv64K" 38 60 17 "FUNCTION"
F G "TickGetDiv64K" 38 327 "DWORD()" `2208 
V L "dw" 38 328 "DWORD" `3068 
C L "TickGetDiv64K" 38 60 1 "FUNCTION"
C L "TickGetDiv64K" 38 60 1 "FUNCTION"
C L "TickGetDiv64K" 38 60 1 "FUNCTION"
C L "TickConvertToMilliseconds" 38 60 19 "FUNCTION"
V L "dwTickValue" 38 367 "DWORD" `3070 
F G "TickConvertToMilliseconds" 38 368 "DWORD(DWORD dwTickValue)" `2209 
C L "TickUpdate" 38 60 10 "FUNCTION"
F G "TickUpdate" 38 391 "void()" `2211 
C L "TickUpdate" 38 60 1 "FUNCTION"
C L "TickUpdate" 38 60 1 "FUNCTION"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
C G "" 39 1 1 "*"
D G "__ENC28J60_C" 39 68 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "HALF_DUPLEX" 39 87 ""
D G "LOW" 39 92 "(a)                  ((a) & 0xFF)"
D G "HIGH" 39 93 "(a)                 (((a)>>8) & 0xFF)"
D G "WCR" 39 96 " (0x2<<5)" "Write Control Register command"
D G "BFS" 39 97 " (0x4<<5)" "Bit Field Set command"
D G "BFC" 39 98 " (0x5<<5)" "Bit Field Clear command"
D G "RCR" 39 99 " (0x0<<5)" "Read Control Register command"
D G "RBM" 39 100 " ((0x1<<5) | 0x1A)" "Read Buffer Memory command"
D G "WBM" 39 101 " ((0x3<<5) | 0x1A)" "Write Buffer Memory command"
D G "SR" 39 102 " ((0x7<<5) | 0x1F)" "System Reset command does not use an address."
D G "ENC_MAX_SPI_FREQ" 39 106 " (20000000ul)" "Hz"
D G "ETHER_IP" 39 108 " (0x00u)"
D G "ETHER_ARP" 39 109 " (0x06u)"
T G "ENC_PREAMBLE" 39 124 "{WORD NextPacketPointer,RXSTATUS StatusVector,MAC_ADDR DestMACAddr,MAC_ADDR SourceMACAddr,WORD_VAL Type}" `3078 
D G "ClearSPIDoneFlag" 39 128 "()  {ENC_SPI_IF = 0;}"
D G "WaitForDataByte" 39 129 "()   {while(!ENC_SPI_IF); ENC_SPI_IF = 0;}"
D G "SPI_ON_BIT" 39 130 " (ENC_SPICON1bits.SSPEN)"
C L "BankSel" 39 77 1 "FUNCTION"
V L "Register" 39 153 "WORD" `3080 
f G "BankSel" 39 153 "void(WORD Register)" `3079 
V L "Address" 39 154 "BYTE" `3082 
f G "ReadETHReg" 39 154 "REG(BYTE Address)" `3081 
V L "Address" 39 155 "BYTE" `3084 
f G "ReadMACReg" 39 155 "REG(BYTE Address)" `3083 
V L "Address" 39 156 "BYTE" `3086 
V L "Data" 39 156 "BYTE" `3087 
f G "WriteReg" 39 156 "void(BYTE Address,BYTE Data)" `3085 
V L "Address" 39 157 "BYTE" `3089 
V L "Data" 39 157 "BYTE" `3090 
f G "BFCReg" 39 157 "void(BYTE Address,BYTE Data)" `3088 
V L "Address" 39 158 "BYTE" `3092 
V L "Data" 39 158 "BYTE" `3093 
f G "BFSReg" 39 158 "void(BYTE Address,BYTE Data)" `3091 
f G "SendSystemReset" 39 159 "void()" `3094  "static void GetRegs(void);"
C L "SendSystemReset" 39 77 2 "FUNCTION"
V G "NextPacketLocation" 39 164 "WORD_VAL" `3095 
V G "CurrentPacketLocation" 39 165 "WORD_VAL" `3096 
V G "WasDiscarded" 39 166 "BOOL" `3097 
V G "ENCRevID" 39 167 "BYTE" `3098  "NOTE: All code in this module expects Bank 0 to be currently selected.  If code ever changes the bank, it must restore it to Bank 0 before returning."
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
C L "SendSystemReset" 39 172 1 "*"
F G "MACInit" 39 190 "void()" `2532 
V L "i" 39 191 "BYTE" `3099  "Set up the SPI module on the PIC for communications with the ENC28J60"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 2 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 7 "FUNCTION"
C L "MACInit" 39 172 2 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 8 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 3 "FUNCTION"
C L "MACInit" 39 172 3 "FUNCTION"
C L "MACInit" 39 172 3 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 2 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 4 "FUNCTION"
C L "MACInit" 39 172 2 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 1 "FUNCTION"
C L "MACInit" 39 172 2 "FUNCTION"
C L "MACIsLinked" 39 172 1 "FUNCTION"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
C L "MACIsLinked" 39 375 1 "*"
F G "MACIsLinked" 39 395 "int8()" `2534  "LLSTAT is a latching low link status bit.  Therefore, if the link"
C L "MACIsLinked" 39 375 4 "FUNCTION"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
C L "MACIsTxReady" 39 405 1 "*"
F G "MACIsTxReady" 39 425 "int8()" `2559 
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
C L "MACDiscardRx" 39 430 1 "*"
F G "MACDiscardRx" 39 450 "void()" `2548 
V L "NewRXRDLocation" 39 451 "WORD_VAL" `3100  "Make sure the current packet was not already discarded"
C L "MACDiscardRx" 39 430 4 "FUNCTION"
C L "MACDiscardRx" 39 430 1 "FUNCTION"
C L "MACDiscardRx" 39 430 3 "FUNCTION"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
C L "MACGetFreeRxSize" 39 479 1 "*"
F G "MACGetFreeRxSize" 39 496 "WORD()" `2549 
V L "ReadPT" 39 497 "WORD_VAL" `3101 
V L "WritePT" 39 497 "WORD_VAL" `3102  "Read the Ethernet hardware buffer write pointer.  Because packets can be"
C L "MACGetFreeRxSize" 39 479 3 "FUNCTION"
C L "MACGetFreeRxSize" 39 479 1 "FUNCTION"
C L "MACGetFreeRxSize" 39 479 1 "FUNCTION"
C L "MACGetFreeRxSize" 39 479 2 "FUNCTION"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
C L "MACGetHeader" 39 536 1 "*"
V L "remote" 39 559 "*MAC_ADDR" `2536 
V L "type" 39 559 "*BYTE" `3105 
F G "MACGetHeader" 39 560 "int8(*MAC_ADDR remote,*BYTE type)" `2535 
V L "header" 39 561 "ENC_PREAMBLE" `3103 
V L "PacketCount" 39 562 "BYTE" `3104  "Test if at least one packet has been received and is waiting"
C L "MACGetHeader" 39 536 1 "FUNCTION"
C L "MACGetHeader" 39 536 1 "FUNCTION"
C L "MACGetHeader" 39 536 1 "FUNCTION"
C L "MACGetHeader" 39 536 2 "FUNCTION"
C L "MACGetHeader" 39 536 3 "FUNCTION"
C L "MACGetHeader" 39 536 1 "FUNCTION"
C L "MACGetHeader" 39 536 3 "FUNCTION"
C L "MACGetHeader" 39 536 1 "FUNCTION"
C L "MACGetHeader" 39 536 1 "FUNCTION"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
C L "MACPutHeader" 39 624 1 "*"
V L "remote" 39 648 "*MAC_ADDR" `2556 
V L "type" 39 648 "BYTE" `2557 
V L "dataLen" 39 648 "WORD" `3108 
F G "MACPutHeader" 39 649 "void(*MAC_ADDR remote,BYTE type,WORD dataLen)" `2555  "Set the SPI write pointer to the beginning of the transmit buffer (post per packet control byte)"
C L "MACPutHeader" 39 624 1 "FUNCTION"
C L "MACPutHeader" 39 624 1 "FUNCTION"
C L "MACPutHeader" 39 624 2 "FUNCTION"
C L "MACPutHeader" 39 624 1 "FUNCTION"
C L "MACPutHeader" 39 624 1 "FUNCTION"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
C L "MACFlush" 39 673 1 "*"
F G "MACFlush" 39 697 "void()" `2565  "Reset transmit logic if a TX Error has previously occured"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 5 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
V L "AttemptCounter" 39 714 "WORD" `3105 
V L "ReadPtrSave" 39 718 "WORD_VAL" `3106 
V L "TXEnd" 39 719 "WORD_VAL" `3107 
V L "TXStatus" 39 720 "TXSTATUS" `3108 
V L "i" 39 721 "BYTE" `3109  "Cancel the previous transmission if it has become stuck set"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 3 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACFlush" 39 673 1 "FUNCTION"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
C L "MACSetReadPtrInRx" 39 778 1 "*"
V L "offset" 39 800 "WORD" `3111 
F G "MACSetReadPtrInRx" 39 801 "void(WORD offset)" `2538 
V L "ReadPT" 39 802 "WORD_VAL" `3110  "Determine the address of the beginning of the entire packet"
C L "MACSetReadPtrInRx" 39 778 1 "FUNCTION"
C L "MACSetReadPtrInRx" 39 778 1 "FUNCTION"
C L "MACSetReadPtrInRx" 39 778 1 "FUNCTION"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
C L "MACSetWritePtr" 39 818 1 "*"
V L "address" 39 834 "int16" `3112 
F G "MACSetWritePtr" 39 835 "int16(int16 address)" `2540 
V L "oldVal" 39 836 "WORD_VAL" `3111 
C L "MACSetWritePtr" 39 818 1 "FUNCTION"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
C L "MACSetReadPtr" 39 848 1 "*"
V L "address" 39 864 "int16" `3113 
F G "MACSetReadPtr" 39 865 "int16(int16 address)" `2542 
V L "oldVal" 39 866 "WORD_VAL" `3112 
C L "MACSetReadPtr" 39 848 1 "FUNCTION"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
C L "MACCalcRxChecksum" 39 879 1 "*"
V L "offset" 39 898 "WORD" `2515 
V L "len" 39 898 "WORD" `3115 
F G "MACCalcRxChecksum" 39 899 "WORD(WORD offset,WORD len)" `2514 
V L "temp" 39 900 "WORD_VAL" `3113 
V L "RDSave" 39 901 "WORD_VAL" `3114  "Add the offset requested by firmware plus the Ethernet header"
C L "MACCalcRxChecksum" 39 879 1 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
C L "CalcIPBufferChecksum" 39 925 1 "*"
V L "len" 39 950 "WORD" `3116 
F G "CalcIPBufferChecksum" 39 951 "WORD(WORD len)" `2517 
V L "Start" 39 952 "WORD_VAL" `3115 
V L "Checksum" 39 953 "DWORD_VAL" `3116 
V L "ChunkLen" 39 954 "WORD" `3117 
V L "DataBuffer" 39 955 "WORD[10]" `3118 
V L "DataPtr" 39 956 "*WORD" `3119  "Save the SPI read pointer starting address"
C L "CalcIPBufferChecksum" 39 925 2 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 1 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 1 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 1 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 1 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 2 "FUNCTION"
C L "CalcIPBufferChecksum" 39 925 1 "FUNCTION"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
C L "MACMemCopyAsync" 39 1003 1 "*"
V L "destAddr" 39 1031 "int16" `2551 
V L "sourceAddr" 39 1031 "int16" `2552 
V L "len" 39 1031 "WORD" `3123 
F G "MACMemCopyAsync" 39 1032 "void(int16 destAddr,int16 sourceAddr,WORD len)" `2550 
V L "ReadSave" 39 1033 "WORD_VAL" `3120 
V L "WriteSave" 39 1033 "WORD_VAL" `3121 
V L "UpdateWritePointer" 39 1034 "BOOL" `3122 
V L "UpdateReadPointer" 39 1035 "BOOL" `3123 
C L "MACMemCopyAsync" 39 1003 2 "FUNCTION"
C L "MACMemCopyAsync" 39 1003 1 "FUNCTION"
C L "MACMemCopyAsync" 39 1003 1 "FUNCTION"
F G "MACIsMemCopyDone" 39 1113 "int8()" `2554 
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
C L "MACGet" 39 1118 1 "*"
F G "MACGet" 39 1137 "BYTE()" `2544 
V L "Result" 39 1138 "BYTE" `3124 
C L "MACGet" 39 1118 1 "FUNCTION"
C L "MACGet" 39 1118 1 "FUNCTION"
C L "MACGet" 39 1118 2 "FUNCTION"
C L "MACGet" 39 1118 1 "FUNCTION"
C L "MACGetArray" 39 1118 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
C L "MACGetArray" 39 1183 1 "*"
V L "val" 39 1204 "*BYTE" `2546 
V L "len" 39 1204 "WORD" `3127 
F G "MACGetArray" 39 1205 "WORD(*BYTE val,WORD len)" `2545  "Workaround needed on HPC Explorer (classic) board to prevent interference"
V L "i" 39 1247 "WORD" `3125 
V L "Dummy" 39 1248 "BYTE" `3126  "Start the burst operation"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACGetArray" 39 1183 1 "FUNCTION"
C L "MACPut" 39 1183 1 "FUNCTION"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
C L "MACPut" 39 1344 1 "*"
V L "val" 39 1362 "BYTE" `3128 
F G "MACPut" 39 1363 "void(BYTE val)" `2560 
V L "Dummy" 39 1364 "BYTE" `3127 
C L "MACPut" 39 1344 1 "FUNCTION"
C L "MACPut" 39 1344 1 "FUNCTION"
C L "MACPut" 39 1344 1 "FUNCTION"
C L "MACPut" 39 1344 1 "FUNCTION"
C L "MACPutArray" 39 1344 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
C L "MACPutArray" 39 1404 1 "*"
V L "val" 39 1423 "*BYTE" `2563 
V L "len" 39 1423 "WORD" `3130 
F G "MACPutArray" 39 1424 "void(*BYTE val,WORD len)" `2562  "Workaround needed on HPC Explorer (classic) board to prevent interference"
V L "Dummy" 39 1458 "BYTE" `3128  "Select the chip and send the proper opcode"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutArray" 39 1404 1 "FUNCTION"
C L "MACPutROMArray" 39 1404 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
C L "MACPutROMArray" 39 1546 1 "*"
V L "val" 39 1565 "*" `2567 
V L "len" 39 1565 "WORD" `3131 
F G "MACPutROMArray" 39 1566 "void(* val,WORD len)" `2566  "Workaround needed on HPC Explorer (classic) board to prevent interference"
V L "Dummy" 39 1600 "BYTE" `3129  "Select the chip and send the proper opcode"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "MACPutROMArray" 39 1546 1 "FUNCTION"
C L "SendSystemReset" 39 1546 1 "FUNCTION"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
C L "SendSystemReset" 39 1625 1 "*"
F G "SendSystemReset" 39 1644 "void()" `3094 
V L "Dummy" 39 1645 "BYTE" `3130  "Note: The power save feature may prevent the reset from executing, so"
C L "SendSystemReset" 39 1625 2 "FUNCTION"
C L "SendSystemReset" 39 1625 2 "FUNCTION"
C L "SendSystemReset" 39 1625 1 "FUNCTION"
C L "SendSystemReset" 39 1625 1 "FUNCTION"
C L "SendSystemReset" 39 1625 1 "FUNCTION"
C L "ReadETHReg" 39 1625 1 "FUNCTION"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
C L "ReadETHReg" 39 1669 1 "*"
V L "Address" 39 1691 "BYTE" `3132 
F G "ReadETHReg" 39 1692 "REG(BYTE Address)" `3081 
V L "r" 39 1693 "REG" `3131  "Select the chip and send the Read Control Register opcode/address"
C L "ReadETHReg" 39 1669 1 "FUNCTION"
C L "ReadETHReg" 39 1669 2 "FUNCTION"
C L "ReadETHReg" 39 1669 1 "FUNCTION"
C L "ReadMACReg" 39 1669 1 "FUNCTION"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
C L "ReadMACReg" 39 1712 1 "*"
V L "Address" 39 1734 "BYTE" `3133 
F G "ReadMACReg" 39 1735 "REG(BYTE Address)" `3083 
V L "r" 39 1736 "REG" `3132 
C L "ReadMACReg" 39 1712 2 "FUNCTION"
C L "ReadMACReg" 39 1712 1 "FUNCTION"
C L "ReadMACReg" 39 1712 1 "FUNCTION"
C L "ReadMACReg" 39 1712 1 "FUNCTION"
C L "ReadMACReg" 39 1712 2 "FUNCTION"
C L "ReadMACReg" 39 1712 1 "FUNCTION"
C L "ReadPHYReg" 39 1712 1 "FUNCTION"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
C L "ReadPHYReg" 39 1757 1 "*"
V L "Register" 39 1774 "BYTE" `3134 
F G "ReadPHYReg" 39 1775 "PHYREG(BYTE Register)" `2525 
V L "Result" 39 1776 "PHYREG" `3133  "Set the right address and start the register read operation"
C L "ReadPHYReg" 39 1757 2 "FUNCTION"
C L "ReadPHYReg" 39 1757 1 "FUNCTION"
C L "ReadPHYReg" 39 1757 1 "FUNCTION"
C L "ReadPHYReg" 39 1757 1 "FUNCTION"
C L "WriteReg" 39 1757 1 "FUNCTION"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
C L "WriteReg" 39 1801 1 "*"
V L "Address" 39 1826 "BYTE" `3086 
V L "Data" 39 1826 "BYTE" `3136 
F G "WriteReg" 39 1827 "void(BYTE Address,BYTE Data)" `3085 
V L "Dummy" 39 1828 "BYTE" `3134 
C L "WriteReg" 39 1801 1 "FUNCTION"
C L "WriteReg" 39 1801 1 "FUNCTION"
C L "WriteReg" 39 1801 1 "FUNCTION"
C L "WriteReg" 39 1801 1 "FUNCTION"
C L "BFCReg" 39 1801 1 "FUNCTION"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
C L "BFCReg" 39 1873 1 "*"
V L "Address" 39 1895 "BYTE" `3089 
V L "Data" 39 1895 "BYTE" `3137 
F G "BFCReg" 39 1896 "void(BYTE Address,BYTE Data)" `3088 
V L "Dummy" 39 1897 "BYTE" `3135 
C L "BFCReg" 39 1873 1 "FUNCTION"
C L "BFCReg" 39 1873 1 "FUNCTION"
C L "BFCReg" 39 1873 1 "FUNCTION"
C L "BFCReg" 39 1873 1 "FUNCTION"
C L "BFSReg" 39 1873 1 "FUNCTION"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
C L "BFSReg" 39 1911 1 "*"
V L "Address" 39 1933 "BYTE" `3092 
V L "Data" 39 1933 "BYTE" `3138 
F G "BFSReg" 39 1934 "void(BYTE Address,BYTE Data)" `3091 
V L "Dummy" 39 1935 "BYTE" `3136 
C L "BFSReg" 39 1911 1 "FUNCTION"
C L "BFSReg" 39 1911 1 "FUNCTION"
C L "BFSReg" 39 1911 1 "FUNCTION"
C L "BFSReg" 39 1911 1 "FUNCTION"
C L "WritePHYReg" 39 1911 1 "FUNCTION"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
C L "WritePHYReg" 39 1949 1 "*"
V L "Register" 39 1966 "BYTE" `2523 
V L "Data" 39 1966 "WORD" `3139 
F G "WritePHYReg" 39 1967 "void(BYTE Register,WORD Data)" `2522  "Write the register address"
C L "WritePHYReg" 39 1949 2 "FUNCTION"
C L "WritePHYReg" 39 1949 1 "FUNCTION"
C L "WritePHYReg" 39 1949 1 "FUNCTION"
C L "BankSel" 39 1949 1 "FUNCTION"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
C L "BankSel" 39 1985 1 "*"
V L "Register" 39 2002 "WORD" `3138 
F G "BankSel" 39 2003 "void(WORD Register)" `3079 
C L "MACPowerDown" 39 1985 1 "FUNCTION"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
C L "MACPowerDown" 39 2009 1 "*"
F G "MACPowerDown" 39 2029 "void()" `2519  "Disable packet reception"
C L "MACPowerDown" 39 2009 2 "FUNCTION"
C L "MACPowerDown" 39 2009 1 "FUNCTION"
C L "MACPowerDown" 39 2009 1 "FUNCTION"
C L "MACPowerUp" 39 2009 1 "FUNCTION"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
C L "MACPowerUp" 39 2045 1 "*"
F G "MACPowerUp" 39 2067 "void()" `2521  "Leave power down mode"
C L "MACPowerUp" 39 2045 2 "FUNCTION"
C L "MACPowerUp" 39 2045 1 "FUNCTION"
C L "SetCLKOUT" 39 2045 1 "FUNCTION"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
C L "SetCLKOUT" 39 2080 1 "*"
V L "NewConfig" 39 2102 "BYTE" `3138 
F G "SetCLKOUT" 39 2103 "void(BYTE NewConfig)" `2529 
C L "GetCLKOUT" 39 2080 1 "FUNCTION"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
C L "GetCLKOUT" 39 2110 1 "*"
F G "GetCLKOUT" 39 2133 "BYTE()" `2531 
V L "i" 39 2134 "BYTE" `3137 
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 1 "*"
C G "" 39 2143 70 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
C G "" 40 1 1 "*"
D G "__IP_C" 40 61 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "IPv4" 40 66 " (0x40u)"
D G "IP_VERSION" 40 67 "IPv4"
D G "IP_IHL" 40 72 " (0x05)"
D G "IP_SERVICE_NW_CTRL" 40 74 " (0x07)"
D G "IP_SERVICE_IN_CTRL" 40 75 " (0x06)"
D G "IP_SERVICE_ECP" 40 76 " (0x05)"
D G "IP_SERVICE_OVR" 40 77 " (0x04)"
D G "IP_SERVICE_FLASH" 40 78 " (0x03)"
D G "IP_SERVICE_IMM" 40 79 " (0x02)"
D G "IP_SERVICE_PRIOR" 40 80 " (0x01)"
D G "IP_SERVICE_ROUTINE" 40 81 " (0x00)"
D G "IP_SERVICE_N_DELAY" 40 83 " (0x00)"
D G "IP_SERCICE_L_DELAY" 40 84 " (0x08)"
D G "IP_SERVICE_N_THRPT" 40 85 " (0x00)"
D G "IP_SERVICE_H_THRPT" 40 86 " (0x10)"
D G "IP_SERVICE_N_RELIB" 40 87 " (0x00)"
D G "IP_SERVICE_H_RELIB" 40 88 " (0x20)"
D G "IP_SERVICE" 40 90 " (IP_SERVICE_ROUTINE | IP_SERVICE_N_DELAY)"
D G "MY_IP_TTL" 40 96 " (100)" "Time-To-Live in hops"
V G "_Identifier" 40 101 "WORD" `3138 
V G "IPHeaderLen" 40 102 "BYTE" `3139 
V L "h" 40 105 "*IP_HEADER" `3141 
f G "SwapIPHeader" 40 105 "void(*IP_HEADER h)" `3140  "* Function:        BOOL IPGetHeader( IP_ADDR    *localIP,"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
C L "SwapIPHeader" 40 110 1 "*"
V L "localIP" 40 136 "*DWORD_VAL" `2593 
V L "remote" 40 137 "*NODE_INFO" `2594 
V L "protocol" 40 138 "*BYTE" `2595 
V L "len" 40 139 "*WORD" `3146 
F G "IPGetHeader" 40 140 "int8(*DWORD_VAL localIP,*NODE_INFO remote,*BYTE protocol,*WORD len)" `2592 
V L "CalcChecksum" 40 141 "WORD_VAL" `3142 
V L "header" 40 142 "IP_HEADER" `3143  "Read IP header."
C L "IPGetHeader" 40 110 1 "FUNCTION"
C L "IPGetHeader" 40 110 2 "FUNCTION"
C L "IPGetHeader" 40 110 4 "FUNCTION"
C L "IPGetHeader" 40 110 1 "FUNCTION"
C L "IPGetHeader" 40 110 2 "FUNCTION"
C L "IPGetHeader" 40 110 1 "FUNCTION"
C L "IPGetHeader" 40 110 2 "FUNCTION"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
C L "IPPutHeader" 40 234 1 "*"
V L "remote" 40 252 "*NODE_INFO" `2589 
V L "protocol" 40 253 "BYTE" `2590 
V L "len" 40 254 "WORD" `3147 
F G "IPPutHeader" 40 255 "WORD(*NODE_INFO remote,BYTE protocol,WORD len)" `2588 
V L "header" 40 256 "IP_HEADER" `3144 
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
C L "IPSetRxBuffer" 40 283 1 "*"
V L "Offset" 40 299 "WORD" `3146 
F G "IPSetRxBuffer" 40 300 "void(WORD Offset)" `2597 
V L "h" 40 306 "*IP_HEADER" `3146 
F G "SwapIPHeader" 40 307 "void(*IP_HEADER h)" `3140 
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
C G "" 41 1 1 "*"
D G "__ARP_C" 41 63 ""
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 7 1 1 "*"
C L "ARPPut" 41 67 4 "FUNCTION"
V L "packet" 41 109 "*ARP_PACKET" `3146 
f G "ARPPut" 41 109 "int8(*ARP_PACKET packet,WORD len)" `3145  "Section:"
C L "ARPPut" 41 67 20 "FUNCTION"
V L "SrcIPAddr" 41 277 "DWORD" `2619 
V L "DestIPAddr" 41 277 "DWORD" `2620 
V L "op_req" 41 277 "BYTE" `3150 
F G "ARPSendPkt" 41 278 "int8(DWORD SrcIPAddr,DWORD DestIPAddr,BYTE op_req)" `2618 
V L "packet" 41 279 "ARP_PACKET" `3147 
C L "ARPPut" 41 67 12 "FUNCTION"
V L "packet" 41 336 "*ARP_PACKET" `3149 
F G "ARPPut" 41 337 "int8(*ARP_PACKET packet)" `3145 
C L "ARPPut" 41 67 1 "FUNCTION"
C L "ARPProcess" 41 67 33 "FUNCTION"
F G "ARPProcess" 41 430 "int8()" `2610 
V L "packet" 41 431 "ARP_PACKET" `3148 
V L "Target" 41 432 "NODE_INFO" `3149 
V L "SM_ARP_IDLE" 41 439 "0" `3151 
V L "SM_ARP_REPLY" 41 440 "1" `3152 
V L "smARP" 41 440 "" `3153 
C L "ARPProcess" 41 67 1 "FUNCTION"
C L "ARPProcess" 41 67 1 "FUNCTION"
C L "ARPProcess" 41 67 2 "FUNCTION"
C L "ARPProcess" 41 67 1 "FUNCTION"
C L "ARPProcess" 41 67 1 "FUNCTION"
C L "ARPProcess" 41 67 1 "FUNCTION"
C L "SwapARPPacket" 41 67 55 "FUNCTION"
V L "p" 41 696 "*ARP_PACKET" `3155 
F G "SwapARPPacket" 41 697 "void(*ARP_PACKET p)" `2616 
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
C G "" 42 1 1 "*"
D G "__ICMP_C" 42 54 ""
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 7 1 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
C L "ICMPProcess" 42 114 1 "*"
V L "remote" 42 134 "*NODE_INFO" `2945 
V L "len" 42 134 "WORD" `3156 
F G "ICMPProcess" 42 135 "void(*NODE_INFO remote,WORD len)" `2944 
V L "dwVal" 42 136 "DWORD_VAL" `3154  "Obtain the ICMP header Type, Code, and Checksum fields"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C L "ICMPProcess" 42 114 4 "FUNCTION"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C L "ICMPProcess" 42 114 2 "FUNCTION"
C L "ICMPProcess" 42 114 2 "FUNCTION"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C L "ICMPProcess" 42 114 1 "FUNCTION"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
C G "" 43 1 1 "*"
D G "__UDP_C" 43 87 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "LOCAL_UDP_PORT_START_NUMBER" 43 99 " (4096u)"
D G "LOCAL_UDP_PORT_END_NUMBER" 43 102 " (8192u)"
V G "UDPSocketInfo" 43 110 "UDP_SOCKET_INFO[7]" `2671  "Indicates which UDP socket is currently active"
V G "activeUDPSocket" 43 113 "UDP_SOCKET" `2670 
V G "UDPTxCount" 43 115 "WORD" `2672  "Number of bytes written to this UDP segment"
V G "UDPRxCount" 43 116 "WORD" `2673  "Number of bytes read from this UDP segment"
V G "LastPutSocket" 43 117 "UDP_SOCKET" `3155 
V G "wPutOffset" 43 118 "WORD" `3156  "Offset from beginning of payload where data is to be written."
V G "wGetOffset" 43 119 "WORD" `3157  "Offset from beginning of payload from where data is to be read."
V G "Flags" 43 126 "{int1 bFirstRead,int1 bWasDiscarded}" `3161  "Indicates which socket has currently received data for this loop"
V G "SocketWithRxData" 43 129 "UDP_SOCKET" `3162 
C L "FindMatchingUDPSocket" 43 93 2 "FUNCTION"
V L "h" 43 136 "*UDP_HEADER" `3164 
V L "remoteNode" 43 136 "*NODE_INFO" `3165 
V L "localIP" 43 137 "*DWORD_VAL" `3166 
f G "FindMatchingUDPSocket" 43 137 "UDP_SOCKET(*UDP_HEADER h,*NODE_INFO remoteNode,*DWORD_VAL localIP)" `3163  "Section:"
C L "FindMatchingUDPSocket" 43 93 16 "FUNCTION"
F G "UDPInit" 43 168 "void()" `2680 
V L "s" 43 169 "UDP_SOCKET" `3167 
C L "UDPOpenEx" 43 93 50 "FUNCTION"
V L "remoteHost" 43 240 "DWORD" `2683 
V L "remoteHostType" 43 240 "BYTE" `2684 
V L "localPort" 43 240 "UDP_PORT" `2685 
V L "remotePort" 43 241 "UDP_PORT" `3172 
F G "UDPOpenEx" 43 242 "UDP_SOCKET(DWORD remoteHost,BYTE remoteHostType,UDP_PORT localPort,UDP_PORT remotePort)" `2682 
V L "s" 43 243 "UDP_SOCKET" `3168 
V L "p" 43 244 "*UDP_SOCKET_INFO" `3169  "Local temp port numbers."
V L "NextPort" 43 247 "WORD" `3170 
C L "UDPOpenEx" 43 93 2 "FUNCTION"
C L "UDPOpenEx" 43 93 1 "FUNCTION"
C L "UDPOpenEx" 43 93 1 "FUNCTION"
C L "UDPOpenEx" 43 93 3 "FUNCTION"
C L "UDPTask" 43 93 13 "FUNCTION"
F G "UDPTask" 43 341 "void()" `2681 
V L "ss" 43 342 "UDP_SOCKET" `3175 
C L "UDPTask" 43 93 1 "FUNCTION"
C L "UDPTask" 43 93 2 "FUNCTION"
C L "UDPTask" 43 93 1 "FUNCTION"
C L "UDPIsOpened" 43 93 17 "FUNCTION"
V L "socket" 43 468 "UDP_SOCKET" `3177 
F G "UDPIsOpened" 43 469 "int8(UDP_SOCKET socket)" `2720 
C L "UDPClose" 43 93 16 "FUNCTION"
V L "s" 43 622 "UDP_SOCKET" `3177 
F G "UDPClose" 43 623 "void(UDP_SOCKET s)" `2687 
C L "UDPSetTxBuffer" 43 93 16 "FUNCTION"
V L "wOffset" 43 656 "WORD" `3177 
F G "UDPSetTxBuffer" 43 657 "void(WORD wOffset)" `2693 
C L "UDPSetRxBuffer" 43 93 16 "FUNCTION"
V L "wOffset" 43 686 "WORD" `3177 
F G "UDPSetRxBuffer" 43 687 "void(WORD wOffset)" `2695 
C L "UDPIsPutReady" 43 93 16 "FUNCTION"
V L "s" 43 720 "UDP_SOCKET" `3177 
F G "UDPIsPutReady" 43 721 "WORD(UDP_SOCKET s)" `2697 
C L "UDPPut" 43 93 15 "FUNCTION"
V L "v" 43 759 "BYTE" `3177 
F G "UDPPut" 43 760 "int8(BYTE v)" `2699  "See if we are out of transmit space."
C L "UDPPut" 43 93 1 "FUNCTION"
C L "UDPPutArray" 43 93 17 "FUNCTION"
V L "cData" 43 800 "*BYTE" `2702 
V L "wDataLen" 43 800 "WORD" `3178 
F G "UDPPutArray" 43 801 "WORD(*BYTE cData,WORD wDataLen)" `2701 
V L "wTemp" 43 802 "WORD" `3176 
C L "UDPPutArray" 43 93 1 "FUNCTION"
C L "UDPPutROMArray" 43 93 20 "FUNCTION"
V L "cData" 43 847 "*" `2708 
V L "wDataLen" 43 847 "WORD" `3179 
F G "UDPPutROMArray" 43 848 "WORD(* cData,WORD wDataLen)" `2707 
V L "wTemp" 43 849 "WORD" `3177 
C L "UDPPutROMArray" 43 93 1 "FUNCTION"
C L "UDPPutString" 43 93 18 "FUNCTION"
V L "strData" 43 891 "*BYTE" `3179 
F G "UDPPutString" 43 892 "*BYTE(*BYTE strData)" `2704 
V L "strData" 43 925 "*" `3179 
F G "UDPPutROMString" 43 926 "*BYTE(* strData)" `2710 
C L "UDPFlush" 43 93 19 "FUNCTION"
F G "UDPFlush" 43 959 "void()" `2706 
V L "h" 43 960 "UDP_HEADER" `3178 
V L "p" 43 961 "*UDP_SOCKET_INFO" `3179 
V L "wUDPLength" 43 962 "WORD" `3180 
C L "UDPFlush" 43 93 1 "FUNCTION"
C L "UDPFlush" 43 93 4 "FUNCTION"
C L "UDPFlush" 43 93 1 "FUNCTION"
C L "UDPFlush" 43 93 1 "FUNCTION"
C L "UDPFlush" 43 93 2 "FUNCTION"
C L "UDPFlush" 43 93 1 "FUNCTION"
C L "UDPIsGetReady" 43 93 17 "FUNCTION"
V L "s" 43 1053 "UDP_SOCKET" `3182 
F G "UDPIsGetReady" 43 1054 "WORD(UDP_SOCKET s)" `2712 
C L "UDPIsGetReady" 43 93 2 "FUNCTION"
C L "UDPGet" 43 93 15 "FUNCTION"
V L "v" 43 1092 "*BYTE" `3182 
F G "UDPGet" 43 1093 "int8(*BYTE v)" `2714  "Make sure that there is data to return"
C L "UDPGetArray" 43 93 20 "FUNCTION"
V L "cData" 43 1132 "*BYTE" `2717 
V L "wDataLen" 43 1132 "WORD" `3183 
F G "UDPGetArray" 43 1133 "WORD(*BYTE cData,WORD wDataLen)" `2716 
V L "wBytesAvailable" 43 1134 "WORD" `3181  "Make sure that there is data to return"
C L "UDPGetArray" 43 93 1 "FUNCTION"
C L "UDPDiscard" 43 93 17 "FUNCTION"
F G "UDPDiscard" 43 1177 "void()" `2719 
C L "UDPProcess" 43 93 20 "FUNCTION"
V L "remoteNode" 43 1219 "*NODE_INFO" `2690 
V L "localIP" 43 1219 "*DWORD_VAL" `2691 
V L "len" 43 1219 "WORD" `3185 
F G "UDPProcess" 43 1220 "int8(*NODE_INFO remoteNode,*DWORD_VAL localIP,WORD len)" `2689 
V L "h" 43 1221 "UDP_HEADER" `3182 
V L "s" 43 1222 "UDP_SOCKET" `3183 
V L "pseudoHeader" 43 1223 "PSEUDO_HEADER" `3184 
V L "checksums" 43 1224 "DWORD_VAL" `3185 
C L "UDPProcess" 43 93 1 "FUNCTION"
C L "UDPProcess" 43 93 1 "FUNCTION"
C L "UDPProcess" 43 93 1 "FUNCTION"
C L "UDPProcess" 43 93 1 "FUNCTION"
C L "UDPProcess" 43 93 2 "FUNCTION"
C L "FindMatchingUDPSocket" 43 93 17 "FUNCTION"
V L "h" 43 1306 "*UDP_HEADER" `3164 
V L "remoteNode" 43 1307 "*NODE_INFO" `3165 
V L "localIP" 43 1308 "*DWORD_VAL" `3189 
F G "FindMatchingUDPSocket" 43 1309 "UDP_SOCKET(*UDP_HEADER h,*NODE_INFO remoteNode,*DWORD_VAL localIP)" `3163 
V L "s" 43 1310 "UDP_SOCKET" `3186 
V L "partialMatch" 43 1311 "UDP_SOCKET" `3187 
V L "p" 43 1312 "*UDP_SOCKET_INFO" `3188  "This is commented out because most applications don't need this type of filtering.  It comes at a performance cost."
C L "FindMatchingUDPSocket" 43 93 8 "FUNCTION"
C L "FindMatchingUDPSocket" 43 93 4 "FUNCTION"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
C G "" 44 1 1 "*"
D G "__DHCP_C" 44 86 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "DHCP_TIMEOUT" 44 95 " (5ul*TICK_SECOND)" "__CCS__"
V G "g_DNSTransactionID" 44 97 "int32" `3189  "__CCS__"
T G "DHCP_CLIENT_VARS" 44 140 "{UDP_SOCKET hDHCPSocket,SM_DHCP smState}" `3220 
V G "DHCPClientInitializedOnce" 44 142 "BOOL" `3221 
f G "_DHCPReceive" 44 144 "BYTE()" `3222 
V L "messageType" 44 145 "BYTE" `3224 
V L "bRenewing" 44 145 "int8" `3225 
f G "_DHCPSend" 44 145 "void(BYTE messageType,int8 bRenewing)" `3223  "Function:"
V G "DHCPClient" 44 187 "DHCP_CLIENT_VARS" `3226 
D G "LoadState" 44 188 "(v)"
C L "_DHCPSend" 44 94 17 "FUNCTION"
V L "vInterface" 44 218 "BYTE" `3228 
F G "DHCPInit" 44 219 "void(BYTE vInterface)" `2928 
V L "i" 44 220 "BYTE" `3227  "Upon the first call after POR, we must reset all handles to invalid so"
C L "DHCPInit" 44 94 1 "FUNCTION"
C L "DHCPInit" 44 94 1 "FUNCTION"
C L "DHCPInit" 44 94 1 "FUNCTION"
C L "DHCPDisable" 44 94 21 "FUNCTION"
V L "vInterface" 44 280 "BYTE" `3229 
F G "DHCPDisable" 44 281 "void(BYTE vInterface)" `2932 
C L "DHCPEnable" 44 94 14 "FUNCTION"
V L "vInterface" 44 315 "BYTE" `3229 
F G "DHCPEnable" 44 316 "void(BYTE vInterface)" `2934 
C L "DHCPIsEnabled" 44 94 13 "FUNCTION"
V L "vInterface" 44 346 "BYTE" `3229 
F G "DHCPIsEnabled" 44 347 "int8(BYTE vInterface)" `2936 
C L "DHCPIsBound" 44 94 17 "FUNCTION"
V L "vInterface" 44 377 "BYTE" `3229 
F G "DHCPIsBound" 44 378 "int8(BYTE vInterface)" `2938 
C L "DHCPStateChanged" 44 94 21 "FUNCTION"
V L "vInterface" 44 411 "BYTE" `3229 
F G "DHCPStateChanged" 44 412 "int8(BYTE vInterface)" `2940 
C L "DHCPIsServerDetected" 44 94 18 "FUNCTION"
V L "vInterface" 44 448 "BYTE" `3229 
F G "DHCPIsServerDetected" 44 449 "int8(BYTE vInterface)" `2942 
C L "DHCPTask" 44 94 14 "FUNCTION"
F G "DHCPTask" 44 477 "void()" `2930 
V L "i" 44 478 "BYTE" `3228 
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 4 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 4 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 5 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 2 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "DHCPTask" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 10 "FUNCTION"
F G "_DHCPReceive" 44 727 "BYTE()" `3222  "DHCP PACKET FORMAT AS PER RFC 1541"
C L "_DHCPReceive" 44 94 31 "FUNCTION"
V L "v" 44 764 "BYTE" `3230 
V L "i" 44 765 "BYTE" `3231 
V L "j" 44 765 "BYTE" `3232 
V L "type" 44 766 "BYTE" `3233 
V L "lbDone" 44 767 "BOOL" `3234 
V L "tempServerID" 44 768 "DWORD" `3235 
V L "xid" 44 769 "int32" `3236  "__CCS__ add g_DNSTransactionID"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 3 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 3 "FUNCTION"
C L "_DHCPReceive" 44 94 3 "FUNCTION"
C L "_DHCPReceive" 44 94 3 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 17 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 3 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPReceive" 44 94 2 "FUNCTION"
C L "_DHCPReceive" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 11 "FUNCTION"
V L "messageType" 44 1054 "BYTE" `3224 
V L "bRenewing" 44 1054 "int8" `3240 
F G "_DHCPSend" 44 1055 "void(BYTE messageType,int8 bRenewing)" `3223 
V L "i" 44 1056 "BYTE" `3238 
V L "MyIP" 44 1057 "DWORD_VAL" `3239  "__CCS__ add g_DNSTransactionID"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 2 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 6 "FUNCTION"
C L "_DHCPSend" 44 94 5 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 2 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C L "_DHCPSend" 44 94 1 "FUNCTION"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
C G "" 45 1 1 "*"
D G "__TCP_C" 45 60 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "LOCAL_PORT_START_NUMBER" 45 72 " (1024u)"
D G "LOCAL_PORT_END_NUMBER" 45 74 " (5000u)"
D G "TCP_OPTIMIZE_FOR_SIZE" 45 88 ""
D G "TCP_MAX_SEG_SIZE_TX" 45 106 " (1460u)"
D G "TCP_MAX_SEG_SIZE_RX" 45 114 " (536u)"
D G "TCP_START_TIMEOUT_VAL" 45 117 " ((DWORD)TICK_SECOND*1)" "Timeout to retransmit unacked data"
D G "TCP_DELAYED_ACK_TIMEOUT" 45 118 " ((DWORD)TICK_SECOND/10)" "Timeout for delayed-acknowledgement algorithm"
D G "TCP_FIN_WAIT_2_TIMEOUT" 45 119 " ((DWORD)TICK_SECOND*5)" "Timeout for FIN WAIT 2 state"
D G "TCP_KEEP_ALIVE_TIMEOUT" 45 120 " ((DWORD)TICK_SECOND*10)" "Timeout for keep-alive messages when no traffic is sent"
D G "TCP_CLOSE_WAIT_TIMEOUT" 45 121 " ((DWORD)TICK_SECOND/5)" "Timeout for the CLOSE_WAIT state"
D G "TCP_MAX_RETRIES" 45 122 " (5u)" "Maximum number of retransmission attempts"
D G "TCP_MAX_UNACKED_KEEP_ALIVES" 45 123 " (6u)" "Maximum number of keep-alive messages that can be sent without receiving a response before automatically closing the connection"
D G "TCP_MAX_SYN_RETRIES" 45 124 " (2u)" "Smaller than all other retries to reduce SYN flood DoS duration"
D G "TCP_AUTO_TRANSMIT_TIMEOUT_VAL" 45 126 " (TICK_SECOND/25ull)" "Timeout before automatically transmitting unflushed data"
D G "TCP_WINDOW_UPDATE_TIMEOUT_VAL" 45 127 " (TICK_SECOND/5ull)" "Timeout before automatically transmitting a window update due to a TCPGet() or TCPGetArray() function call"
D G "TCP_SYN_QUEUE_MAX_ENTRIES" 45 129 " (3u)" "Number of TCP RX SYN packets to save if they cannot be serviced immediately"
D G "TCP_SYN_QUEUE_TIMEOUT" 45 130 " ((DWORD)TICK_SECOND*3)" "Timeout for when SYN queue entries are deleted if unserviceable"
D G "FIN" 45 137 " (0x01)" "FIN Flag as defined in RFC"
D G "SYN" 45 138 " (0x02)" "SYN Flag as defined in RFC"
D G "RST" 45 139 " (0x04)" "Reset Flag as defined in RFC"
D G "PSH" 45 140 " (0x08)" "Push Flag as defined in RFC"
D G "ACK" 45 141 " (0x10)" "Acknowledge Flag as defined in RFC"
D G "URG" 45 142 " (0x20)" "Urgent Flag as defined in RFC"
T G "TCP_HEADER" 45 176 "{WORD SourcePort,WORD DestPort,DWORD SeqNumber,DWORD AckNumber}" `3264 
D G "TCP_OPTIONS_END_OF_LIST" 45 178 " (0x00u)" "End of List TCP Option Flag"
D G "TCP_OPTIONS_NO_OP" 45 179 " (0x01u)" "No Op TCP Option"
D G "TCP_OPTIONS_MAX_SEG_SIZE" 45 180 " (0x02u)" "Maximum segment size TCP flag"
T G "TCP_OPTIONS" 45 186 "{BYTE Kind,BYTE Length,WORD_VAL MaxSegSize}" `3269  "TCP Options data structure"
T G "TCP_SYN_QUEUE" 45 199 "{NODE_INFO niSourceAddress,WORD wSourcePort,DWORD dwSourceSEQ,WORD wDestPort,WORD wTimestamp}" `3276  "Section:"
D G "TCP_SOCKET_COUNT" 45 213 "TCP_CONFIGURATION" "ccs changed"
V G "TCBStubs" 45 241 "TCB_STUB[1]" `3277 
V G "MyTCB" 45 247 "TCB" `3278  "Currently loaded TCB"
V G "hCurrentTCP" 45 248 "TCP_SOCKET" `3279 
V G "SYNQueue" 45 253 "TCP_SYN_QUEUE[3]" `3280  "Array of saved incoming SYN requests that need to be serviced later"
C L "TCPRAMCopy" 45 66 2 "FUNCTION"
V L "wDest" 45 264 "int16" `3282 
V L "vDestType" 45 264 "BYTE" `3283 
V L "wSource" 45 264 "int16" `3284 
V L "vSourceType" 45 264 "BYTE" `3285 
V L "wLength" 45 264 "WORD" `3286 
f G "TCPRAMCopy" 45 264 "void(int16 wDest,BYTE vDestType,int16 wSource,BYTE vSourceType,WORD wLength)" `3281 
V L "wDest" 45 267 "int16" `3288 
V L "wDestType" 45 267 "BYTE" `3289 
V L "wSource" 45 267 "*" `3290 
V L "wLength" 45 267 "WORD" `3291 
f G "TCPRAMCopyROM" 45 267 "void(int16 wDest,BYTE wDestType,* wSource,WORD wLength)" `3287 
V L "vTCPFlags" 45 272 "BYTE" `3293 
V L "vSendFlags" 45 272 "BYTE" `3294 
f G "SendTCP" 45 272 "void(BYTE vTCPFlags,BYTE vSendFlags)" `3292 
V L "h" 45 273 "*TCP_HEADER" `3296 
V L "len" 45 273 "WORD" `3297 
f G "HandleTCPSeg" 45 273 "void(*TCP_HEADER h,WORD len)" `3295 
V L "h" 45 274 "*TCP_HEADER" `3299 
V L "remote" 45 274 "*NODE_INFO" `3300 
f G "FindMatchingTCPSocket" 45 274 "int8(*TCP_HEADER h,*NODE_INFO remote)" `3298 
V L "header" 45 275 "*TCP_HEADER" `3302 
f G "SwapTCPHeader" 45 275 "void(*TCP_HEADER header)" `3301 
f G "CloseSocket" 45 276 "void()" `3303 
f G "SyncTCB" 45 277 "void()" `3304  "Indicates if this packet is a retransmission (no reset) or a new packet (reset required)"
D G "SENDTCP_RESET_TIMERS" 45 284 "0x01"
D G "SENDTCP_KEEP_ALIVE" 45 286 "0x02"
C L "SyncTCB" 45 66 2 "FUNCTION"
V G "MyTCBStub" 45 295 "TCB_STUB" `3305  "Flushes MyTCBStub cache and loads up the specified TCB_STUB."
C L "SyncTCB" 45 66 1 "FUNCTION"
V L "hTCP" 45 299 "TCP_SOCKET" `3307 
F G "SyncTCBStub" 45 300 "void(TCP_SOCKET hTCP)" `3306 
C L "SyncTCBStub" 45 66 1 "FUNCTION"
C L "SyncTCBStub" 45 66 1 "FUNCTION"
C L "SyncTCB" 45 66 2 "FUNCTION"
F G "SyncTCB" 45 331 "void()" `3304 
V L "hLastTCB" 45 332 "TCP_SOCKET" `3308 
C L "SyncTCB" 45 66 1 "FUNCTION"
C L "SyncTCB" 45 66 1 "FUNCTION"
C L "TCPInit" 45 66 17 "FUNCTION"
F G "TCPInit" 45 375 "void()" `2809 
V L "i" 45 376 "BYTE" `3309 
V L "vSocketsAllocated" 45 377 "BYTE" `3310 
V L "wTXSize" 45 378 "WORD" `3311 
V L "wRXSize" 45 378 "WORD" `3312 
V L "ptrBaseAddress" 45 379 "int16" `3313 
V L "vMedium" 45 380 "BYTE" `3314 
V L "wCurrentETHAddress" 45 382 "WORD" `3315 
C L "TCPInit" 45 66 1 "FUNCTION"
C L "TCPInit" 45 66 1 "FUNCTION"
C L "TCPInit" 45 66 1 "FUNCTION"
C L "TCPInit" 45 66 2 "FUNCTION"
C L "TCPInit" 45 66 1 "FUNCTION"
C L "TCPOpen" 45 66 43 "FUNCTION"
C L "TCPOpen" 45 480 2 "*"
C L "TCPOpen" 45 480 5 "*"
C L "TCPOpen" 45 480 5 "*"
C L "TCPOpen" 45 480 4 "*"
C L "TCPOpen" 45 480 11 "*"
C L "TCPOpen" 45 480 4 "*"
C L "TCPOpen" 45 480 29 "*"
V L "dwRemoteHost" 45 595 "DWORD" `2874 
V L "vRemoteHostType" 45 595 "BYTE" `2875 
V L "wPort" 45 595 "WORD" `2876 
V L "vSocketPurpose" 45 595 "BYTE" `3320 
F G "TCPOpen" 45 596 "TCP_SOCKET(DWORD dwRemoteHost,BYTE vRemoteHostType,WORD wPort,BYTE vSocketPurpose)" `2873 
V L "hTCP" 45 597 "TCP_SOCKET" `3316  "Find an available socket that matches the specified socket type"
C L "TCPOpen" 45 480 1 "FUNCTION"
C L "TCPOpen" 45 480 1 "FUNCTION"
C L "TCPOpen" 45 480 2 "FUNCTION"
C L "TCPOpen" 45 480 1 "FUNCTION"
C L "TCPOpen" 45 480 1 "FUNCTION"
C L "TCPOpen" 45 480 1 "FUNCTION"
C L "TCPWasReset" 45 480 28 "FUNCTION"
V L "hTCP" 45 728 "TCP_SOCKET" `3318 
F G "TCPWasReset" 45 729 "int8(TCP_SOCKET hTCP)" `2812 
C L "TCPIsConnected" 45 480 20 "FUNCTION"
V L "hTCP" 45 775 "TCP_SOCKET" `3318 
F G "TCPIsConnected" 45 776 "int8(TCP_SOCKET hTCP)" `2814 
C L "TCPDisconnect" 45 480 32 "FUNCTION"
V L "hTCP" 45 830 "TCP_SOCKET" `3318 
F G "TCPDisconnect" 45 831 "void(TCP_SOCKET hTCP)" `2816 
C L "TCPDisconnect" 45 480 7 "FUNCTION"
C L "TCPDisconnect" 45 480 5 "FUNCTION"
C L "TCPDisconnect" 45 480 5 "FUNCTION"
C L "TCPDisconnect" 45 480 6 "FUNCTION"
C L "TCPDisconnect" 45 480 9 "FUNCTION"
C L "TCPClose" 45 480 16 "FUNCTION"
V L "hTCP" 45 961 "TCP_SOCKET" `3318 
F G "TCPClose" 45 962 "void(TCP_SOCKET hTCP)" `2818 
C L "TCPGetRemoteInfo" 45 480 16 "FUNCTION"
V L "hTCP" 45 997 "TCP_SOCKET" `3318 
F G "TCPGetRemoteInfo" 45 998 "*SOCKET_INFO(TCP_SOCKET hTCP)" `2810 
V L "RemoteInfo" 45 999 "SOCKET_INFO" `3317 
C L "TCPFlush" 45 480 20 "FUNCTION"
V L "hTCP" 45 1047 "TCP_SOCKET" `3319 
F G "TCPFlush" 45 1048 "void(TCP_SOCKET hTCP)" `2871 
C L "TCPFlush" 45 480 1 "FUNCTION"
C L "TCPFlush" 45 480 1 "FUNCTION"
C L "TCPIsPutReady" 45 480 15 "FUNCTION"
V L "hTCP" 45 1089 "TCP_SOCKET" `3319 
F G "TCPIsPutReady" 45 1090 "WORD(TCP_SOCKET hTCP)" `2820 
V L "i" 45 1091 "BYTE" `3318 
C L "TCPIsPutReady" 45 480 1 "FUNCTION"
C L "TCPIsPutReady" 45 480 1 "FUNCTION"
C L "TCPPut" 45 480 12 "FUNCTION"
V L "hTCP" 45 1151 "TCP_SOCKET" `2823 
V L "byte" 45 1151 "BYTE" `3321 
F G "TCPPut" 45 1152 "int8(TCP_SOCKET hTCP,BYTE byte)" `2822 
V L "wFreeTXSpace" 45 1153 "WORD" `3319 
C L "TCPPut" 45 480 1 "FUNCTION"
C L "TCPPut" 45 480 3 "FUNCTION"
C L "TCPPut" 45 480 1 "FUNCTION"
C L "TCPPut" 45 480 3 "FUNCTION"
C L "TCPPutArray" 45 480 13 "FUNCTION"
V L "hTCP" 45 1233 "TCP_SOCKET" `2826 
V L "data" 45 1233 "*BYTE" `2827 
V L "len" 45 1233 "WORD" `3323 
F G "TCPPutArray" 45 1234 "WORD(TCP_SOCKET hTCP,*BYTE data,WORD len)" `2825 
V L "wActualLen" 45 1235 "WORD" `3320 
V L "wFreeTXSpace" 45 1236 "WORD" `3321 
V L "wRightLen" 45 1237 "WORD" `3322 
C L "TCPPutArray" 45 480 3 "FUNCTION"
C L "TCPPutArray" 45 480 1 "FUNCTION"
C L "TCPPutArray" 45 480 1 "FUNCTION"
C L "TCPPutArray" 45 480 3 "FUNCTION"
C L "TCPPutROMArray" 45 480 15 "FUNCTION"
V L "hTCP" 45 1352 "TCP_SOCKET" `2886 
V L "data" 45 1352 "*" `2887 
V L "len" 45 1352 "WORD" `3326 
F G "TCPPutROMArray" 45 1353 "WORD(TCP_SOCKET hTCP,* data,WORD len)" `2885 
V L "wActualLen" 45 1354 "WORD" `3323 
V L "wFreeTXSpace" 45 1355 "WORD" `3324 
V L "wRightLen" 45 1356 "WORD" `3325 
C L "TCPPutROMArray" 45 480 3 "FUNCTION"
C L "TCPPutROMArray" 45 480 1 "FUNCTION"
C L "TCPPutROMArray" 45 480 1 "FUNCTION"
C L "TCPPutROMArray" 45 480 3 "FUNCTION"
C L "TCPPutString" 45 480 20 "FUNCTION"
V L "hTCP" 45 1476 "TCP_SOCKET" `2830 
V L "data" 45 1476 "*BYTE" `3328 
F G "TCPPutString" 45 1477 "*BYTE(TCP_SOCKET hTCP,*BYTE data)" `2829 
V L "hTCP" 45 1511 "TCP_SOCKET" `2890 
V L "data" 45 1511 "*" `3328 
F G "TCPPutROMString" 45 1512 "*BYTE(TCP_SOCKET hTCP,* data)" `2889 
C L "TCPGetTxFIFOFull" 45 480 10 "FUNCTION"
V L "hTCP" 45 1533 "TCP_SOCKET" `3327 
F G "TCPGetTxFIFOFull" 45 1534 "WORD(TCP_SOCKET hTCP)" `2892 
V L "wDataLen" 45 1535 "WORD" `3326 
V L "wFIFOSize" 45 1536 "WORD" `3327 
C L "TCPGetTxFIFOFull" 45 480 1 "FUNCTION"
C L "TCPGetTxFIFOFull" 45 480 1 "FUNCTION"
C L "TCPDiscard" 45 480 12 "FUNCTION"
V L "hTCP" 45 1577 "TCP_SOCKET" `3329 
F G "TCPDiscard" 45 1578 "void(TCP_SOCKET hTCP)" `2864 
C L "TCPDiscard" 45 480 1 "FUNCTION"
C L "TCPDiscard" 45 480 1 "FUNCTION"
C L "TCPIsGetReady" 45 480 15 "FUNCTION"
V L "hTCP" 45 1614 "TCP_SOCKET" `3329 
F G "TCPIsGetReady" 45 1615 "WORD(TCP_SOCKET hTCP)" `2832 
C L "TCPGet" 45 480 12 "FUNCTION"
V L "hTCP" 45 1648 "TCP_SOCKET" `2837 
V L "byte" 45 1648 "*BYTE" `3330 
F G "TCPGet" 45 1649 "int8(TCP_SOCKET hTCP,*BYTE byte)" `2836 
V L "wGetReadyCount" 45 1650 "WORD" `3328  "See if there is any data which can be read"
C L "TCPGet" 45 480 1 "FUNCTION"
C L "TCPGet" 45 480 2 "FUNCTION"
C L "TCPGetArray" 45 480 14 "FUNCTION"
V L "hTCP" 45 1702 "TCP_SOCKET" `2840 
V L "buffer" 45 1702 "*BYTE" `2841 
V L "len" 45 1702 "WORD" `3332 
F G "TCPGetArray" 45 1703 "WORD(TCP_SOCKET hTCP,*BYTE buffer,WORD len)" `2839 
V L "wGetReadyCount" 45 1704 "WORD" `3329 
V L "RightLen" 45 1705 "WORD" `3330 
C L "TCPGetArray" 45 480 1 "FUNCTION"
C L "TCPGetArray" 45 480 1 "FUNCTION"
C L "TCPGetArray" 45 480 1 "FUNCTION"
C L "TCPGetArray" 45 480 1 "FUNCTION"
C L "TCPGetArray" 45 480 2 "FUNCTION"
C L "TCPGetRxFIFOFree" 45 480 12 "FUNCTION"
V L "hTCP" 45 1771 "TCP_SOCKET" `3332 
F G "TCPGetRxFIFOFree" 45 1772 "WORD(TCP_SOCKET hTCP)" `2834 
V L "wDataLen" 45 1773 "WORD" `3331 
V L "wFIFOSize" 45 1774 "WORD" `3332 
C L "TCPGetRxFIFOFree" 45 480 1 "FUNCTION"
C L "TCPGetRxFIFOFree" 45 480 1 "FUNCTION"
C L "TCPGetRxFIFOFree" 45 480 1 "FUNCTION"
C L "TCPPeekArray" 45 480 23 "FUNCTION"
V L "hTCP" 45 1842 "TCP_SOCKET" `2847 
V L "vBuffer" 45 1842 "*BYTE" `2848 
V L "wLen" 45 1842 "WORD" `2849 
V L "wStart" 45 1842 "WORD" `3337 
F G "TCPPeekArray" 45 1843 "WORD(TCP_SOCKET hTCP,*BYTE vBuffer,WORD wLen,WORD wStart)" `2846 
V L "ptrRead" 45 1844 "int16" `3333 
V L "w" 45 1845 "WORD" `3334 
V L "wBytesUntilWrap" 45 1846 "WORD" `3335 
C L "TCPPeekArray" 45 480 2 "FUNCTION"
C L "TCPPeekArray" 45 480 1 "FUNCTION"
C L "TCPPeekArray" 45 480 1 "FUNCTION"
C L "TCPPeekArray" 45 480 1 "FUNCTION"
C L "TCPPeekArray" 45 480 2 "FUNCTION"
C L "TCPPeek" 45 480 20 "FUNCTION"
V L "hTCP" 45 1912 "TCP_SOCKET" `2844 
V L "wStart" 45 1912 "WORD" `3338 
F G "TCPPeek" 45 1913 "BYTE(TCP_SOCKET hTCP,WORD wStart)" `2843 
V L "i" 45 1914 "BYTE" `3336 
C L "TCPFindArrayEx" 45 480 38 "FUNCTION"
V L "hTCP" 45 1971 "TCP_SOCKET" `2858 
V L "cFindArray" 45 1971 "*BYTE" `2859 
V L "wLen" 45 1971 "WORD" `2860 
V L "wStart" 45 1971 "WORD" `2861 
V L "wSearchLen" 45 1971 "WORD" `2862 
V L "bTextCompare" 45 1971 "int8" `3343 
F G "TCPFindArrayEx" 45 1972 "WORD(TCP_SOCKET hTCP,*BYTE cFindArray,WORD wLen,WORD wStart,WORD wSearchLen,int8 bTextCompare)" `2857 
V L "ptrRead" 45 1973 "int16" `3337 
V L "wDataLen" 45 1974 "WORD" `3338 
V L "wBytesUntilWrap" 45 1975 "WORD" `3339 
V L "ptrLocation" 45 1976 "int16" `3340 
V L "wLenStart" 45 1977 "WORD" `3341 
V L "cFindArrayStart" 45 1978 "*BYTE" `3342 
V L "i" 45 1979 "BYTE" `3343 
V L "j" 45 1979 "BYTE" `3344 
V L "k" 45 1979 "BYTE" `3345 
V L "isFinding" 45 1980 "BOOL" `3346 
V L "buffer" 45 1981 "BYTE[32]" `3347 
C L "TCPFindArrayEx" 45 480 2 "FUNCTION"
C L "TCPFindArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 37 "FUNCTION"
V L "hTCP" 45 2147 "TCP_SOCKET" `2879 
V L "cFindArray" 45 2147 "*" `2880 
V L "wLen" 45 2147 "WORD" `2881 
V L "wStart" 45 2147 "WORD" `2882 
V L "wSearchLen" 45 2147 "WORD" `2883 
V L "bTextCompare" 45 2147 "int8" `3354 
F G "TCPFindROMArrayEx" 45 2148 "WORD(TCP_SOCKET hTCP,* cFindArray,WORD wLen,WORD wStart,WORD wSearchLen,int8 bTextCompare)" `2878 
V L "ptrRead" 45 2149 "int16" `3348 
V L "wDataLen" 45 2150 "WORD" `3349 
V L "wBytesUntilWrap" 45 2151 "WORD" `3350 
V L "ptrLocation" 45 2152 "int16" `3351 
V L "wLenStart" 45 2153 "WORD" `3352 
V L "cFindArrayStart" 45 2154 "*" `3353 
V L "i" 45 2155 "BYTE" `3354 
V L "j" 45 2155 "BYTE" `3355 
V L "k" 45 2155 "BYTE" `3356 
V L "isFinding" 45 2156 "BOOL" `3357 
V L "buffer" 45 2157 "BYTE[32]" `3358 
C L "TCPFindROMArrayEx" 45 480 2 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindROMArrayEx" 45 480 1 "FUNCTION"
C L "TCPFindEx" 45 480 35 "FUNCTION"
V L "hTCP" 45 2321 "TCP_SOCKET" `2852 
V L "cFind" 45 2321 "BYTE" `2853 
V L "wStart" 45 2321 "WORD" `2854 
V L "wSearchLen" 45 2321 "WORD" `2855 
V L "bTextCompare" 45 2321 "int8" `3364 
F G "TCPFindEx" 45 2322 "WORD(TCP_SOCKET hTCP,BYTE cFind,WORD wStart,WORD wSearchLen,int8 bTextCompare)" `2851 
C L "TCPTick" 45 480 16 "FUNCTION"
F G "TCPTick" 45 2355 "void()" `2870 
V L "hTCP" 45 2356 "TCP_SOCKET" `3359 
V L "bRetransmit" 45 2357 "BOOL" `3360 
V L "bCloseSocket" 45 2358 "BOOL" `3361 
V L "vFlags" 45 2359 "BYTE" `3362 
V L "w" 45 2360 "WORD" `3363  "Periodically all "not closed" sockets must perform timed operations"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 4 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPTick" 45 480 4 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 3 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 1 "FUNCTION"
C L "TCPTick" 45 480 2 "FUNCTION"
C L "TCPProcess" 45 480 17 "FUNCTION"
V L "remote" 45 2812 "*NODE_INFO" `2867 
V L "localIP" 45 2812 "*DWORD_VAL" `2868 
V L "len" 45 2812 "WORD" `3367 
F G "TCPProcess" 45 2813 "int8(*NODE_INFO remote,*DWORD_VAL localIP,WORD len)" `2866 
V L "TCPHeader" 45 2814 "TCP_HEADER" `3364 
V L "pseudoHeader" 45 2815 "PSEUDO_HEADER" `3365 
V L "checksum1" 45 2816 "WORD_VAL" `3366 
V L "checksum2" 45 2817 "WORD_VAL" `3367 
V L "optionsSize" 45 2818 "BYTE" `3368  "Calculate IP pseudoheader checksum."
C L "TCPProcess" 45 480 2 "FUNCTION"
C L "TCPProcess" 45 480 1 "FUNCTION"
C L "TCPProcess" 45 480 1 "FUNCTION"
C L "TCPProcess" 45 480 1 "FUNCTION"
C L "TCPProcess" 45 480 1 "FUNCTION"
C L "TCPProcess" 45 480 9 "FUNCTION"
C L "SendTCP" 45 480 16 "FUNCTION"
V L "vTCPFlags" 45 2929 "BYTE" `3293 
V L "vSendFlags" 45 2929 "BYTE" `3371 
F G "SendTCP" 45 2930 "void(BYTE vTCPFlags,BYTE vSendFlags)" `3292 
V L "wVal" 45 2931 "WORD_VAL" `3369 
V L "header" 45 2932 "TCP_HEADER" `3370 
V L "options" 45 2933 "TCP_OPTIONS" `3371 
V L "pseudoHeader" 45 2934 "PSEUDO_HEADER" `3372 
V L "len" 45 2935 "WORD" `3373 
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 2 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 3 "FUNCTION"
C L "SendTCP" 45 480 2 "FUNCTION"
C L "SendTCP" 45 480 2 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 4 "FUNCTION"
C L "SendTCP" 45 480 2 "FUNCTION"
C L "SendTCP" 45 480 2 "FUNCTION"
C L "SendTCP" 45 480 3 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "SendTCP" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 17 "FUNCTION"
V L "h" 45 3218 "*TCP_HEADER" `3299 
V L "remote" 45 3218 "*NODE_INFO" `3376 
F G "FindMatchingTCPSocket" 45 3219 "int8(*TCP_HEADER h,*NODE_INFO remote)" `3298 
V L "hTCP" 45 3220 "TCP_SOCKET" `3374 
V L "partialMatch" 45 3221 "TCP_SOCKET" `3375 
V L "hash" 45 3222 "WORD" `3376  "Prevent connections on invalid port 0"
C L "FindMatchingTCPSocket" 45 480 2 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 4 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 4 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 4 "FUNCTION"
V L "wQueueInsertPos" 45 3313 "WORD" `3377  "See if this is a SYN packet"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 3 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 3 "FUNCTION"
C L "FindMatchingTCPSocket" 45 480 1 "FUNCTION"
C L "SwapTCPHeader" 45 480 12 "FUNCTION"
V L "header" 45 3399 "*TCP_HEADER" `3379 
F G "SwapTCPHeader" 45 3400 "void(*TCP_HEADER header)" `3301 
C L "CloseSocket" 45 480 14 "FUNCTION"
F G "CloseSocket" 45 3434 "void()" `3303 
C L "GetMaxSegSizeOption" 45 480 19 "FUNCTION"
F G "GetMaxSegSizeOption" 45 3516 "WORD(*TCP_HEADER header)" `3378 
V L "vOptionsBytes" 45 3517 "BYTE" `3379 
V L "vOption" 45 3518 "BYTE" `3380 
V L "wMSS" 45 3519 "WORD" `3381  "Find out how many options bytes are in this packet."
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 2 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "GetMaxSegSizeOption" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 17 "FUNCTION"
V L "h" 45 3608 "*TCP_HEADER" `3296 
V L "len" 45 3608 "WORD" `3384 
F G "HandleTCPSeg" 45 3609 "void(*TCP_HEADER h,WORD len)" `3295 
V L "dwTemp" 45 3610 "DWORD" `3382 
V L "wTemp" 45 3611 "int16" `3383 
V L "lMissingBytes" 45 3612 "LONG" `3384 
V L "wMissingBytes" 45 3613 "WORD" `3385 
V L "wFreeSpace" 45 3614 "WORD" `3386 
V L "localHeaderFlags" 45 3615 "BYTE" `3387 
V L "localAckNumber" 45 3616 "DWORD" `3388 
V L "localSeqNumber" 45 3617 "DWORD" `3389 
V L "wSegmentLength" 45 3618 "WORD" `3390 
V L "bSegmentAcceptable" 45 3619 "BOOL" `3391 
V L "wNewWindow" 45 3620 "WORD" `3392  "Cache a few variables in local RAM."
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 4 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 5 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 4 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 8 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 9 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 4 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 2 "FUNCTION"
C L "HandleTCPSeg" 45 480 5 "FUNCTION"
C L "HandleTCPSeg" 45 480 10 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 3 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 5 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "HandleTCPSeg" 45 480 5 "FUNCTION"
C L "HandleTCPSeg" 45 480 9 "FUNCTION"
C L "HandleTCPSeg" 45 480 9 "FUNCTION"
C L "HandleTCPSeg" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 41 "FUNCTION"
V L "hTCP" 45 4357 "TCP_SOCKET" `2895 
V L "wMinRXSize" 45 4357 "WORD" `2896 
V L "wMinTXSize" 45 4357 "WORD" `2897 
V L "vFlags" 45 4357 "BYTE" `3397 
F G "TCPAdjustFIFOSize" 45 4358 "int8(TCP_SOCKET hTCP,WORD wMinRXSize,WORD wMinTXSize,BYTE vFlags)" `2894 
V L "ptrTemp" 45 4359 "int16" `3393 
V L "ptrHead" 45 4359 "int16" `3394 
V L "wTXAllocation" 45 4360 "WORD" `3395 
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 2 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 3 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 2 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPAdjustFIFOSize" 45 480 1 "FUNCTION"
C L "TCPRAMCopy" 45 480 24 "FUNCTION"
V L "ptrDest" 45 4548 "int16" `3282 
V L "vDestType" 45 4548 "BYTE" `3283 
V L "ptrSource" 45 4548 "int16" `3284 
V L "vSourceType" 45 4548 "BYTE" `3285 
V L "wLength" 45 4548 "WORD" `3401 
F G "TCPRAMCopy" 45 4549 "void(int16 ptrDest,BYTE vDestType,int16 ptrSource,BYTE vSourceType,WORD wLength)" `3281 
V L "wDest" 45 4692 "int16" `3288 
V L "wDestType" 45 4692 "BYTE" `3289 
V L "wSource" 45 4692 "*" `3290 
V L "wLength" 45 4692 "WORD" `3400 
F G "TCPRAMCopyROM" 45 4693 "void(int16 wDest,BYTE wDestType,* wSource,WORD wLength)" `3287 
V L "vBuffer" 45 4694 "BYTE[16]" `3396 
V L "w" 45 4695 "WORD" `3397 
C L "TCPRAMCopyROM" 45 480 1 "FUNCTION"
C L "TCPTouch" 45 480 236 "FUNCTION"
V L "s" 34 128 "TCP_SOCKET" `3399 
F G "TCPTouch" 34 129 "void(TCP_SOCKET s,WORD wLength,WORD wLength)" `3398 
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 3 "*"
C G "" 46 1 5 "*"
C G "" 46 1 2 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
C G "" 46 1 1 "*"
D G "__MPFS_C" 46 75 ""
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
C G "" 7 1 1 "*"
D G "debug_mpfs" 46 82 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t)"
D G "debug_mpfs_putc" 46 83 "(c)"
D G "MAX_FILE_NAME_LEN" 46 87 " (12u)"
D G "MPFS_DATA" 46 89 " (0x00u)"
D G "MPFS_DELETED" 46 90 " (0x01u)"
D G "MPFS_DLE" 46 91 " (0x03u)"
D G "MPFS_ETX" 46 92 " (0x04u)"
D G "MPFS_RETURN_OFFSET" 46 104 ""
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
C G "" 46 106 1 "*"
T G "MPFS_ENTRY" 46 147 "{BYTE Flag,int32 Address,BYTE[12] Name}" `3404 
V G "mpfsFlags" 46 160 "{}" `3410 
V G "mpfsOpenCount" 46 162 "BYTE" `2984 
V G "_currentHandle" 46 173 "int32" `2985 
V G "_currentFile" 46 174 "int32" `3411 
V G "_currentCount" 46 175 "WORD" `3412  "* Function:        BOOL MPFSInit(void)"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
C L "MPFSInit" 46 178 1 "*"
F G "MPFSInit" 46 196 "int8()" `2969 
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
C L "MPFSOpen" 46 213 1 "*"
V L "file" 46 229 "*BYTE" `3414 
F G "MPFSOpen" 46 230 "int32(*BYTE file)" `2970 
V L "entry" 46 231 "MPFS_ENTRY" `3413 
V L "FAT" 46 232 "int32" `3414 
V L "fileNameLen" 46 233 "BYTE" `3415 
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
C L "MPFSOpen" 46 213 1 "FUNCTION"
V L "entry_Address" 46 317 "int32" `3416 
C L "MPFSOpen" 46 213 1 "FUNCTION"
V L "file" 46 340 "*" `3418 
F G "MPFSOpenROM" 46 341 "int32(* file)" `2972 
V L "nameRAM" 46 342 "BYTE[13]" `3417 
C L "MPFSClose" 46 350 1 "*"
C L "MPFSClose" 46 350 1 "*"
C L "MPFSClose" 46 350 1 "*"
C L "MPFSClose" 46 350 1 "*"
C L "MPFSClose" 46 350 1 "*"
C L "MPFSClose" 46 350 1 "*"
C L "MPFSClose" 46 350 1 "*"
F G "MPFSClose" 46 366 "void()" `2975 
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 375 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
C L "MPFSGet" 46 399 1 "*"
F G "MPFSGet" 46 417 "BYTE()" `2974 
V L "t" 46 418 "BYTE" `3418 
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSGet" 46 399 1 "FUNCTION"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 531 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 1 "*"
C L "MPFSPut" 46 558 2 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 588 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
C L "MPFSPut" 46 617 1 "*"
V L "b" 46 639 "BYTE" `3420 
F G "MPFSPut" 46 640 "int8(BYTE b)" `2977 
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
C L "MPFSPutEnd" 46 658 1 "*"
F G "MPFSPutEnd" 46 679 "int32()" `2979 
C L "MPFSSeek" 46 691 1 "*"
C L "MPFSSeek" 46 691 1 "*"
C L "MPFSSeek" 46 691 1 "*"
C L "MPFSSeek" 46 691 1 "*"
C L "MPFSSeek" 46 691 1 "*"
C L "MPFSSeek" 46 691 1 "*"
C L "MPFSSeek" 46 691 1 "*"
V L "offset" 46 706 "int32" `3420 
F G "MPFSSeek" 46 707 "int32(int32 offset)" `2980 
V L "i" 46 708 "int32" `3419 
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
C L "MPFSGetLong" 46 722 1 "*"
V L "ul" 46 738 "*DWORD" `3421 
F G "MPFSGetLong" 46 739 "int8(*DWORD ul)" `2982 
V L "b" 46 740 "*BYTE" `3420 
D G "debug_html_putc" 47 180 "(c)"
D G "debug_html" 47 181 "(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z)"
D G "HTTP_ESCAPED_STR_SIZE" 47 195 "40"
D G "HTTP_SEND_BYTES_PER_CHUNK" 47 199 "128"
D G "HTTP_INTERRUPT_TASKS" 47 203 "()"
D G "HTTP_404_ERROR_FNAME" 47 206 ""error404.htm""
D G "HTTP_500_ERROR_FNAME" 47 207 ""error500.htm""
D G "HTML_INDEX_FNAME" 47 208 ""index.htm""
D G "HTTP_SERVER_HTACCESS_FILE" 47 211 ""htaccess.txt""
D G "HTML_500_FILE_CONTENTS" 47 216 ""<html><body><h1>500 Error</h1><hr><p>Internal server error.</p></body></html>""
C L "_strncpy" 47 3 2 "FUNCTION"
V L "s1" 47 222 "*sint8" `3422 
V L "s2" 47 222 "*sint8" `3423 
V L "n" 47 222 "int16" `3424 
F G "_strncpy" 47 223 "void(*sint8 s1,*sint8 s2,int16 n)" `3421 
C L "http_parse_cgi_str" 47 3 2 "FUNCTION"
V L "file" 47 231 "*sint8" `3426 
V L "cgistr" 47 231 "*sint8" `3427 
f G "http_parse_cgi_str" 47 231 "void(*sint8 file,*sint8 cgistr)" `3425 
V G "http_socket" 47 233 "int8[1]" `3428 
E G "HTTP_IGNORE" 47 237 "0" `3430 
E G "HTTP_LISTEN_WAIT" 47 238 "1" `3431 
E G "HTTP_CONNECTED" 47 239 "2" `3432 
E G "HTTP_GET_HEADERS" 47 240 "3" `3433 
E G "HTTP_CHECK_AUTHENTICATION" 47 241 "4" `3434 
E G "HTTP_GET_POST" 47 242 "5" `3435 
E G "HTTP_GET_POST_CONTINUE" 47 243 "6" `3436 
E G "HTTP_SEND_RESPONSE" 47 244 "7" `3437 
E G "HTTP_SEND_RESPONSE_CONTINUE" 47 245 "8" `3438 
E G "HTTP_CLOSE" 47 246 "9" `3439 
E G "HTTP_CLOSE_WAITING" 47 247 "10" `3440 
E G "HTTP_CLOSED" 47 248 "11" `3441 
E G "HTTP_DISABLED" 47 249 "255" `3442 
V G "http_state" 47 249 "[1]" `3443 
V L "file" 47 251 "*sint8" `3445 
F G "FileExists" 47 252 "int16(*sint8 file)" `3444 
V L "ret" 47 253 "int16" `3446 
V L "handle" 47 254 "int32" `3447 
C L "http_escape_chars" 47 3 4 "FUNCTION"
V L "str" 47 471 "*sint8" `3449 
F G "http_escape_chars" 47 472 "void(*sint8 str)" `3448 
V L "new" 47 473 "sint8[3]" `3450 
V L "c" 47 474 "sint8" `3451 
V L "val" 47 475 "sint8" `3452 
V L "file" 47 495 "*sint8" `3454 
V L "ptr" 47 495 "*sint8" `3455 
F G "http_parse_cgi_string" 47 496 "void(*sint8 file,*sint8 ptr)" `3453 
V L "pKey" 47 497 "*sint8" `3456 
V L "pValue" 47 497 "*sint8" `3457 
V L "c" 47 497 "sint8" `3458 
V G "g_HttpCurrSocket" 47 523 "int8" `3459 
V G "g_HttpCurrConn" 47 524 "int8" `3460 
D G "tcp_http_tx_left" 47 526 "()  TCPIsPutReady(g_HttpCurrSocket)"
V L "c" 47 528 "sint8" `3462 
F G "tcp_http_putc" 47 529 "int16(sint8 c)" `3461  "putc(c);"
V G "lastHTTPPutConstPos" 47 534 "int32[1]" `3463 
V G "lastHTTPPutVarPos" 47 535 "*sint8[1]" `3464 
E G "MIME_TYPE_HTM" 47 540 "0" `3466 
E G "MIME_TYPE_HTML" 47 541 "1" `3467 
E G "MIME_TYPE_TXT" 47 542 "2" `3468 
E G "MIME_TYPE_XML" 47 543 "3" `3469 
E G "MIME_TYPE_GIF" 47 544 "4" `3470 
E G "MIME_TYPE_JPG" 47 545 "5" `3471 
E G "MIME_TYPE_PNG" 47 546 "6" `3472 
E G "MIME_TYPE_ICO" 47 547 "7" `3473 
T G "MIME_T" 47 547 "" `3474  "static int1 is_image[HTTP_NUM_SOCKETS];"
V G "g_HTTPMimeType" 47 550 "MIME_T[1]" `3475 
D G "IsImage" 47 554 "(t)   (g_HTTPMimeType[t]>=MIME_TYPE_GIF)"
D G "HTTP_NUM_MIME_TYPES" 47 556 "8"
V G "gc_MimeTypes" 47 558 "sint8[8][5]" `3476  "filename extensions"
V G "gc_MimeTypesHeader" 47 570 "sint8[8][13]" `3478 
V L "fname" 47 582 "*sint8" `3481 
F G "HTTPFindMimeType" 47 583 "MIME_T(*sint8 fname)" `3480 
V L "i" 47 584 "int8" `3482 
V L "str" 47 585 "sint8[5]" `3483 
V L "extension" 47 586 "sint8[5]" `3484 
C L "HTTPFindMimeType" 47 3 1 "FUNCTION"
E G "TCP_PUT_CONST_EC_FINISH" 47 611 "0" `3486 
E G "TCP_PUT_CONST_EC_CONTINUE" 47 612 "1" `3487 
E G "TCP_PUT_CONST_EC_ESCAPE" 47 613 "2" `3488 
T G "TCP_PUT_CONST_EC" 47 613 "" `3489  "TCPPutFileVarChunk(ptr)"
C L "TCPPutFileVarChunk" 47 3 9 "FUNCTION"
V L "retPtr" 47 633 "*" `3491 
F G "TCPPutFileVarChunk" 47 634 "TCP_PUT_CONST_EC(* retPtr)" `3490 
V L "txLeft" 47 635 "int16" `3493 
V L "n" 47 635 "int16" `3494 
V L "ptr" 47 636 "*sint8" `3495 
V L "ec" 47 636 "sint8" `3496 
C L "TCPPutFileVarChunk" 47 3 1 "FUNCTION"
C L "TCPPutFileVarChunk" 47 3 1 "FUNCTION"
C L "myMPFSSeek" 47 3 1 "FUNCTION"
V L "handle" 47 672 "*int32" `3498 
V L "offset" 47 672 "sint16" `3499 
F G "myMPFSSeek" 47 673 "void(*int32 handle,sint16 offset)" `3497 
C G "" 47 690 1 "*"
C G "" 47 690 1 "*"
C G "" 47 690 1 "*"
C G "" 47 690 1 "*"
C G "" 47 690 1 "*"
C G "" 47 690 1 "*"
D G "MPFSFileTell" 47 705 "()  (_currentFile)"
V G "HTTPbuffer" 47 709 "sint8[1][254]" `3500 
V G "http_page_req" 47 710 "int32[1]" `3502  "TCPPutFileParseConst(fstream, n, doSend)"
C L "TCPPutFileParseConst" 47 690 9 "FUNCTION"
C L "TCPPutFileParseConst" 47 690 1 "FUNCTION"
V L "fstream" 47 808 "*int32" `3504 
V L "max" 47 808 "int16" `3505 
V L "isPix" 47 808 "int8" `3506 
F G "TCPPutFileParseConst" 47 809 "sint8(*int32 fstream,int16 max,int8 isPix)" `3503 
V L "c" 47 810 "sint8" `3507 
V L "p" 47 811 "*int8" `3508 
V L "readCount" 47 812 "int16" `3509 
V L "escape" 47 813 "int1" `3510 
C L "TCPPutFileParseConst" 47 690 3 "FUNCTION"
C L "TCPPutFileParseConst" 47 690 1 "FUNCTION"
C L "TCPPutFileConstChunk" 47 690 9 "FUNCTION"
V L "retAddy" 47 908 "*int32" `3512 
V L "isPix" 47 908 "int8" `3513 
F G "TCPPutFileConstChunk" 47 909 "TCP_PUT_CONST_EC(*int32 retAddy,int8 isPix)" `3511 
V L "stopC" 47 910 "sint8" `3514 
V L "txLeft" 47 911 "int16" `3515 
V L "ec" 47 912 "TCP_PUT_CONST_EC" `3516 
C L "TCPPutFileConstChunk" 47 690 1 "FUNCTION"
V L "fstream" 47 951 "*int32" `3518 
F G "TCPPutFileConstGetEscape" 47 952 "int8(*int32 fstream)" `3517 
V L "str" 47 963 "sint8[3]" `3519 
V L "ret" 47 964 "int16" `3520 
C L "TCPPutFileConstGetEscape" 47 690 1 "FUNCTION"
C L "TCPPutFileConstGetEscape" 47 690 1 "FUNCTION"
V L "errorCode" 47 985 "int16" `3522 
V L "MMCfile" 47 985 "*int32" `3523 
V L "fname" 47 985 "*sint8" `3524 
F G "tcp_http_put_file" 47 986 "int8(int16 errorCode,*int32 MMCfile,*sint8 fname)" `3521 
V L "str" 47 987 "sint8[1][40]" `3525 
V L "ec" 47 988 "sint8" `3527 
V L "escaped" 47 992 "int8" `3528 
V L "position" 47 995 "int32" `3529 
V L "HTTP_PUT_FILE_INIT" 47 1000 "0" `3531 
V L "HTTP_PUT_FILE_CONTINUE" 47 1001 "1" `3532 
V L "HTTP_PUT_FILE_CHUNK_END" 47 1002 "2" `3533 
V L "HTTP_PUT_FILE_DONE" 47 1003 "3" `3534 
V L "status" 47 1003 "[1]" `3535 
C L "tcp_http_put_file" 47 690 1 "FUNCTION"
C L "tcp_http_put_file" 47 690 1 "FUNCTION"
C L "tcp_http_put_file" 47 690 1 "FUNCTION"
C L "tcp_http_put_file" 47 690 1 "FUNCTION"
C L "tcp_http_put_file" 47 690 1 "FUNCTION"
C L "tcp_http_put_file" 47 690 1 "FUNCTION"
C L "tcp_http_put_file" 47 690 2 "FUNCTION"
C L "HTTPInit" 47 690 1 "FUNCTION"
F G "HTTPInit" 47 1176 "void()" `2956 
V L "i" 47 1177 "sint8" `3562  "fprintf(USER,"\r\nHTTP OPENING");"
C L "HTTPInit" 47 690 1 "FUNCTION"
C L "HTTPInit" 47 690 1 "FUNCTION"
D G "HTTP_INDEX_PAGE_EC" 47 1203 "0x01"
D G "HTTP_FILE_PAGE_EC" 47 1204 "0x02"
D G "HTTP_404_PAGE_EC" 47 1205 "0x00"
D G "HTTP_401_PAGE_EC" 47 1206 "0xFE"
D G "HTTP_500_PAGE_EC" 47 1207 "0xFF"
F G "HTTPServer" 47 1209 "void()" `2957 
V L "tokens_header" 47 1210 "sint8[1]" `3563 
V L "tokens_get" 47 1211 "sint8[1]" `3564 
V L "http_get_str" 47 1212 "sint8[1]" `3565 
V L "http_post_str" 47 1213 "sint8[1]" `3566 
V L "http_len_str" 47 1214 "sint8[1]" `3567 
V L "j" 47 1215 "int8" `3568 
V L "l" 47 1215 "int8" `3569 
V L "index" 47 1217 "sint8[1]" `3570 
V L "page" 47 1218 "sint8[1][20]" `3571 
V L "fstream" 47 1219 "int32" `3573  "static char http_keepalive_str[]="keep-alive";"
C L "HTTPServer" 47 690 1 "FUNCTION"
V L "i" 47 1230 "int8[1]" `3574 
V L "HTTP_REQ_GET" 47 1231 "1" `3576 
V L "HTTP_REQ_POST" 47 1231 "2" `3577 
V L "HTTP_REQ_UNKOWN" 47 1231 "0" `3578 
V L "http_cmd" 47 1231 "[1]" `3579 
V L "http_error_code" 47 1233 "int16[1]" `3580 
V L "http_post_len" 47 1234 "int16[1]" `3581 
V L "http_timer" 47 1235 "TICK[1]" `3582 
V L "doneSend" 47 1241 "int1" `3583 
V L "postContinue" 47 1241 "int1" `3584 
V L "c" 47 1243 "sint8" `3585 
V L "pKey" 47 1243 "*sint8" `3586 
V L "pValue" 47 1243 "*sint8" `3587  "unsigned int8 hs, currSocket;"
C L "HTTPServer" 47 690 2 "FUNCTION"
C L "HTTPServer" 47 690 6 "FUNCTION"
C L "HTTPServer" 47 690 2 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 3 "FUNCTION"
C L "HTTPServer" 47 690 2 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 2 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 5 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 4 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 8 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
C L "HTTPServer" 47 690 1 "FUNCTION"
D G "__P18CXXXX_C__" 48 4 ""
C L "memcpypgm2ram" 3 1 1 "FUNCTION"
C L "memcpypgm2ram" 48 7 14 "FUNCTION"
V L "d" 48 40 "*int8" `1500 
V L "s" 48 40 "int32" `1501 
V L "n" 48 40 "int16" `3599 
F G "memcpypgm2ram" 48 41 "void(*int8 d,int32 s,int16 n)" `1499  "printf("ROM_0x%LX-to-0x%LX ", d, s);"
V L "d" 48 50 "*sint8" `1504 
V L "s" 48 50 "int32" `3598 
F G "strcpypgm2ram" 48 51 "void(*sint8 d,int32 s)" `1503 
V L "c" 48 52 "sint8" `3596 
V L "s" 48 70 "*" `1491 
V L "c" 48 70 "int8" `3599 
F G "strchrpgm" 48 71 "*sint8(* s,int8 c)" `1490 
V L "s1" 48 78 "*sint8" `1495 
V L "s2" 48 78 "int32" `3599 
F G "strstrrampgm" 48 79 "*sint8(*sint8 s1,int32 s2)" `1494 
V L "s" 48 80 "*sint8" `3597 
V L "t" 48 81 "*" `3598 
V L "s" 48 103 "int32" `3600 
F G "strlenpgm" 48 104 "int8(int32 s)" `1497 
V L "c" 48 105 "sint8" `3599 
V L "counter" 48 106 "sint8" `3600 
C L "DHCPBoundOrDisabled" 48 7 1 "FUNCTION"
F G "DHCPBoundOrDisabled" 34 208 "int8()" `2967 
F G "IsLinked" 34 217 "int8()" `2968 
V G "_MpfsEofLoc" 34 229 "int32" `2986 
V L "pDest" 34 231 "*int8" `2988 
V L "n" 34 231 "int16" `3603 
F G "MPFSGetBytes" 34 232 "int16(*int8 pDest,int16 n)" `2987 
V L "ret" 34 233 "int16" `3601 
V L "i" 34 234 "int16" `3602 
V L "p" 34 235 "*int8" `3603 
V L "escaped" 34 236 "int1" `3604 
C L "MPFSGetBytes" 34 252 1 "FUNCTION"
C L "MPFSGetBytes" 34 252 1 "FUNCTION"
C L "MPFSGetBytes" 34 252 1 "FUNCTION"
C L "MPFSGetBytes" 34 252 1 "FUNCTION"
D G "debug_array" 34 789 "(str, p, n)"
C L "TickGetSafe" 34 252 3 "FUNCTION"
F G "TickGetSafe" 34 797 "TICK()" `2990 
V L "myTickReading" 34 798 "BYTE[6]" `3605 
C L "GenerateRandomByteFromTimers" 34 252 1 "FUNCTION"
F G "GenerateRandomByteFromTimers" 34 817 "BYTE()" `2991 
V L "rand" 34 818 "BYTE" `3606 
D G "RX_BUFFER_SIZE" 0 5 "27"
V G "Rx_Buffer" 0 6 "sint8[28]" `3613 
V G "Rx_Buffer2" 0 7 "sint8[28]" `3614 
V G "RX_Wr_Index" 0 8 "sint8" `3615 
V G "Dato2" 0 9 "sint8" `3616 
V G "Inicio" 0 9 "sint8" `3617 
V G "Dato_Exitoso" 0 9 "sint8" `3618 
V G "i" 0 9 "sint8" `3619 
V G "z" 0 9 "sint8" `3620 
F G "serial_rx_isr" 0 12 "void()" `3621 
C L "serial_rx_isr" 0 15 1 "FUNCTION"
C L "serial_rx_isr" 0 15 1 "FUNCTION"
C L "serial_rx_isr" 0 15 1 "FUNCTION"
F G "LeeDisplay" 0 39 "void()" `3622 
C L "LeeDisplay" 0 15 1 "FUNCTION"
C L "LeeDisplay" 0 15 2 "FUNCTION"
C L "http_format_char" 0 15 12 "FUNCTION"
V L "file" 0 68 "*sint8" `2959 
V L "id" 0 68 "sint8" `2960 
V L "str" 0 68 "*sint8" `2961 
V L "max_ret" 0 68 "int8" `3627 
F G "http_format_char" 0 69 "int8(*sint8 file,sint8 id,*sint8 str,int8 max_ret)" `2958  "TODO: This is a callback function to the HTTP stack."
C L "http_format_char" 0 15 14 "FUNCTION"
V L "new_str" 0 87 "sint8[20]" `3623 
V L "len" 0 88 "sint8" `3624 
V L "file" 0 108 "*sint8" `2964 
V L "key" 0 108 "*sint8" `2965 
V L "val" 0 108 "*sint8" `3637 
F G "http_exec_cgi" 0 109 "void(*sint8 file,*sint8 key,*sint8 val)" `2963  "TODO: This is a callback function to the HTTP stack."
C L "http_exec_cgi" 0 15 12 "FUNCTION"
F G "IPAddressInit" 0 131 "void(*sint8 file,*sint8 key,*sint8 val)" `3634  "MAC address of this unit"
C L "IPAddressInit" 0 15 1 "FUNCTION"
C L "IPAddressInit" 0 15 1 "FUNCTION"
C L "IPAddressInit" 0 15 1 "FUNCTION"
F G "main" 0 160 "void(*sint8 key,*sint8 val)" `3635 
C L "main" 0 15 1 "FUNCTION"
C L "main" 0 15 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
